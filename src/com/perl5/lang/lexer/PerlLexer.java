/* The following code was generated by JFlex 1.4.3 on 19.04.15 19:57 */

package com.perl5.lang.lexer;

/*
    http://jflex.de/manual.html
    http://www2.cs.tum.edu/projects/cup

*/

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import org.jetbrains.annotations.NotNull;
import com.perl5.lang.lexer.elements.PerlFunction;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 19.04.15 19:57 from the specification file
 * <tt>C:/Repository/Perl5-IDEA/src/com/perl5/lang/lexer/Perl.flex</tt>
 */
public class PerlLexer extends PerlLexerProto implements FlexLexer, PerlTokenTypes {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int FUNCTION_DEFINITION = 4;
  public static final int LEX_REQUIRE = 8;
  public static final int PACKAGE_INSTANCE_CALL = 14;
  public static final int PACKAGE_USE = 6;
  public static final int LEX_DEREFERENCE = 18;
  public static final int LEX_EOF = 16;
  public static final int PACKAGE_STATIC_CALL = 12;
  public static final int YYINITIAL = 0;
  public static final int PACKAGE_USE_PARAMS = 10;
  public static final int PACKAGE_DEFINITION = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  1,  1,  4,  4,  5,  5,  6,  6, 
     7,  7,  8, 8
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\4\1\0\1\2\1\1\22\0\1\2\1\57\1\7"+
    "\1\27\1\22\1\24\1\70\1\10\1\34\1\35\1\25\1\56\1\36"+
    "\1\20\1\26\1\62\12\5\1\17\1\3\1\64\1\37\1\21\1\61"+
    "\1\23\1\15\2\6\1\14\1\12\10\6\1\13\5\6\1\16\6\6"+
    "\1\32\1\61\1\33\1\61\1\11\1\0\1\47\1\45\1\50\1\72"+
    "\1\42\1\6\1\52\1\6\1\55\1\6\1\51\1\65\1\67\1\43"+
    "\1\44\1\46\1\54\1\53\1\41\1\66\1\40\2\6\1\63\2\6"+
    "\1\30\1\71\1\31\1\60\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\2\1\1\4"+
    "\3\6\2\1\2\6\1\1\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\6\12\5\11\6\1\4"+
    "\1\17\2\4\1\20\2\4\1\21\2\4\1\22\2\4"+
    "\1\23\2\4\1\24\1\4\1\1\1\25\1\2\1\3"+
    "\1\25\1\4\1\5\2\1\1\4\3\6\2\1\2\6"+
    "\1\1\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\6\6\5\11\6\1\5\4\0\1\26\1\0"+
    "\1\22\1\4\1\27\1\4\1\30\1\31\1\0\1\32"+
    "\1\0\1\33\1\0\1\34\1\0\1\6\1\7\2\5"+
    "\1\6\1\35\4\5\1\6\1\0\2\4\1\0\4\4"+
    "\1\0\2\25\4\0\2\25\1\26\1\0\2\25\1\22"+
    "\1\4\1\27\1\4\1\30\1\31\1\0\1\32\1\0"+
    "\1\33\1\0\1\34\1\0\1\6\1\25\1\6\3\5"+
    "\1\6\1\5\1\36\1\37\1\4\2\5\1\40\1\41"+
    "\2\5\1\36\2\17\2\20\1\36\2\21\2\22\2\23"+
    "\2\24\1\36\1\37\1\4\2\5\1\0\4\5\2\17"+
    "\2\20\2\21\2\22\2\23\2\24\1\0\6\5\2\17"+
    "\2\20\2\21\2\22\2\23\2\24\5\5\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\5\1\42\1\43\1\44"+
    "\7\42";

  private static int [] zzUnpackAction() {
    int [] result = new int[272];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\u019d"+
    "\0\u01d8\0\u0213\0\u024e\0\u0213\0\u0289\0\u02c4\0\u02ff\0\u033a"+
    "\0\u0375\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7\0\u0512"+
    "\0\u054d\0\u0588\0\u0213\0\u0213\0\u0213\0\u0213\0\u0213\0\u0213"+
    "\0\u0213\0\u05c3\0\u05fe\0\u0639\0\u0674\0\u06af\0\u06ea\0\u0725"+
    "\0\u0760\0\u079b\0\u07d6\0\u0811\0\u084c\0\u0887\0\u08c2\0\u0213"+
    "\0\u08fd\0\u0938\0\u0973\0\u09ae\0\u09e9\0\u0a24\0\u0a5f\0\u0a9a"+
    "\0\u0ad5\0\u0b10\0\u0b4b\0\u0b86\0\u0bc1\0\u0bfc\0\u0c37\0\u0c72"+
    "\0\u0cad\0\u0ce8\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a"+
    "\0\u0e85\0\u0e85\0\u0e4a\0\u0ec0\0\u0efb\0\u0f36\0\u0f71\0\u0fac"+
    "\0\u0fe7\0\u1022\0\u105d\0\u1098\0\u10d3\0\u110e\0\u1149\0\u1184"+
    "\0\u11bf\0\u11fa\0\u0e4a\0\u0e4a\0\u0e4a\0\u0e4a\0\u0e4a\0\u0e4a"+
    "\0\u0e4a\0\u1235\0\u1270\0\u12ab\0\u12e6\0\u1321\0\u135c\0\u1397"+
    "\0\u13d2\0\u140d\0\u1448\0\u0e4a\0\u1483\0\u14be\0\u14f9\0\u1534"+
    "\0\u156f\0\u15aa\0\u15e5\0\u1620\0\u165b\0\u02ff\0\u0213\0\u033a"+
    "\0\u0213\0\u1696\0\u0213\0\u16d1\0\u0213\0\u170c\0\u0461\0\u1747"+
    "\0\u049c\0\u1782\0\u04d7\0\u17bd\0\u17f8\0\u1833\0\u186e\0\u18a9"+
    "\0\u18e4\0\u02c4\0\u191f\0\u195a\0\u1995\0\u19d0\0\u1a0b\0\u1a46"+
    "\0\u1a81\0\u1abc\0\u1af7\0\u1b32\0\u1b6d\0\u1ba8\0\u1be3\0\u1c1e"+
    "\0\u0e4a\0\u0e4a\0\u1c59\0\u1c94\0\u1ccf\0\u1d0a\0\u0f71\0\u0f71"+
    "\0\u1d45\0\u0e4a\0\u0fac\0\u0fac\0\u1d80\0\u0e4a\0\u1dbb\0\u0e4a"+
    "\0\u1df6\0\u0e4a\0\u1e31\0\u10d3\0\u1e6c\0\u110e\0\u1ea7\0\u1149"+
    "\0\u1ee2\0\u1f1d\0\u1f58\0\u11fa\0\u0f36\0\u1f93\0\u1fce\0\u2009"+
    "\0\u2044\0\u191f\0\u207f\0\u0213\0\u165b\0\u20ba\0\u20f5\0\u02c4"+
    "\0\u02c4\0\u2130\0\u216b\0\u21a6\0\u21e1\0\u221c\0\u2257\0\u2292"+
    "\0\u22cd\0\u2308\0\u2343\0\u237e\0\u23b9\0\u23f4\0\u242f\0\u246a"+
    "\0\u24a5\0\u24e0\0\u0e4a\0\u1d0a\0\u251b\0\u2556\0\u2591\0\u25cc"+
    "\0\u2607\0\u2642\0\u267d\0\u26b8\0\u26f3\0\u272e\0\u2769\0\u27a4"+
    "\0\u27df\0\u281a\0\u2855\0\u2890\0\u28cb\0\u2906\0\u2941\0\u297c"+
    "\0\u29b7\0\u29f2\0\u2a2d\0\u2a68\0\u2aa3\0\u2ade\0\u2b19\0\u2b54"+
    "\0\u2b8f\0\u2bca\0\u2c05\0\u2c40\0\u2c7b\0\u2cb6\0\u2cf1\0\u2d2c"+
    "\0\u2d67\0\u2da2\0\u2ddd\0\u2e18\0\u2e53\0\u2e8e\0\u2ec9\0\u2f04"+
    "\0\u2f3f\0\u2f7a\0\u2fb5\0\u2ff0\0\u302b\0\u3066\0\u02c4\0\u02c4"+
    "\0\u02c4\0\u0a5f\0\u0b10\0\u0bc1\0\u0c72\0\u0d23\0\u0dd4\0\u0f36";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[272];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\12\2\13\1\14\1\13\1\15\1\16\1\17\1\20"+
    "\1\21\5\16\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\16\1\50\1\51\1\52\1\16\1\53\1\54\2\16"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\53"+
    "\2\16\1\64\1\65\1\16\1\12\2\13\1\14\1\13"+
    "\1\66\1\67\1\17\1\20\1\70\5\67\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\16\67"+
    "\1\55\1\56\1\57\1\60\1\61\1\67\1\63\3\67"+
    "\1\64\1\65\1\67\1\12\2\13\1\14\1\13\1\71"+
    "\1\72\1\17\1\20\1\73\5\72\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\16\72\1\55"+
    "\1\56\1\57\1\60\1\61\1\72\1\63\3\72\1\64"+
    "\1\65\1\72\1\12\2\13\1\14\1\13\1\74\1\75"+
    "\1\17\1\20\1\76\5\75\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\16\75\1\55\1\56"+
    "\1\57\1\60\1\61\1\75\1\63\3\75\1\64\1\65"+
    "\1\75\1\12\2\13\1\14\1\13\1\77\1\100\1\17"+
    "\1\20\1\101\5\100\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\16\100\1\55\1\56\1\57"+
    "\1\60\1\61\1\100\1\63\3\100\1\64\1\65\1\100"+
    "\1\12\2\13\1\14\1\13\1\102\1\103\1\17\1\20"+
    "\1\104\5\103\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\16\103\1\55\1\56\1\57\1\60"+
    "\1\61\1\103\1\63\3\103\1\64\1\65\1\103\1\12"+
    "\2\13\1\14\1\13\1\105\1\106\1\17\1\20\1\107"+
    "\5\106\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\16\106\1\55\1\56\1\57\1\60\1\61"+
    "\1\106\1\63\3\106\1\64\1\65\1\106\1\110\1\111"+
    "\1\112\1\113\1\114\1\115\1\116\1\117\1\120\1\121"+
    "\5\116\1\122\1\123\1\124\1\125\1\126\1\127\1\130"+
    "\1\131\1\132\1\133\1\134\1\135\1\136\1\137\1\140"+
    "\1\141\1\142\2\116\1\143\1\144\1\145\2\116\1\146"+
    "\1\147\1\116\1\150\3\116\1\151\1\152\1\153\1\154"+
    "\1\155\1\156\1\157\1\150\2\116\1\160\1\161\1\116"+
    "\1\12\2\13\1\14\1\13\1\15\1\16\1\17\1\20"+
    "\1\21\5\16\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\2\16\1\45\1\162\1\47\2\16"+
    "\1\51\1\52\1\16\1\53\3\16\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\53\2\16\1\64\1\65"+
    "\1\16\74\0\2\13\1\0\1\13\73\0\1\15\1\16"+
    "\2\0\1\15\5\16\1\163\1\164\5\0\1\165\11\0"+
    "\16\16\5\0\1\16\1\0\3\16\2\0\1\16\5\0"+
    "\2\16\2\0\6\16\1\163\1\164\17\0\16\16\5\0"+
    "\1\16\1\0\3\16\2\0\1\16\7\166\1\167\63\166"+
    "\10\170\1\171\62\170\5\0\1\15\1\16\2\0\1\172"+
    "\5\16\1\163\1\164\5\0\1\165\11\0\16\16\5\0"+
    "\1\16\1\0\3\16\2\0\1\16\17\0\1\173\60\0"+
    "\1\174\3\0\1\174\6\0\1\60\1\175\15\0\1\60"+
    "\54\0\1\60\15\0\1\60\40\0\2\176\2\0\6\176"+
    "\3\0\1\177\15\0\16\176\5\0\1\176\1\0\3\176"+
    "\2\0\1\176\5\0\2\200\2\0\6\200\3\0\1\201"+
    "\15\0\16\200\5\0\1\200\1\0\3\200\2\0\1\200"+
    "\5\0\2\202\2\0\6\202\3\0\1\203\15\0\16\202"+
    "\5\0\1\202\1\0\3\202\2\0\1\202\5\0\2\204"+
    "\2\0\6\204\3\0\1\205\2\0\1\60\11\0\1\60"+
    "\16\204\5\0\1\204\1\0\3\204\2\0\1\204\26\0"+
    "\1\206\44\0\4\32\1\207\66\32\21\0\1\41\15\0"+
    "\1\60\20\0\1\60\17\0\2\16\2\0\6\16\1\163"+
    "\1\164\17\0\1\16\1\210\14\16\5\0\1\16\1\0"+
    "\3\16\2\0\1\16\5\0\2\16\2\0\6\16\1\163"+
    "\1\164\17\0\1\211\15\16\5\0\1\16\1\0\3\16"+
    "\2\0\1\16\5\0\2\16\2\0\6\16\1\163\1\164"+
    "\17\0\14\16\1\212\1\16\5\0\1\16\1\0\3\16"+
    "\2\0\1\16\5\0\2\16\2\0\6\16\1\163\1\164"+
    "\17\0\2\16\1\212\1\16\1\213\11\16\5\0\1\16"+
    "\1\0\3\16\2\0\1\16\5\0\2\16\2\0\6\16"+
    "\1\163\1\164\17\0\13\16\1\212\2\16\5\0\1\16"+
    "\1\0\3\16\2\0\1\16\5\0\2\16\2\0\6\16"+
    "\1\163\1\164\17\0\7\16\1\214\6\16\5\0\1\16"+
    "\1\0\3\16\2\0\1\16\5\0\2\16\2\0\6\16"+
    "\1\163\1\164\17\0\3\16\1\215\12\16\5\0\1\16"+
    "\1\0\3\16\2\0\1\16\5\0\2\16\2\0\6\16"+
    "\1\163\1\164\17\0\16\16\5\0\1\16\1\0\2\16"+
    "\1\216\2\0\1\16\5\0\2\16\2\0\6\16\1\163"+
    "\1\164\17\0\2\16\1\212\13\16\5\0\1\16\1\0"+
    "\1\16\1\212\1\16\2\0\1\16\5\0\2\16\2\0"+
    "\6\16\1\163\1\164\17\0\2\16\1\217\13\16\5\0"+
    "\1\16\1\0\3\16\2\0\1\16\37\0\1\60\16\0"+
    "\1\60\53\0\1\60\20\0\1\60\72\0\1\60\74\0"+
    "\1\60\15\0\2\16\2\0\6\16\1\163\1\164\17\0"+
    "\4\16\1\47\11\16\5\0\1\16\1\0\3\16\2\0"+
    "\1\16\37\0\1\220\24\0\1\60\76\0\1\60\73\0"+
    "\1\60\6\0\1\66\1\67\2\0\1\66\5\67\1\221"+
    "\1\164\5\0\1\165\11\0\16\67\5\0\1\67\1\0"+
    "\3\67\2\0\1\67\5\0\2\67\2\0\6\67\1\221"+
    "\1\164\17\0\16\67\5\0\1\67\1\0\3\67\2\0"+
    "\1\67\5\0\1\66\1\67\2\0\1\222\5\67\1\221"+
    "\1\164\5\0\1\165\11\0\16\67\5\0\1\67\1\0"+
    "\3\67\2\0\1\67\5\0\1\71\1\72\2\0\1\71"+
    "\5\72\1\163\1\164\5\0\1\165\11\0\16\72\5\0"+
    "\1\72\1\0\3\72\2\0\1\72\5\0\2\72\2\0"+
    "\6\72\1\163\1\164\17\0\16\72\5\0\1\72\1\0"+
    "\3\72\2\0\1\72\5\0\1\71\1\72\2\0\1\223"+
    "\5\72\1\163\1\164\5\0\1\165\11\0\16\72\5\0"+
    "\1\72\1\0\3\72\2\0\1\72\5\0\1\74\1\75"+
    "\2\0\1\74\5\75\1\224\1\164\5\0\1\165\11\0"+
    "\16\75\5\0\1\75\1\0\3\75\2\0\1\75\5\0"+
    "\2\75\2\0\6\75\1\224\1\164\17\0\16\75\5\0"+
    "\1\75\1\0\3\75\2\0\1\75\5\0\1\74\1\75"+
    "\2\0\1\225\5\75\1\224\1\164\5\0\1\165\11\0"+
    "\16\75\5\0\1\75\1\0\3\75\2\0\1\75\5\0"+
    "\1\77\1\100\2\0\1\77\5\100\1\163\1\164\5\0"+
    "\1\165\11\0\16\100\5\0\1\100\1\0\3\100\2\0"+
    "\1\100\5\0\2\100\2\0\6\100\1\163\1\164\17\0"+
    "\16\100\5\0\1\100\1\0\3\100\2\0\1\100\5\0"+
    "\1\77\1\100\2\0\1\226\5\100\1\163\1\164\5\0"+
    "\1\165\11\0\16\100\5\0\1\100\1\0\3\100\2\0"+
    "\1\100\5\0\1\102\1\103\2\0\1\102\5\103\1\163"+
    "\1\164\5\0\1\165\11\0\16\103\5\0\1\103\1\0"+
    "\3\103\2\0\1\103\5\0\2\103\2\0\6\103\1\163"+
    "\1\164\17\0\16\103\5\0\1\103\1\0\3\103\2\0"+
    "\1\103\5\0\1\102\1\103\2\0\1\227\5\103\1\163"+
    "\1\164\5\0\1\165\11\0\16\103\5\0\1\103\1\0"+
    "\3\103\2\0\1\103\5\0\1\105\1\106\2\0\1\105"+
    "\5\106\1\163\1\164\5\0\1\165\11\0\16\106\5\0"+
    "\1\106\1\0\3\106\2\0\1\106\5\0\2\106\2\0"+
    "\6\106\1\163\1\164\17\0\16\106\5\0\1\106\1\0"+
    "\3\106\2\0\1\106\5\0\1\105\1\106\2\0\1\230"+
    "\5\106\1\163\1\164\5\0\1\165\11\0\16\106\5\0"+
    "\1\106\1\0\3\106\2\0\1\106\1\231\1\232\2\231"+
    "\1\233\67\231\1\111\1\112\1\231\1\114\66\231\1\0"+
    "\1\114\1\13\1\0\1\114\66\0\1\231\1\232\2\231"+
    "\1\233\1\115\1\116\2\231\1\115\5\116\1\234\1\235"+
    "\5\231\1\236\11\231\16\116\5\231\1\116\1\231\3\116"+
    "\2\231\1\116\1\231\1\232\2\231\1\233\2\116\2\231"+
    "\6\116\1\234\1\235\17\231\16\116\5\231\1\116\1\231"+
    "\3\116\2\231\1\116\1\237\1\240\2\237\1\241\2\237"+
    "\1\242\63\237\1\243\1\244\2\243\1\245\3\243\1\246"+
    "\62\243\1\231\1\232\2\231\1\233\1\115\1\116\2\231"+
    "\1\247\5\116\1\234\1\235\5\231\1\236\11\231\16\116"+
    "\5\231\1\116\1\231\3\116\2\231\1\116\1\231\1\232"+
    "\2\231\1\233\12\231\1\250\54\231\1\232\2\231\1\233"+
    "\1\251\3\231\1\251\6\231\1\154\1\252\15\231\1\154"+
    "\34\231\1\232\2\231\1\233\14\231\1\154\15\231\1\154"+
    "\34\231\1\232\2\231\1\233\2\253\2\231\6\253\3\231"+
    "\1\254\15\231\16\253\5\231\1\253\1\231\3\253\2\231"+
    "\1\253\1\231\1\232\2\231\1\233\2\255\2\231\6\255"+
    "\3\231\1\256\15\231\16\255\5\231\1\255\1\231\3\255"+
    "\2\231\1\255\1\231\1\232\2\231\1\233\2\257\2\231"+
    "\6\257\3\231\1\260\15\231\16\257\5\231\1\257\1\231"+
    "\3\257\2\231\1\257\1\231\1\232\2\231\1\233\2\261"+
    "\2\231\6\261\3\231\1\262\2\231\1\154\11\231\1\154"+
    "\16\261\5\231\1\261\1\231\3\261\2\231\1\261\1\231"+
    "\1\232\2\231\1\233\21\231\1\263\44\231\1\132\1\264"+
    "\2\132\1\233\66\132\1\231\1\232\2\231\1\233\14\231"+
    "\1\141\15\231\1\154\20\231\1\154\13\231\1\232\2\231"+
    "\1\233\2\116\2\231\6\116\1\234\1\235\17\231\14\116"+
    "\1\265\1\116\5\231\1\116\1\231\3\116\2\231\1\116"+
    "\1\231\1\232\2\231\1\233\2\116\2\231\6\116\1\234"+
    "\1\235\17\231\2\116\1\265\1\116\1\266\11\116\5\231"+
    "\1\116\1\231\3\116\2\231\1\116\1\231\1\232\2\231"+
    "\1\233\2\116\2\231\6\116\1\234\1\235\17\231\13\116"+
    "\1\265\2\116\5\231\1\116\1\231\3\116\2\231\1\116"+
    "\1\231\1\232\2\231\1\233\2\116\2\231\6\116\1\234"+
    "\1\235\17\231\3\116\1\267\12\116\5\231\1\116\1\231"+
    "\3\116\2\231\1\116\1\231\1\232\2\231\1\233\2\116"+
    "\2\231\6\116\1\234\1\235\17\231\16\116\5\231\1\116"+
    "\1\231\2\116\1\270\2\231\1\116\1\231\1\232\2\231"+
    "\1\233\2\116\2\231\6\116\1\234\1\235\17\231\2\116"+
    "\1\265\13\116\5\231\1\116\1\231\1\116\1\265\1\116"+
    "\2\231\1\116\1\231\1\232\2\231\1\233\32\231\1\154"+
    "\16\231\1\154\15\231\1\232\2\231\1\233\32\231\1\154"+
    "\20\231\1\154\13\231\1\232\2\231\1\233\53\231\1\154"+
    "\13\231\1\232\2\231\1\233\55\231\1\154\11\231\1\232"+
    "\2\231\1\233\2\116\2\231\6\116\1\234\1\235\17\231"+
    "\4\116\1\145\11\116\5\231\1\116\1\231\3\116\2\231"+
    "\1\116\1\231\1\232\2\231\1\233\32\231\1\271\24\231"+
    "\1\154\7\231\1\232\2\231\1\233\63\231\1\154\3\231"+
    "\1\232\2\231\1\233\64\231\1\154\1\231\5\0\2\16"+
    "\2\0\6\16\1\163\1\164\17\0\2\16\1\212\1\16"+
    "\1\272\11\16\5\0\1\16\1\0\3\16\2\0\1\16"+
    "\17\0\1\273\74\0\1\274\56\0\1\275\3\0\1\275"+
    "\66\0\1\15\1\16\2\0\1\15\1\276\1\16\1\277"+
    "\2\16\1\163\1\164\5\0\1\165\11\0\16\16\5\0"+
    "\1\16\1\0\3\16\2\0\1\16\5\0\1\174\3\0"+
    "\1\174\14\0\1\165\51\0\2\176\2\0\6\176\21\0"+
    "\16\176\5\0\1\176\1\0\3\176\2\0\1\176\5\0"+
    "\2\200\2\0\6\200\21\0\16\200\5\0\1\200\1\0"+
    "\3\200\2\0\1\200\5\0\2\202\2\0\6\202\21\0"+
    "\16\202\5\0\1\202\1\0\3\202\2\0\1\202\5\0"+
    "\2\204\2\0\6\204\21\0\16\204\5\0\1\204\1\0"+
    "\3\204\2\0\1\204\5\0\2\204\2\0\6\204\3\0"+
    "\1\205\15\0\16\204\5\0\1\204\1\0\3\204\2\0"+
    "\1\204\26\0\1\60\45\0\1\207\2\0\1\207\73\0"+
    "\2\16\2\0\6\16\1\163\1\164\17\0\2\16\1\300"+
    "\13\16\5\0\1\16\1\0\3\16\2\0\1\16\5\0"+
    "\2\16\2\0\6\16\1\163\1\164\17\0\5\16\1\301"+
    "\10\16\5\0\1\16\1\0\3\16\2\0\1\16\5\0"+
    "\2\16\2\0\6\16\1\163\1\164\17\0\16\16\5\0"+
    "\1\16\1\0\1\16\1\212\1\16\2\0\1\16\5\0"+
    "\2\16\2\0\6\16\1\163\1\164\17\0\10\16\1\302"+
    "\5\16\5\0\1\16\1\0\3\16\2\0\1\16\5\0"+
    "\2\16\2\0\6\16\1\163\1\164\17\0\16\16\5\0"+
    "\1\16\1\0\3\16\2\0\1\212\5\0\2\16\2\0"+
    "\6\16\1\163\1\164\17\0\6\16\1\212\7\16\5\0"+
    "\1\16\1\0\3\16\2\0\1\16\5\0\2\16\2\0"+
    "\6\16\1\163\1\164\17\0\14\16\1\303\1\16\5\0"+
    "\1\16\1\0\3\16\2\0\1\16\21\0\1\60\70\0"+
    "\1\304\60\0\1\66\1\67\2\0\1\66\1\305\1\67"+
    "\1\306\2\67\1\221\1\164\5\0\1\165\11\0\16\67"+
    "\5\0\1\67\1\0\3\67\2\0\1\67\5\0\1\71"+
    "\1\72\2\0\1\71\1\307\1\72\1\310\2\72\1\163"+
    "\1\164\5\0\1\165\11\0\16\72\5\0\1\72\1\0"+
    "\3\72\2\0\1\72\17\0\1\311\60\0\1\74\1\75"+
    "\2\0\1\74\1\312\1\75\1\313\2\75\1\224\1\164"+
    "\5\0\1\165\11\0\16\75\5\0\1\75\1\0\3\75"+
    "\2\0\1\75\5\0\1\77\1\100\2\0\1\77\1\314"+
    "\1\100\1\315\2\100\1\163\1\164\5\0\1\165\11\0"+
    "\16\100\5\0\1\100\1\0\3\100\2\0\1\100\5\0"+
    "\1\102\1\103\2\0\1\102\1\316\1\103\1\317\2\103"+
    "\1\163\1\164\5\0\1\165\11\0\16\103\5\0\1\103"+
    "\1\0\3\103\2\0\1\103\5\0\1\105\1\106\2\0"+
    "\1\105\1\320\1\106\1\321\2\106\1\163\1\164\5\0"+
    "\1\165\11\0\16\106\5\0\1\106\1\0\3\106\2\0"+
    "\1\106\1\0\1\233\2\0\1\233\66\0\1\231\1\232"+
    "\2\231\1\233\12\231\1\322\54\231\1\232\2\231\1\233"+
    "\14\231\1\323\52\231\1\232\2\231\1\233\1\324\3\231"+
    "\1\324\61\231\1\166\1\241\2\166\1\241\2\166\1\167"+
    "\63\166\1\170\1\245\2\170\1\245\3\170\1\171\62\170"+
    "\1\231\1\232\2\231\1\233\1\115\1\116\2\231\1\115"+
    "\1\325\1\116\1\326\2\116\1\234\1\235\5\231\1\236"+
    "\11\231\16\116\5\231\1\116\1\231\3\116\2\231\1\116"+
    "\1\231\1\232\2\231\1\233\1\251\3\231\1\251\14\231"+
    "\1\236\45\231\1\232\2\231\1\233\2\253\2\231\6\253"+
    "\21\231\16\253\5\231\1\253\1\231\3\253\2\231\1\253"+
    "\1\231\1\232\2\231\1\233\2\255\2\231\6\255\21\231"+
    "\16\255\5\231\1\255\1\231\3\255\2\231\1\255\1\231"+
    "\1\232\2\231\1\233\2\257\2\231\6\257\21\231\16\257"+
    "\5\231\1\257\1\231\3\257\2\231\1\257\1\231\1\232"+
    "\2\231\1\233\2\261\2\231\6\261\21\231\16\261\5\231"+
    "\1\261\1\231\3\261\2\231\1\261\1\231\1\232\2\231"+
    "\1\233\2\261\2\231\6\261\3\231\1\262\15\231\16\261"+
    "\5\231\1\261\1\231\3\261\2\231\1\261\1\231\1\232"+
    "\2\231\1\233\21\231\1\154\45\231\1\232\2\231\1\233"+
    "\2\116\2\231\6\116\1\234\1\235\17\231\16\116\5\231"+
    "\1\116\1\231\1\116\1\265\1\116\2\231\1\116\1\231"+
    "\1\232\2\231\1\233\2\116\2\231\6\116\1\234\1\235"+
    "\17\231\16\116\5\231\1\116\1\231\3\116\2\231\1\265"+
    "\1\231\1\232\2\231\1\233\2\116\2\231\6\116\1\234"+
    "\1\235\17\231\6\116\1\265\7\116\5\231\1\116\1\231"+
    "\3\116\2\231\1\116\1\231\1\232\2\231\1\233\14\231"+
    "\1\154\51\231\5\0\2\327\2\0\6\327\21\0\16\327"+
    "\5\0\1\327\1\0\3\327\2\0\1\327\5\0\2\16"+
    "\2\0\2\16\1\330\3\16\1\163\1\164\17\0\16\16"+
    "\5\0\1\16\1\0\3\16\2\0\1\16\5\0\2\16"+
    "\2\0\4\16\1\331\1\16\1\163\1\164\17\0\16\16"+
    "\5\0\1\16\1\0\3\16\2\0\1\16\5\0\2\16"+
    "\2\0\6\16\1\163\1\164\17\0\11\16\1\332\4\16"+
    "\5\0\1\16\1\0\3\16\2\0\1\16\5\0\2\16"+
    "\2\0\6\16\1\163\1\164\17\0\1\333\15\16\5\0"+
    "\1\16\1\0\3\16\2\0\1\16\5\0\2\67\2\0"+
    "\6\67\21\0\16\67\5\0\1\67\1\0\3\67\2\0"+
    "\1\67\5\0\2\67\2\0\2\67\1\334\3\67\1\221"+
    "\1\164\17\0\16\67\5\0\1\67\1\0\3\67\2\0"+
    "\1\67\5\0\2\67\2\0\4\67\1\335\1\67\1\221"+
    "\1\164\17\0\16\67\5\0\1\67\1\0\3\67\2\0"+
    "\1\67\5\0\2\72\2\0\2\72\1\336\3\72\1\163"+
    "\1\164\17\0\16\72\5\0\1\72\1\0\3\72\2\0"+
    "\1\72\5\0\2\72\2\0\4\72\1\337\1\72\1\163"+
    "\1\164\17\0\16\72\5\0\1\72\1\0\3\72\2\0"+
    "\1\72\5\0\2\75\2\0\6\75\21\0\16\75\5\0"+
    "\1\75\1\0\3\75\2\0\1\75\5\0\2\75\2\0"+
    "\2\75\1\340\3\75\1\224\1\164\17\0\16\75\5\0"+
    "\1\75\1\0\3\75\2\0\1\75\5\0\2\75\2\0"+
    "\4\75\1\341\1\75\1\224\1\164\17\0\16\75\5\0"+
    "\1\75\1\0\3\75\2\0\1\75\5\0\2\100\2\0"+
    "\2\100\1\342\3\100\1\163\1\164\17\0\16\100\5\0"+
    "\1\100\1\0\3\100\2\0\1\100\5\0\2\100\2\0"+
    "\4\100\1\343\1\100\1\163\1\164\17\0\16\100\5\0"+
    "\1\100\1\0\3\100\2\0\1\100\5\0\2\103\2\0"+
    "\2\103\1\344\3\103\1\163\1\164\17\0\16\103\5\0"+
    "\1\103\1\0\3\103\2\0\1\103\5\0\2\103\2\0"+
    "\4\103\1\345\1\103\1\163\1\164\17\0\16\103\5\0"+
    "\1\103\1\0\3\103\2\0\1\103\5\0\2\106\2\0"+
    "\2\106\1\346\3\106\1\163\1\164\17\0\16\106\5\0"+
    "\1\106\1\0\3\106\2\0\1\106\5\0\2\106\2\0"+
    "\4\106\1\347\1\106\1\163\1\164\17\0\16\106\5\0"+
    "\1\106\1\0\3\106\2\0\1\106\1\231\1\232\2\231"+
    "\1\233\2\350\2\231\6\350\21\231\16\350\5\231\1\350"+
    "\1\231\3\350\2\231\1\350\1\231\1\232\2\231\1\233"+
    "\2\116\2\231\2\116\1\351\3\116\1\234\1\235\17\231"+
    "\16\116\5\231\1\116\1\231\3\116\2\231\1\116\1\231"+
    "\1\232\2\231\1\233\2\116\2\231\4\116\1\352\1\116"+
    "\1\234\1\235\17\231\16\116\5\231\1\116\1\231\3\116"+
    "\2\231\1\116\5\0\2\327\2\0\6\327\1\163\1\164"+
    "\17\0\16\327\5\0\1\327\1\0\3\327\2\0\1\327"+
    "\5\0\2\16\2\0\3\16\1\353\2\16\1\163\1\164"+
    "\17\0\16\16\5\0\1\16\1\0\3\16\2\0\1\16"+
    "\5\0\2\16\2\0\5\16\1\354\1\163\1\164\17\0"+
    "\16\16\5\0\1\16\1\0\3\16\2\0\1\16\5\0"+
    "\2\16\2\0\6\16\1\163\1\164\17\0\7\16\1\355"+
    "\6\16\5\0\1\16\1\0\3\16\2\0\1\16\5\0"+
    "\2\16\2\0\6\16\1\163\1\164\17\0\15\16\1\356"+
    "\5\0\1\16\1\0\3\16\2\0\1\16\5\0\2\67"+
    "\2\0\3\67\1\357\2\67\1\221\1\164\17\0\16\67"+
    "\5\0\1\67\1\0\3\67\2\0\1\67\5\0\2\67"+
    "\2\0\5\67\1\360\1\221\1\164\17\0\16\67\5\0"+
    "\1\67\1\0\3\67\2\0\1\67\5\0\2\72\2\0"+
    "\3\72\1\361\2\72\1\163\1\164\17\0\16\72\5\0"+
    "\1\72\1\0\3\72\2\0\1\72\5\0\2\72\2\0"+
    "\5\72\1\362\1\163\1\164\17\0\16\72\5\0\1\72"+
    "\1\0\3\72\2\0\1\72\5\0\2\75\2\0\3\75"+
    "\1\363\2\75\1\224\1\164\17\0\16\75\5\0\1\75"+
    "\1\0\3\75\2\0\1\75\5\0\2\75\2\0\5\75"+
    "\1\364\1\224\1\164\17\0\16\75\5\0\1\75\1\0"+
    "\3\75\2\0\1\75\5\0\2\100\2\0\3\100\1\365"+
    "\2\100\1\163\1\164\17\0\16\100\5\0\1\100\1\0"+
    "\3\100\2\0\1\100\5\0\2\100\2\0\5\100\1\366"+
    "\1\163\1\164\17\0\16\100\5\0\1\100\1\0\3\100"+
    "\2\0\1\100\5\0\2\103\2\0\3\103\1\367\2\103"+
    "\1\163\1\164\17\0\16\103\5\0\1\103\1\0\3\103"+
    "\2\0\1\103\5\0\2\103\2\0\5\103\1\370\1\163"+
    "\1\164\17\0\16\103\5\0\1\103\1\0\3\103\2\0"+
    "\1\103\5\0\2\106\2\0\3\106\1\371\2\106\1\163"+
    "\1\164\17\0\16\106\5\0\1\106\1\0\3\106\2\0"+
    "\1\106\5\0\2\106\2\0\5\106\1\372\1\163\1\164"+
    "\17\0\16\106\5\0\1\106\1\0\3\106\2\0\1\106"+
    "\1\231\1\232\2\231\1\233\2\350\2\231\6\350\1\234"+
    "\1\235\17\231\16\350\5\231\1\350\1\231\3\350\2\231"+
    "\1\350\1\231\1\232\2\231\1\233\2\116\2\231\3\116"+
    "\1\373\2\116\1\234\1\235\17\231\16\116\5\231\1\116"+
    "\1\231\3\116\2\231\1\116\1\231\1\232\2\231\1\233"+
    "\2\116\2\231\5\116\1\374\1\234\1\235\17\231\16\116"+
    "\5\231\1\116\1\231\3\116\2\231\1\116\5\0\2\16"+
    "\2\0\1\375\5\16\1\163\1\164\17\0\16\16\5\0"+
    "\1\16\1\0\3\16\2\0\1\16\5\0\2\16\2\0"+
    "\4\16\1\353\1\16\1\163\1\164\17\0\16\16\5\0"+
    "\1\16\1\0\3\16\2\0\1\16\5\0\2\16\2\0"+
    "\6\16\1\163\1\164\17\0\12\16\1\376\3\16\5\0"+
    "\1\16\1\0\3\16\2\0\1\16\5\0\2\16\2\0"+
    "\6\16\1\163\1\164\17\0\13\16\1\377\2\16\5\0"+
    "\1\16\1\0\3\16\2\0\1\16\5\0\2\67\2\0"+
    "\1\u0100\5\67\1\221\1\164\17\0\16\67\5\0\1\67"+
    "\1\0\3\67\2\0\1\67\5\0\2\67\2\0\4\67"+
    "\1\357\1\67\1\221\1\164\17\0\16\67\5\0\1\67"+
    "\1\0\3\67\2\0\1\67\5\0\2\72\2\0\1\u0101"+
    "\5\72\1\163\1\164\17\0\16\72\5\0\1\72\1\0"+
    "\3\72\2\0\1\72\5\0\2\72\2\0\4\72\1\361"+
    "\1\72\1\163\1\164\17\0\16\72\5\0\1\72\1\0"+
    "\3\72\2\0\1\72\5\0\2\75\2\0\1\u0102\5\75"+
    "\1\224\1\164\17\0\16\75\5\0\1\75\1\0\3\75"+
    "\2\0\1\75\5\0\2\75\2\0\4\75\1\363\1\75"+
    "\1\224\1\164\17\0\16\75\5\0\1\75\1\0\3\75"+
    "\2\0\1\75\5\0\2\100\2\0\1\u0103\5\100\1\163"+
    "\1\164\17\0\16\100\5\0\1\100\1\0\3\100\2\0"+
    "\1\100\5\0\2\100\2\0\4\100\1\365\1\100\1\163"+
    "\1\164\17\0\16\100\5\0\1\100\1\0\3\100\2\0"+
    "\1\100\5\0\2\103\2\0\1\u0104\5\103\1\163\1\164"+
    "\17\0\16\103\5\0\1\103\1\0\3\103\2\0\1\103"+
    "\5\0\2\103\2\0\4\103\1\367\1\103\1\163\1\164"+
    "\17\0\16\103\5\0\1\103\1\0\3\103\2\0\1\103"+
    "\5\0\2\106\2\0\1\u0105\5\106\1\163\1\164\17\0"+
    "\16\106\5\0\1\106\1\0\3\106\2\0\1\106\5\0"+
    "\2\106\2\0\4\106\1\371\1\106\1\163\1\164\17\0"+
    "\16\106\5\0\1\106\1\0\3\106\2\0\1\106\1\231"+
    "\1\232\2\231\1\233\2\116\2\231\1\u0106\5\116\1\234"+
    "\1\235\17\231\16\116\5\231\1\116\1\231\3\116\2\231"+
    "\1\116\1\231\1\232\2\231\1\233\2\116\2\231\4\116"+
    "\1\373\1\116\1\234\1\235\17\231\16\116\5\231\1\116"+
    "\1\231\3\116\2\231\1\116\5\0\2\16\2\0\1\u0107"+
    "\5\16\1\163\1\164\17\0\16\16\5\0\1\16\1\0"+
    "\3\16\2\0\1\16\5\0\2\16\2\0\6\16\1\163"+
    "\1\164\17\0\2\16\1\u0108\13\16\5\0\1\16\1\0"+
    "\3\16\2\0\1\16\5\0\2\16\2\0\6\16\1\163"+
    "\1\164\17\0\2\16\1\u0109\13\16\5\0\1\16\1\0"+
    "\3\16\2\0\1\16\5\0\2\67\2\0\1\u010a\5\67"+
    "\1\221\1\164\17\0\16\67\5\0\1\67\1\0\3\67"+
    "\2\0\1\67\5\0\2\72\2\0\1\u010b\5\72\1\163"+
    "\1\164\17\0\16\72\5\0\1\72\1\0\3\72\2\0"+
    "\1\72\5\0\2\75\2\0\1\u010c\5\75\1\224\1\164"+
    "\17\0\16\75\5\0\1\75\1\0\3\75\2\0\1\75"+
    "\5\0\2\100\2\0\1\u010d\5\100\1\163\1\164\17\0"+
    "\16\100\5\0\1\100\1\0\3\100\2\0\1\100\5\0"+
    "\2\103\2\0\1\u010e\5\103\1\163\1\164\17\0\16\103"+
    "\5\0\1\103\1\0\3\103\2\0\1\103\5\0\2\106"+
    "\2\0\1\u010f\5\106\1\163\1\164\17\0\16\106\5\0"+
    "\1\106\1\0\3\106\2\0\1\106\1\231\1\232\2\231"+
    "\1\233\2\116\2\231\1\u0110\5\116\1\234\1\235\17\231"+
    "\16\116\5\231\1\116\1\231\3\116\2\231\1\116";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12449];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\11\0\1\11\1\1\1\11\16\1\7\11\16\1\1\11"+
    "\102\1\4\0\1\11\1\0\1\11\1\1\1\11\1\1"+
    "\1\11\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\13\1\1\0\2\1\1\0\4\1\1\0\2\1"+
    "\4\0\3\1\1\0\10\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\11\1\1\11\32\1\1\0\20\1"+
    "\1\0\50\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[272];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;


  public PerlLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PerlLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 150) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { return PERL_BAD_CHARACTER;
          }
        case 37: break;
        case 4: 
          { return PERL_NUMBER;
          }
        case 38: break;
        case 33: 
          { yybegin(FUNCTION_DEFINITION); return PerlFunction.getFunction(yytext().toString());
          }
        case 39: break;
        case 5: 
          { return PerlFunction.getFunction(yytext().toString());
          }
        case 40: break;
        case 6: 
          { return PERL_OPERATOR;
          }
        case 41: break;
        case 2: 
          { return TokenType.WHITE_SPACE;
          }
        case 42: break;
        case 27: 
          { return checkBuiltInHash();
          }
        case 43: break;
        case 14: 
          { return PERL_COMMA;
          }
        case 44: break;
        case 25: 
          { return checkBuiltInScalar();
          }
        case 45: break;
        case 21: 
          { return PERL_COMMENT_MULTILINE;
          }
        case 46: break;
        case 35: 
          { yybegin(PACKAGE_DEFINITION); return PerlFunction.getFunction(yytext().toString());
          }
        case 47: break;
        case 26: 
          { return checkBuiltInArray();
          }
        case 48: break;
        case 31: 
          { yybegin(PACKAGE_INSTANCE_CALL);
    yypushback(2);
    return PERL_PACKAGE;
          }
        case 49: break;
        case 30: 
          { yybegin(PACKAGE_STATIC_CALL);
    yypushback(2);
    return PERL_PACKAGE;
          }
        case 50: break;
        case 32: 
          { yybegin(PACKAGE_USE);return PerlFunction.getFunction(yytext().toString());
          }
        case 51: break;
        case 23: 
          { return PERL_DEPACKAGE;
          }
        case 52: break;
        case 7: 
          { return PERL_COMMENT;
          }
        case 53: break;
        case 22: 
          { return PERL_DQ_STRING;
          }
        case 54: break;
        case 34: 
          { yybegin(LEX_EOF);return PERL_COMMENT_MULTILINE;
          }
        case 55: break;
        case 16: 
          { yybegin(YYINITIAL);return PERL_USER_FUNCTION;
          }
        case 56: break;
        case 28: 
          { return checkBuiltInGlob();
          }
        case 57: break;
        case 18: 
          { return PERL_SQ_STRING;
          }
        case 58: break;
        case 12: 
          { return PERL_LPAREN;
          }
        case 59: break;
        case 19: 
          { return PERL_STATIC_METHOD_CALL;
          }
        case 60: break;
        case 29: 
          { yybegin(PACKAGE_USE); return PerlFunction.getFunction(yytext().toString());
          }
        case 61: break;
        case 13: 
          { return PERL_RPAREN;
          }
        case 62: break;
        case 36: 
          { yybegin(LEX_REQUIRE);return PerlFunction.getFunction(yytext().toString());
          }
        case 63: break;
        case 24: 
          { yybegin(LEX_DEREFERENCE);return PERL_DEREFERENCE;
          }
        case 64: break;
        case 3: 
          { yybegin(YYINITIAL);return PERL_SEMI;
          }
        case 65: break;
        case 20: 
          { return PERL_INSTANCE_METHOD_CALL;
          }
        case 66: break;
        case 15: 
          { return PERL_PACKAGE;
          }
        case 67: break;
        case 8: 
          { return PERL_LBRACE;
          }
        case 68: break;
        case 9: 
          { return PERL_RBRACE;
          }
        case 69: break;
        case 17: 
          { yybegin(PACKAGE_USE_PARAMS);
        return checkCorePackage();
          }
        case 70: break;
        case 11: 
          { return PERL_RBRACK;
          }
        case 71: break;
        case 10: 
          { return PERL_LBRACK;
          }
        case 72: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
