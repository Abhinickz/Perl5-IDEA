/* The following code was generated by JFlex 1.4.3 on 19.04.15 19:41 */

package com.perl5.lang.lexer;

/*
    http://jflex.de/manual.html
    http://www2.cs.tum.edu/projects/cup

*/

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import org.jetbrains.annotations.NotNull;
import com.perl5.lang.lexer.elements.PerlFunction;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 19.04.15 19:41 from the specification file
 * <tt>C:/Repository/Perl5-IDEA/src/com/perl5/lang/lexer/Perl.flex</tt>
 */
public class PerlLexer extends PerlLexerProto implements FlexLexer, PerlTokenTypes {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int FUNCTION_DEFINITION = 4;
  public static final int PACKAGE_INSTANCE_CALL = 12;
  public static final int PACKAGE_USE = 6;
  public static final int LEX_DEREFERENCE = 16;
  public static final int LEX_EOF = 14;
  public static final int PACKAGE_STATIC_CALL = 10;
  public static final int YYINITIAL = 0;
  public static final int PACKAGE_USE_PARAMS = 8;
  public static final int PACKAGE_DEFINITION = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8, 8
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\4\1\0\1\2\1\1\22\0\1\2\1\54\1\7"+
    "\1\27\1\22\1\24\1\66\1\10\1\34\1\35\1\25\1\53\1\36"+
    "\1\20\1\26\1\57\12\5\1\17\1\3\1\61\1\37\1\21\1\56"+
    "\1\23\1\15\2\6\1\14\1\12\10\6\1\13\5\6\1\16\6\6"+
    "\1\32\1\56\1\33\1\56\1\11\1\0\1\47\1\45\1\50\1\70"+
    "\1\42\1\6\1\52\3\6\1\51\1\62\1\65\1\43\1\44\1\46"+
    "\1\64\1\71\1\41\1\63\1\40\2\6\1\60\2\6\1\30\1\67"+
    "\1\31\1\55\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\2\1\1\4"+
    "\3\6\2\1\2\6\1\1\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\6\11\5\11\6\1\4"+
    "\1\17\2\4\1\20\2\4\1\21\2\4\1\22\2\4"+
    "\1\23\2\4\1\24\1\4\1\1\1\25\1\2\1\3"+
    "\1\25\1\4\1\5\2\1\1\4\3\6\2\1\2\6"+
    "\1\1\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\6\6\5\11\6\1\5\4\0\1\26\1\0"+
    "\1\22\1\4\1\27\1\4\1\30\1\31\1\0\1\32"+
    "\1\0\1\33\1\0\1\34\1\0\1\6\1\7\2\5"+
    "\1\6\1\35\3\5\1\6\1\0\2\4\1\0\4\4"+
    "\1\0\2\25\4\0\2\25\1\26\1\0\2\25\1\22"+
    "\1\4\1\27\1\4\1\30\1\31\1\0\1\32\1\0"+
    "\1\33\1\0\1\34\1\0\1\6\1\25\1\6\3\5"+
    "\1\6\1\5\1\36\1\37\1\4\2\5\1\40\1\41"+
    "\1\5\1\36\2\17\2\20\1\36\2\21\2\22\2\23"+
    "\2\24\1\36\1\37\1\4\2\5\1\0\3\5\2\17"+
    "\2\20\2\21\2\22\2\23\2\24\1\0\5\5\2\17"+
    "\2\20\2\21\2\22\2\23\2\24\4\5\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\5\1\42\1\43\7\42";

  private static int [] zzUnpackAction() {
    int [] result = new int[265];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0196"+
    "\0\u01d0\0\u020a\0\u0244\0\u020a\0\u027e\0\u02b8\0\u02f2\0\u032c"+
    "\0\u0366\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2\0\u04fc"+
    "\0\u0536\0\u0570\0\u020a\0\u020a\0\u020a\0\u020a\0\u020a\0\u020a"+
    "\0\u020a\0\u05aa\0\u05e4\0\u061e\0\u0658\0\u0692\0\u06cc\0\u0706"+
    "\0\u0740\0\u077a\0\u07b4\0\u07ee\0\u0828\0\u0862\0\u020a\0\u089c"+
    "\0\u08d6\0\u0910\0\u094a\0\u0984\0\u09be\0\u09f8\0\u0a32\0\u0a6c"+
    "\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8\0\u0c02\0\u0c3c"+
    "\0\u0c76\0\u0cb0\0\u0cea\0\u0d24\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c"+
    "\0\u0e0c\0\u0dd2\0\u0e46\0\u0e80\0\u0eba\0\u0ef4\0\u0f2e\0\u0f68"+
    "\0\u0fa2\0\u0fdc\0\u1016\0\u1050\0\u108a\0\u10c4\0\u10fe\0\u1138"+
    "\0\u1172\0\u0dd2\0\u0dd2\0\u0dd2\0\u0dd2\0\u0dd2\0\u0dd2\0\u0dd2"+
    "\0\u11ac\0\u11e6\0\u1220\0\u125a\0\u1294\0\u12ce\0\u1308\0\u1342"+
    "\0\u137c\0\u13b6\0\u0dd2\0\u13f0\0\u142a\0\u1464\0\u149e\0\u14d8"+
    "\0\u1512\0\u154c\0\u1586\0\u15c0\0\u02f2\0\u020a\0\u032c\0\u020a"+
    "\0\u15fa\0\u020a\0\u1634\0\u020a\0\u166e\0\u044e\0\u16a8\0\u0488"+
    "\0\u16e2\0\u04c2\0\u171c\0\u1756\0\u1790\0\u17ca\0\u1804\0\u183e"+
    "\0\u02b8\0\u1878\0\u18b2\0\u18ec\0\u1926\0\u1960\0\u199a\0\u19d4"+
    "\0\u1a0e\0\u1a48\0\u1a82\0\u1abc\0\u1af6\0\u1b30\0\u0dd2\0\u0dd2"+
    "\0\u1b6a\0\u1ba4\0\u1bde\0\u1c18\0\u0ef4\0\u0ef4\0\u1c52\0\u0dd2"+
    "\0\u0f2e\0\u0f2e\0\u1c8c\0\u0dd2\0\u1cc6\0\u0dd2\0\u1d00\0\u0dd2"+
    "\0\u1d3a\0\u1050\0\u1d74\0\u108a\0\u1dae\0\u10c4\0\u1de8\0\u1e22"+
    "\0\u1e5c\0\u1172\0\u0eba\0\u1e96\0\u1ed0\0\u1f0a\0\u1f44\0\u1878"+
    "\0\u1f7e\0\u020a\0\u15c0\0\u1fb8\0\u1ff2\0\u02b8\0\u02b8\0\u202c"+
    "\0\u2066\0\u20a0\0\u20da\0\u2114\0\u214e\0\u2188\0\u21c2\0\u21fc"+
    "\0\u2236\0\u2270\0\u22aa\0\u22e4\0\u231e\0\u2358\0\u2392\0\u0dd2"+
    "\0\u1c18\0\u23cc\0\u2406\0\u2440\0\u247a\0\u24b4\0\u24ee\0\u2528"+
    "\0\u2562\0\u259c\0\u25d6\0\u2610\0\u264a\0\u2684\0\u26be\0\u26f8"+
    "\0\u2732\0\u276c\0\u27a6\0\u27e0\0\u281a\0\u2854\0\u288e\0\u28c8"+
    "\0\u2902\0\u293c\0\u2976\0\u29b0\0\u29ea\0\u2a24\0\u2a5e\0\u2a98"+
    "\0\u2ad2\0\u2b0c\0\u2b46\0\u2b80\0\u2bba\0\u2bf4\0\u2c2e\0\u2c68"+
    "\0\u2ca2\0\u2cdc\0\u2d16\0\u2d50\0\u2d8a\0\u2dc4\0\u2dfe\0\u2e38"+
    "\0\u02b8\0\u02b8\0\u09f8\0\u0aa6\0\u0b54\0\u0c02\0\u0cb0\0\u0d5e"+
    "\0\u0eba";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[265];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\12\2\13\1\14\1\13\1\15\1\16\1\17\1\20"+
    "\1\21\5\16\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\16\1\50\1\51\1\52\1\16\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\53\3\16\1\63"+
    "\1\64\2\16\1\12\2\13\1\14\1\13\1\65\1\66"+
    "\1\17\1\20\1\67\5\66\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\13\66\1\54\1\55"+
    "\1\56\1\57\1\60\1\66\1\62\4\66\1\63\1\64"+
    "\2\66\1\12\2\13\1\14\1\13\1\70\1\71\1\17"+
    "\1\20\1\72\5\71\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\13\71\1\54\1\55\1\56"+
    "\1\57\1\60\1\71\1\62\4\71\1\63\1\64\2\71"+
    "\1\12\2\13\1\14\1\13\1\73\1\74\1\17\1\20"+
    "\1\75\5\74\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\13\74\1\54\1\55\1\56\1\57"+
    "\1\60\1\74\1\62\4\74\1\63\1\64\2\74\1\12"+
    "\2\13\1\14\1\13\1\76\1\77\1\17\1\20\1\100"+
    "\5\77\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\13\77\1\54\1\55\1\56\1\57\1\60"+
    "\1\77\1\62\4\77\1\63\1\64\2\77\1\12\2\13"+
    "\1\14\1\13\1\101\1\102\1\17\1\20\1\103\5\102"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\13\102\1\54\1\55\1\56\1\57\1\60\1\102"+
    "\1\62\4\102\1\63\1\64\2\102\1\12\2\13\1\14"+
    "\1\13\1\104\1\105\1\17\1\20\1\106\5\105\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\13\105\1\54\1\55\1\56\1\57\1\60\1\105\1\62"+
    "\4\105\1\63\1\64\2\105\1\107\1\110\1\111\1\112"+
    "\1\113\1\114\1\115\1\116\1\117\1\120\5\115\1\121"+
    "\1\122\1\123\1\124\1\125\1\126\1\127\1\130\1\131"+
    "\1\132\1\133\1\134\1\135\1\136\1\137\1\140\1\141"+
    "\2\115\1\142\1\143\1\144\2\115\1\145\1\146\1\115"+
    "\1\147\1\150\1\151\1\152\1\153\1\154\1\155\1\156"+
    "\1\147\3\115\1\157\1\160\2\115\1\12\2\13\1\14"+
    "\1\13\1\15\1\16\1\17\1\20\1\21\5\16\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\2\16\1\45\1\161\1\47\2\16\1\51\1\52\1\16"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\53\3\16\1\63\1\64\2\16\73\0\2\13\1\0"+
    "\1\13\72\0\1\15\1\16\2\0\1\15\5\16\1\162"+
    "\1\163\5\0\1\164\11\0\13\16\5\0\1\16\1\0"+
    "\4\16\2\0\2\16\5\0\2\16\2\0\6\16\1\162"+
    "\1\163\17\0\13\16\5\0\1\16\1\0\4\16\2\0"+
    "\2\16\7\165\1\166\62\165\10\167\1\170\61\167\5\0"+
    "\1\15\1\16\2\0\1\171\5\16\1\162\1\163\5\0"+
    "\1\164\11\0\13\16\5\0\1\16\1\0\4\16\2\0"+
    "\2\16\17\0\1\172\57\0\1\173\3\0\1\173\6\0"+
    "\1\57\1\174\15\0\1\57\53\0\1\57\15\0\1\57"+
    "\37\0\2\175\2\0\6\175\3\0\1\176\15\0\13\175"+
    "\5\0\1\175\1\0\4\175\2\0\2\175\5\0\2\177"+
    "\2\0\6\177\3\0\1\200\15\0\13\177\5\0\1\177"+
    "\1\0\4\177\2\0\2\177\5\0\2\201\2\0\6\201"+
    "\3\0\1\202\15\0\13\201\5\0\1\201\1\0\4\201"+
    "\2\0\2\201\5\0\2\203\2\0\6\203\3\0\1\204"+
    "\2\0\1\57\11\0\1\57\13\203\5\0\1\203\1\0"+
    "\4\203\2\0\2\203\26\0\1\205\43\0\4\32\1\206"+
    "\65\32\21\0\1\41\15\0\1\57\15\0\1\57\21\0"+
    "\2\16\2\0\6\16\1\162\1\163\17\0\1\16\1\207"+
    "\11\16\5\0\1\16\1\0\4\16\2\0\2\16\5\0"+
    "\2\16\2\0\6\16\1\162\1\163\17\0\1\210\12\16"+
    "\5\0\1\16\1\0\4\16\2\0\2\16\5\0\2\16"+
    "\2\0\6\16\1\162\1\163\17\0\13\16\5\0\1\16"+
    "\1\0\2\16\1\211\1\16\2\0\2\16\5\0\2\16"+
    "\2\0\6\16\1\162\1\163\17\0\2\16\1\211\1\16"+
    "\1\212\6\16\5\0\1\16\1\0\4\16\2\0\2\16"+
    "\5\0\2\16\2\0\6\16\1\162\1\163\17\0\13\16"+
    "\5\0\1\16\1\0\4\16\2\0\1\16\1\211\5\0"+
    "\2\16\2\0\6\16\1\162\1\163\17\0\7\16\1\213"+
    "\3\16\5\0\1\16\1\0\4\16\2\0\2\16\5\0"+
    "\2\16\2\0\6\16\1\162\1\163\17\0\3\16\1\214"+
    "\7\16\5\0\1\16\1\0\4\16\2\0\2\16\5\0"+
    "\2\16\2\0\6\16\1\162\1\163\17\0\13\16\5\0"+
    "\1\16\1\0\3\16\1\215\2\0\2\16\5\0\2\16"+
    "\2\0\6\16\1\162\1\163\17\0\2\16\1\211\10\16"+
    "\5\0\1\16\1\0\1\16\1\211\2\16\2\0\2\16"+
    "\37\0\1\57\13\0\1\57\55\0\1\57\15\0\1\57"+
    "\71\0\1\57\73\0\1\57\17\0\2\16\2\0\6\16"+
    "\1\162\1\163\17\0\4\16\1\47\6\16\5\0\1\16"+
    "\1\0\4\16\2\0\2\16\37\0\1\216\21\0\1\57"+
    "\76\0\1\57\72\0\1\57\7\0\1\65\1\66\2\0"+
    "\1\65\5\66\1\217\1\163\5\0\1\164\11\0\13\66"+
    "\5\0\1\66\1\0\4\66\2\0\2\66\5\0\2\66"+
    "\2\0\6\66\1\217\1\163\17\0\13\66\5\0\1\66"+
    "\1\0\4\66\2\0\2\66\5\0\1\65\1\66\2\0"+
    "\1\220\5\66\1\217\1\163\5\0\1\164\11\0\13\66"+
    "\5\0\1\66\1\0\4\66\2\0\2\66\5\0\1\70"+
    "\1\71\2\0\1\70\5\71\1\162\1\163\5\0\1\164"+
    "\11\0\13\71\5\0\1\71\1\0\4\71\2\0\2\71"+
    "\5\0\2\71\2\0\6\71\1\162\1\163\17\0\13\71"+
    "\5\0\1\71\1\0\4\71\2\0\2\71\5\0\1\70"+
    "\1\71\2\0\1\221\5\71\1\162\1\163\5\0\1\164"+
    "\11\0\13\71\5\0\1\71\1\0\4\71\2\0\2\71"+
    "\5\0\1\73\1\74\2\0\1\73\5\74\1\222\1\163"+
    "\5\0\1\164\11\0\13\74\5\0\1\74\1\0\4\74"+
    "\2\0\2\74\5\0\2\74\2\0\6\74\1\222\1\163"+
    "\17\0\13\74\5\0\1\74\1\0\4\74\2\0\2\74"+
    "\5\0\1\73\1\74\2\0\1\223\5\74\1\222\1\163"+
    "\5\0\1\164\11\0\13\74\5\0\1\74\1\0\4\74"+
    "\2\0\2\74\5\0\1\76\1\77\2\0\1\76\5\77"+
    "\1\162\1\163\5\0\1\164\11\0\13\77\5\0\1\77"+
    "\1\0\4\77\2\0\2\77\5\0\2\77\2\0\6\77"+
    "\1\162\1\163\17\0\13\77\5\0\1\77\1\0\4\77"+
    "\2\0\2\77\5\0\1\76\1\77\2\0\1\224\5\77"+
    "\1\162\1\163\5\0\1\164\11\0\13\77\5\0\1\77"+
    "\1\0\4\77\2\0\2\77\5\0\1\101\1\102\2\0"+
    "\1\101\5\102\1\162\1\163\5\0\1\164\11\0\13\102"+
    "\5\0\1\102\1\0\4\102\2\0\2\102\5\0\2\102"+
    "\2\0\6\102\1\162\1\163\17\0\13\102\5\0\1\102"+
    "\1\0\4\102\2\0\2\102\5\0\1\101\1\102\2\0"+
    "\1\225\5\102\1\162\1\163\5\0\1\164\11\0\13\102"+
    "\5\0\1\102\1\0\4\102\2\0\2\102\5\0\1\104"+
    "\1\105\2\0\1\104\5\105\1\162\1\163\5\0\1\164"+
    "\11\0\13\105\5\0\1\105\1\0\4\105\2\0\2\105"+
    "\5\0\2\105\2\0\6\105\1\162\1\163\17\0\13\105"+
    "\5\0\1\105\1\0\4\105\2\0\2\105\5\0\1\104"+
    "\1\105\2\0\1\226\5\105\1\162\1\163\5\0\1\164"+
    "\11\0\13\105\5\0\1\105\1\0\4\105\2\0\2\105"+
    "\1\227\1\230\2\227\1\231\66\227\1\110\1\111\1\227"+
    "\1\113\65\227\1\0\1\113\1\13\1\0\1\113\65\0"+
    "\1\227\1\230\2\227\1\231\1\114\1\115\2\227\1\114"+
    "\5\115\1\232\1\233\5\227\1\234\11\227\13\115\5\227"+
    "\1\115\1\227\4\115\2\227\2\115\1\227\1\230\2\227"+
    "\1\231\2\115\2\227\6\115\1\232\1\233\17\227\13\115"+
    "\5\227\1\115\1\227\4\115\2\227\2\115\1\235\1\236"+
    "\2\235\1\237\2\235\1\240\62\235\1\241\1\242\2\241"+
    "\1\243\3\241\1\244\61\241\1\227\1\230\2\227\1\231"+
    "\1\114\1\115\2\227\1\245\5\115\1\232\1\233\5\227"+
    "\1\234\11\227\13\115\5\227\1\115\1\227\4\115\2\227"+
    "\2\115\1\227\1\230\2\227\1\231\12\227\1\246\53\227"+
    "\1\230\2\227\1\231\1\247\3\227\1\247\6\227\1\153"+
    "\1\250\15\227\1\153\33\227\1\230\2\227\1\231\14\227"+
    "\1\153\15\227\1\153\33\227\1\230\2\227\1\231\2\251"+
    "\2\227\6\251\3\227\1\252\15\227\13\251\5\227\1\251"+
    "\1\227\4\251\2\227\2\251\1\227\1\230\2\227\1\231"+
    "\2\253\2\227\6\253\3\227\1\254\15\227\13\253\5\227"+
    "\1\253\1\227\4\253\2\227\2\253\1\227\1\230\2\227"+
    "\1\231\2\255\2\227\6\255\3\227\1\256\15\227\13\255"+
    "\5\227\1\255\1\227\4\255\2\227\2\255\1\227\1\230"+
    "\2\227\1\231\2\257\2\227\6\257\3\227\1\260\2\227"+
    "\1\153\11\227\1\153\13\257\5\227\1\257\1\227\4\257"+
    "\2\227\2\257\1\227\1\230\2\227\1\231\21\227\1\261"+
    "\43\227\1\131\1\262\2\131\1\231\65\131\1\227\1\230"+
    "\2\227\1\231\14\227\1\140\15\227\1\153\15\227\1\153"+
    "\15\227\1\230\2\227\1\231\2\115\2\227\6\115\1\232"+
    "\1\233\17\227\13\115\5\227\1\115\1\227\2\115\1\263"+
    "\1\115\2\227\2\115\1\227\1\230\2\227\1\231\2\115"+
    "\2\227\6\115\1\232\1\233\17\227\2\115\1\263\1\115"+
    "\1\264\6\115\5\227\1\115\1\227\4\115\2\227\2\115"+
    "\1\227\1\230\2\227\1\231\2\115\2\227\6\115\1\232"+
    "\1\233\17\227\13\115\5\227\1\115\1\227\4\115\2\227"+
    "\1\115\1\263\1\227\1\230\2\227\1\231\2\115\2\227"+
    "\6\115\1\232\1\233\17\227\3\115\1\265\7\115\5\227"+
    "\1\115\1\227\4\115\2\227\2\115\1\227\1\230\2\227"+
    "\1\231\2\115\2\227\6\115\1\232\1\233\17\227\13\115"+
    "\5\227\1\115\1\227\3\115\1\266\2\227\2\115\1\227"+
    "\1\230\2\227\1\231\2\115\2\227\6\115\1\232\1\233"+
    "\17\227\2\115\1\263\10\115\5\227\1\115\1\227\1\115"+
    "\1\263\2\115\2\227\2\115\1\227\1\230\2\227\1\231"+
    "\32\227\1\153\13\227\1\153\17\227\1\230\2\227\1\231"+
    "\32\227\1\153\15\227\1\153\15\227\1\230\2\227\1\231"+
    "\50\227\1\153\15\227\1\230\2\227\1\231\52\227\1\153"+
    "\13\227\1\230\2\227\1\231\2\115\2\227\6\115\1\232"+
    "\1\233\17\227\4\115\1\144\6\115\5\227\1\115\1\227"+
    "\4\115\2\227\2\115\1\227\1\230\2\227\1\231\32\227"+
    "\1\267\21\227\1\153\11\227\1\230\2\227\1\231\61\227"+
    "\1\153\4\227\1\230\2\227\1\231\62\227\1\153\2\227"+
    "\5\0\2\16\2\0\6\16\1\162\1\163\17\0\2\16"+
    "\1\211\1\16\1\270\6\16\5\0\1\16\1\0\4\16"+
    "\2\0\2\16\17\0\1\271\73\0\1\272\55\0\1\273"+
    "\3\0\1\273\65\0\1\15\1\16\2\0\1\15\1\274"+
    "\1\16\1\275\2\16\1\162\1\163\5\0\1\164\11\0"+
    "\13\16\5\0\1\16\1\0\4\16\2\0\2\16\5\0"+
    "\1\173\3\0\1\173\14\0\1\164\50\0\2\175\2\0"+
    "\6\175\21\0\13\175\5\0\1\175\1\0\4\175\2\0"+
    "\2\175\5\0\2\177\2\0\6\177\21\0\13\177\5\0"+
    "\1\177\1\0\4\177\2\0\2\177\5\0\2\201\2\0"+
    "\6\201\21\0\13\201\5\0\1\201\1\0\4\201\2\0"+
    "\2\201\5\0\2\203\2\0\6\203\21\0\13\203\5\0"+
    "\1\203\1\0\4\203\2\0\2\203\5\0\2\203\2\0"+
    "\6\203\3\0\1\204\15\0\13\203\5\0\1\203\1\0"+
    "\4\203\2\0\2\203\26\0\1\57\44\0\1\206\2\0"+
    "\1\206\72\0\2\16\2\0\6\16\1\162\1\163\17\0"+
    "\2\16\1\276\10\16\5\0\1\16\1\0\4\16\2\0"+
    "\2\16\5\0\2\16\2\0\6\16\1\162\1\163\17\0"+
    "\5\16\1\277\5\16\5\0\1\16\1\0\4\16\2\0"+
    "\2\16\5\0\2\16\2\0\6\16\1\162\1\163\17\0"+
    "\13\16\5\0\1\16\1\0\1\16\1\211\2\16\2\0"+
    "\2\16\5\0\2\16\2\0\6\16\1\162\1\163\17\0"+
    "\10\16\1\300\2\16\5\0\1\16\1\0\4\16\2\0"+
    "\2\16\5\0\2\16\2\0\6\16\1\162\1\163\17\0"+
    "\13\16\5\0\1\16\1\0\4\16\2\0\1\211\1\16"+
    "\5\0\2\16\2\0\6\16\1\162\1\163\17\0\6\16"+
    "\1\211\4\16\5\0\1\16\1\0\4\16\2\0\2\16"+
    "\21\0\1\57\67\0\1\301\57\0\1\65\1\66\2\0"+
    "\1\65\1\302\1\66\1\303\2\66\1\217\1\163\5\0"+
    "\1\164\11\0\13\66\5\0\1\66\1\0\4\66\2\0"+
    "\2\66\5\0\1\70\1\71\2\0\1\70\1\304\1\71"+
    "\1\305\2\71\1\162\1\163\5\0\1\164\11\0\13\71"+
    "\5\0\1\71\1\0\4\71\2\0\2\71\17\0\1\306"+
    "\57\0\1\73\1\74\2\0\1\73\1\307\1\74\1\310"+
    "\2\74\1\222\1\163\5\0\1\164\11\0\13\74\5\0"+
    "\1\74\1\0\4\74\2\0\2\74\5\0\1\76\1\77"+
    "\2\0\1\76\1\311\1\77\1\312\2\77\1\162\1\163"+
    "\5\0\1\164\11\0\13\77\5\0\1\77\1\0\4\77"+
    "\2\0\2\77\5\0\1\101\1\102\2\0\1\101\1\313"+
    "\1\102\1\314\2\102\1\162\1\163\5\0\1\164\11\0"+
    "\13\102\5\0\1\102\1\0\4\102\2\0\2\102\5\0"+
    "\1\104\1\105\2\0\1\104\1\315\1\105\1\316\2\105"+
    "\1\162\1\163\5\0\1\164\11\0\13\105\5\0\1\105"+
    "\1\0\4\105\2\0\2\105\1\0\1\231\2\0\1\231"+
    "\65\0\1\227\1\230\2\227\1\231\12\227\1\317\53\227"+
    "\1\230\2\227\1\231\14\227\1\320\51\227\1\230\2\227"+
    "\1\231\1\321\3\227\1\321\60\227\1\165\1\237\2\165"+
    "\1\237\2\165\1\166\62\165\1\167\1\243\2\167\1\243"+
    "\3\167\1\170\61\167\1\227\1\230\2\227\1\231\1\114"+
    "\1\115\2\227\1\114\1\322\1\115\1\323\2\115\1\232"+
    "\1\233\5\227\1\234\11\227\13\115\5\227\1\115\1\227"+
    "\4\115\2\227\2\115\1\227\1\230\2\227\1\231\1\247"+
    "\3\227\1\247\14\227\1\234\44\227\1\230\2\227\1\231"+
    "\2\251\2\227\6\251\21\227\13\251\5\227\1\251\1\227"+
    "\4\251\2\227\2\251\1\227\1\230\2\227\1\231\2\253"+
    "\2\227\6\253\21\227\13\253\5\227\1\253\1\227\4\253"+
    "\2\227\2\253\1\227\1\230\2\227\1\231\2\255\2\227"+
    "\6\255\21\227\13\255\5\227\1\255\1\227\4\255\2\227"+
    "\2\255\1\227\1\230\2\227\1\231\2\257\2\227\6\257"+
    "\21\227\13\257\5\227\1\257\1\227\4\257\2\227\2\257"+
    "\1\227\1\230\2\227\1\231\2\257\2\227\6\257\3\227"+
    "\1\260\15\227\13\257\5\227\1\257\1\227\4\257\2\227"+
    "\2\257\1\227\1\230\2\227\1\231\21\227\1\153\44\227"+
    "\1\230\2\227\1\231\2\115\2\227\6\115\1\232\1\233"+
    "\17\227\13\115\5\227\1\115\1\227\1\115\1\263\2\115"+
    "\2\227\2\115\1\227\1\230\2\227\1\231\2\115\2\227"+
    "\6\115\1\232\1\233\17\227\13\115\5\227\1\115\1\227"+
    "\4\115\2\227\1\263\1\115\1\227\1\230\2\227\1\231"+
    "\2\115\2\227\6\115\1\232\1\233\17\227\6\115\1\263"+
    "\4\115\5\227\1\115\1\227\4\115\2\227\2\115\1\227"+
    "\1\230\2\227\1\231\14\227\1\153\50\227\5\0\2\324"+
    "\2\0\6\324\21\0\13\324\5\0\1\324\1\0\4\324"+
    "\2\0\2\324\5\0\2\16\2\0\2\16\1\325\3\16"+
    "\1\162\1\163\17\0\13\16\5\0\1\16\1\0\4\16"+
    "\2\0\2\16\5\0\2\16\2\0\4\16\1\326\1\16"+
    "\1\162\1\163\17\0\13\16\5\0\1\16\1\0\4\16"+
    "\2\0\2\16\5\0\2\16\2\0\6\16\1\162\1\163"+
    "\17\0\11\16\1\327\1\16\5\0\1\16\1\0\4\16"+
    "\2\0\2\16\5\0\2\66\2\0\6\66\21\0\13\66"+
    "\5\0\1\66\1\0\4\66\2\0\2\66\5\0\2\66"+
    "\2\0\2\66\1\330\3\66\1\217\1\163\17\0\13\66"+
    "\5\0\1\66\1\0\4\66\2\0\2\66\5\0\2\66"+
    "\2\0\4\66\1\331\1\66\1\217\1\163\17\0\13\66"+
    "\5\0\1\66\1\0\4\66\2\0\2\66\5\0\2\71"+
    "\2\0\2\71\1\332\3\71\1\162\1\163\17\0\13\71"+
    "\5\0\1\71\1\0\4\71\2\0\2\71\5\0\2\71"+
    "\2\0\4\71\1\333\1\71\1\162\1\163\17\0\13\71"+
    "\5\0\1\71\1\0\4\71\2\0\2\71\5\0\2\74"+
    "\2\0\6\74\21\0\13\74\5\0\1\74\1\0\4\74"+
    "\2\0\2\74\5\0\2\74\2\0\2\74\1\334\3\74"+
    "\1\222\1\163\17\0\13\74\5\0\1\74\1\0\4\74"+
    "\2\0\2\74\5\0\2\74\2\0\4\74\1\335\1\74"+
    "\1\222\1\163\17\0\13\74\5\0\1\74\1\0\4\74"+
    "\2\0\2\74\5\0\2\77\2\0\2\77\1\336\3\77"+
    "\1\162\1\163\17\0\13\77\5\0\1\77\1\0\4\77"+
    "\2\0\2\77\5\0\2\77\2\0\4\77\1\337\1\77"+
    "\1\162\1\163\17\0\13\77\5\0\1\77\1\0\4\77"+
    "\2\0\2\77\5\0\2\102\2\0\2\102\1\340\3\102"+
    "\1\162\1\163\17\0\13\102\5\0\1\102\1\0\4\102"+
    "\2\0\2\102\5\0\2\102\2\0\4\102\1\341\1\102"+
    "\1\162\1\163\17\0\13\102\5\0\1\102\1\0\4\102"+
    "\2\0\2\102\5\0\2\105\2\0\2\105\1\342\3\105"+
    "\1\162\1\163\17\0\13\105\5\0\1\105\1\0\4\105"+
    "\2\0\2\105\5\0\2\105\2\0\4\105\1\343\1\105"+
    "\1\162\1\163\17\0\13\105\5\0\1\105\1\0\4\105"+
    "\2\0\2\105\1\227\1\230\2\227\1\231\2\344\2\227"+
    "\6\344\21\227\13\344\5\227\1\344\1\227\4\344\2\227"+
    "\2\344\1\227\1\230\2\227\1\231\2\115\2\227\2\115"+
    "\1\345\3\115\1\232\1\233\17\227\13\115\5\227\1\115"+
    "\1\227\4\115\2\227\2\115\1\227\1\230\2\227\1\231"+
    "\2\115\2\227\4\115\1\346\1\115\1\232\1\233\17\227"+
    "\13\115\5\227\1\115\1\227\4\115\2\227\2\115\5\0"+
    "\2\324\2\0\6\324\1\162\1\163\17\0\13\324\5\0"+
    "\1\324\1\0\4\324\2\0\2\324\5\0\2\16\2\0"+
    "\3\16\1\347\2\16\1\162\1\163\17\0\13\16\5\0"+
    "\1\16\1\0\4\16\2\0\2\16\5\0\2\16\2\0"+
    "\5\16\1\350\1\162\1\163\17\0\13\16\5\0\1\16"+
    "\1\0\4\16\2\0\2\16\5\0\2\16\2\0\6\16"+
    "\1\162\1\163\17\0\7\16\1\351\3\16\5\0\1\16"+
    "\1\0\4\16\2\0\2\16\5\0\2\66\2\0\3\66"+
    "\1\352\2\66\1\217\1\163\17\0\13\66\5\0\1\66"+
    "\1\0\4\66\2\0\2\66\5\0\2\66\2\0\5\66"+
    "\1\353\1\217\1\163\17\0\13\66\5\0\1\66\1\0"+
    "\4\66\2\0\2\66\5\0\2\71\2\0\3\71\1\354"+
    "\2\71\1\162\1\163\17\0\13\71\5\0\1\71\1\0"+
    "\4\71\2\0\2\71\5\0\2\71\2\0\5\71\1\355"+
    "\1\162\1\163\17\0\13\71\5\0\1\71\1\0\4\71"+
    "\2\0\2\71\5\0\2\74\2\0\3\74\1\356\2\74"+
    "\1\222\1\163\17\0\13\74\5\0\1\74\1\0\4\74"+
    "\2\0\2\74\5\0\2\74\2\0\5\74\1\357\1\222"+
    "\1\163\17\0\13\74\5\0\1\74\1\0\4\74\2\0"+
    "\2\74\5\0\2\77\2\0\3\77\1\360\2\77\1\162"+
    "\1\163\17\0\13\77\5\0\1\77\1\0\4\77\2\0"+
    "\2\77\5\0\2\77\2\0\5\77\1\361\1\162\1\163"+
    "\17\0\13\77\5\0\1\77\1\0\4\77\2\0\2\77"+
    "\5\0\2\102\2\0\3\102\1\362\2\102\1\162\1\163"+
    "\17\0\13\102\5\0\1\102\1\0\4\102\2\0\2\102"+
    "\5\0\2\102\2\0\5\102\1\363\1\162\1\163\17\0"+
    "\13\102\5\0\1\102\1\0\4\102\2\0\2\102\5\0"+
    "\2\105\2\0\3\105\1\364\2\105\1\162\1\163\17\0"+
    "\13\105\5\0\1\105\1\0\4\105\2\0\2\105\5\0"+
    "\2\105\2\0\5\105\1\365\1\162\1\163\17\0\13\105"+
    "\5\0\1\105\1\0\4\105\2\0\2\105\1\227\1\230"+
    "\2\227\1\231\2\344\2\227\6\344\1\232\1\233\17\227"+
    "\13\344\5\227\1\344\1\227\4\344\2\227\2\344\1\227"+
    "\1\230\2\227\1\231\2\115\2\227\3\115\1\366\2\115"+
    "\1\232\1\233\17\227\13\115\5\227\1\115\1\227\4\115"+
    "\2\227\2\115\1\227\1\230\2\227\1\231\2\115\2\227"+
    "\5\115\1\367\1\232\1\233\17\227\13\115\5\227\1\115"+
    "\1\227\4\115\2\227\2\115\5\0\2\16\2\0\1\370"+
    "\5\16\1\162\1\163\17\0\13\16\5\0\1\16\1\0"+
    "\4\16\2\0\2\16\5\0\2\16\2\0\4\16\1\347"+
    "\1\16\1\162\1\163\17\0\13\16\5\0\1\16\1\0"+
    "\4\16\2\0\2\16\5\0\2\16\2\0\6\16\1\162"+
    "\1\163\17\0\12\16\1\371\5\0\1\16\1\0\4\16"+
    "\2\0\2\16\5\0\2\66\2\0\1\372\5\66\1\217"+
    "\1\163\17\0\13\66\5\0\1\66\1\0\4\66\2\0"+
    "\2\66\5\0\2\66\2\0\4\66\1\352\1\66\1\217"+
    "\1\163\17\0\13\66\5\0\1\66\1\0\4\66\2\0"+
    "\2\66\5\0\2\71\2\0\1\373\5\71\1\162\1\163"+
    "\17\0\13\71\5\0\1\71\1\0\4\71\2\0\2\71"+
    "\5\0\2\71\2\0\4\71\1\354\1\71\1\162\1\163"+
    "\17\0\13\71\5\0\1\71\1\0\4\71\2\0\2\71"+
    "\5\0\2\74\2\0\1\374\5\74\1\222\1\163\17\0"+
    "\13\74\5\0\1\74\1\0\4\74\2\0\2\74\5\0"+
    "\2\74\2\0\4\74\1\356\1\74\1\222\1\163\17\0"+
    "\13\74\5\0\1\74\1\0\4\74\2\0\2\74\5\0"+
    "\2\77\2\0\1\375\5\77\1\162\1\163\17\0\13\77"+
    "\5\0\1\77\1\0\4\77\2\0\2\77\5\0\2\77"+
    "\2\0\4\77\1\360\1\77\1\162\1\163\17\0\13\77"+
    "\5\0\1\77\1\0\4\77\2\0\2\77\5\0\2\102"+
    "\2\0\1\376\5\102\1\162\1\163\17\0\13\102\5\0"+
    "\1\102\1\0\4\102\2\0\2\102\5\0\2\102\2\0"+
    "\4\102\1\362\1\102\1\162\1\163\17\0\13\102\5\0"+
    "\1\102\1\0\4\102\2\0\2\102\5\0\2\105\2\0"+
    "\1\377\5\105\1\162\1\163\17\0\13\105\5\0\1\105"+
    "\1\0\4\105\2\0\2\105\5\0\2\105\2\0\4\105"+
    "\1\364\1\105\1\162\1\163\17\0\13\105\5\0\1\105"+
    "\1\0\4\105\2\0\2\105\1\227\1\230\2\227\1\231"+
    "\2\115\2\227\1\u0100\5\115\1\232\1\233\17\227\13\115"+
    "\5\227\1\115\1\227\4\115\2\227\2\115\1\227\1\230"+
    "\2\227\1\231\2\115\2\227\4\115\1\366\1\115\1\232"+
    "\1\233\17\227\13\115\5\227\1\115\1\227\4\115\2\227"+
    "\2\115\5\0\2\16\2\0\1\u0101\5\16\1\162\1\163"+
    "\17\0\13\16\5\0\1\16\1\0\4\16\2\0\2\16"+
    "\5\0\2\16\2\0\6\16\1\162\1\163\17\0\2\16"+
    "\1\u0102\10\16\5\0\1\16\1\0\4\16\2\0\2\16"+
    "\5\0\2\66\2\0\1\u0103\5\66\1\217\1\163\17\0"+
    "\13\66\5\0\1\66\1\0\4\66\2\0\2\66\5\0"+
    "\2\71\2\0\1\u0104\5\71\1\162\1\163\17\0\13\71"+
    "\5\0\1\71\1\0\4\71\2\0\2\71\5\0\2\74"+
    "\2\0\1\u0105\5\74\1\222\1\163\17\0\13\74\5\0"+
    "\1\74\1\0\4\74\2\0\2\74\5\0\2\77\2\0"+
    "\1\u0106\5\77\1\162\1\163\17\0\13\77\5\0\1\77"+
    "\1\0\4\77\2\0\2\77\5\0\2\102\2\0\1\u0107"+
    "\5\102\1\162\1\163\17\0\13\102\5\0\1\102\1\0"+
    "\4\102\2\0\2\102\5\0\2\105\2\0\1\u0108\5\105"+
    "\1\162\1\163\17\0\13\105\5\0\1\105\1\0\4\105"+
    "\2\0\2\105\1\227\1\230\2\227\1\231\2\115\2\227"+
    "\1\u0109\5\115\1\232\1\233\17\227\13\115\5\227\1\115"+
    "\1\227\4\115\2\227\2\115";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11890];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\11\0\1\11\1\1\1\11\16\1\7\11\15\1\1\11"+
    "\102\1\4\0\1\11\1\0\1\11\1\1\1\11\1\1"+
    "\1\11\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\12\1\1\0\2\1\1\0\4\1\1\0\2\1"+
    "\4\0\3\1\1\0\10\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\11\1\1\11\31\1\1\0\17\1"+
    "\1\0\45\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[265];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;


  public PerlLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PerlLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 146) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 24: 
          { yybegin(LEX_DEREFERENCE);return PERL_DEREFERENCE;
          }
        case 36: break;
        case 10: 
          { return PERL_LBRACK;
          }
        case 37: break;
        case 18: 
          { return PERL_SQ_STRING;
          }
        case 38: break;
        case 16: 
          { yybegin(YYINITIAL);return PERL_USER_FUNCTION;
          }
        case 39: break;
        case 13: 
          { return PERL_RPAREN;
          }
        case 40: break;
        case 17: 
          { yybegin(PACKAGE_USE_PARAMS);
        return checkCorePackage();
          }
        case 41: break;
        case 1: 
          { return PERL_BAD_CHARACTER;
          }
        case 42: break;
        case 31: 
          { yybegin(PACKAGE_INSTANCE_CALL);
    yypushback(2);
    return PERL_PACKAGE;
          }
        case 43: break;
        case 26: 
          { return checkBuiltInArray();
          }
        case 44: break;
        case 32: 
          { yybegin(PACKAGE_USE);return PerlFunction.getFunction(yytext().toString());
          }
        case 45: break;
        case 3: 
          { yybegin(YYINITIAL);return PERL_SEMI;
          }
        case 46: break;
        case 34: 
          { yybegin(LEX_EOF);return PERL_COMMENT_MULTILINE;
          }
        case 47: break;
        case 25: 
          { return checkBuiltInScalar();
          }
        case 48: break;
        case 20: 
          { return PERL_INSTANCE_METHOD_CALL;
          }
        case 49: break;
        case 7: 
          { return PERL_COMMENT;
          }
        case 50: break;
        case 27: 
          { return checkBuiltInHash();
          }
        case 51: break;
        case 5: 
          { return PerlFunction.getFunction(yytext().toString());
          }
        case 52: break;
        case 4: 
          { return PERL_NUMBER;
          }
        case 53: break;
        case 28: 
          { return checkBuiltInGlob();
          }
        case 54: break;
        case 2: 
          { return TokenType.WHITE_SPACE;
          }
        case 55: break;
        case 22: 
          { return PERL_DQ_STRING;
          }
        case 56: break;
        case 6: 
          { return PERL_OPERATOR;
          }
        case 57: break;
        case 21: 
          { return PERL_COMMENT_MULTILINE;
          }
        case 58: break;
        case 14: 
          { return PERL_COMMA;
          }
        case 59: break;
        case 33: 
          { yybegin(FUNCTION_DEFINITION); return PerlFunction.getFunction(yytext().toString());
          }
        case 60: break;
        case 15: 
          { return PERL_PACKAGE;
          }
        case 61: break;
        case 23: 
          { return PERL_DEPACKAGE;
          }
        case 62: break;
        case 9: 
          { return PERL_RBRACE;
          }
        case 63: break;
        case 19: 
          { return PERL_STATIC_METHOD_CALL;
          }
        case 64: break;
        case 11: 
          { return PERL_RBRACK;
          }
        case 65: break;
        case 30: 
          { yybegin(PACKAGE_STATIC_CALL);
    yypushback(2);
    return PERL_PACKAGE;
          }
        case 66: break;
        case 29: 
          { yybegin(PACKAGE_USE); return PerlFunction.getFunction(yytext().toString());
          }
        case 67: break;
        case 35: 
          { yybegin(PACKAGE_DEFINITION); return PerlFunction.getFunction(yytext().toString());
          }
        case 68: break;
        case 8: 
          { return PERL_LBRACE;
          }
        case 69: break;
        case 12: 
          { return PERL_LPAREN;
          }
        case 70: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
