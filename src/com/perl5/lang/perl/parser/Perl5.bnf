/*
Copyright 2015 Alexandr Evstigneev

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
{
  parserClass="com.perl5.lang.perl.parser.PerlParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

//  generate=[tokens="yes" psi="yes" tokenAccessors="yes"]

  psiClassPrefix="PsiPerl"
  psiImplClassSuffix="Impl"
  psiPackage="com.perl5.lang.perl.psi"
  psiImplPackage="com.perl5.lang.perl.psi.impl"

  elementTypeHolderClass="com.perl5.lang.perl.lexer.PerlElementTypes"
  elementTypeClass="com.perl5.lang.perl.PerlElementType"
  tokenTypeClass="com.perl5.lang.perl.PerlTokenType"

  parserUtilClass="com.perl5.lang.perl.parser.PerlParserUitl"
  psiImplUtilClass="com.perl5.lang.perl.psi.utils.PerlPsiImplUtil"

  //elementTypeFactory="com.perl5.lang.perl.psi.PerlElementFactory.getCompositeType"
//  tokenTypeFactory="com.perl5.lang.perl.psi.PerlElementFactory.getCompositeType"

  tokens=[
    COMMENT_LINE="COMMENT_LINE"
    COMMENT_BLOCK="COMMENT_BLOCK"
    POD="PERL_POD"

    SIGIL_ARRAY="SIGIL_ARRAY"
    SIGIL_SCALAR="SIGIL_SCALAR"
    SIGIL_SCALAR_INDEX="SIGIL_SCALAR_INDEX"

    SCALAR_SIGILS="SCALAR_SIGILS"

//    SIGIL_HASH="SIGIL_HASH"
//    SIGIL_GLOB="SIGIL_GLOB"
//    SIGIL_CODE="SIGIL_CODE"

    ANNOTATION_PREFIX="ANNOTATION_PREFIX"

    ANNOTATION_UNKNOWN_KEY="ANNOTATION_UNKNOWN"
    ANNOTATION_DEPRECATED_KEY="ANNOTATION_DEPRECATED"
    ANNOTATION_RETURNS_KEY="ANNOTATION_RETURNS"
    ANNOTATION_OVERRIDE_KEY="ANNOTATION_OVERRIDE"
    ANNOTATION_METHOD_KEY="ANNOTATION_METHOD"
    ANNOTATION_ABSTRACT_KEY="ANNOTATION_ABSTRACT"

    // generated tokens
    VARIABLE_NAME="VARIABLE_NAME"
    SUB="SUB"

    HEREDOC="HEREDOC" // should be string content too
    HEREDOC_END="HEREDOC_END"

    VERSION="VERSION"
    NUMBER_VERSION="NUMBER_VERSION"
    NUMBER="NUMBER"
    NUMBER_SIMPLE="NUMBER_SIMPLE"

    RESERVED_IF="if"
    RESERVED_UNLESS="unless"
    RESERVED_ELSIF="elsif"
    RESERVED_ELSE="else"
    RESERVED_GIVEN="given"
    RESERVED_WHILE="while"
    RESERVED_UNTIL="until"
    RESERVED_FOR="for"
    RESERVED_FOREACH="foreach"
    RESERVED_CONTINUE="continue"
    RESERVED_WHEN="when"

    RESERVED_SUB="sub"
    RESERVED_PACKAGE="package"
    RESERVED_USE="use"
    RESERVED_NO="no"
    RESERVED_REQUIRE="require"

    RESERVED_PRINT="print"
    RESERVED_PRINTF="printf"
    RESERVED_SAY="say"

    RESERVED_MAP="map"
    RESERVED_GREP="grep"
    RESERVED_SORT="sort"

    RESERVED_UNDEF="undef"

    RESERVED_QW="qw"

    RESERVED_QQ="qq"
    RESERVED_Q="q"
    RESERVED_QX="qx"

    RESERVED_TR="tr"
    RESERVED_Y="y"

    RESERVED_S="s"
    RESERVED_QR="qr"
    RESERVED_M="m"

    RESERVED_MY="my"
    RESERVED_OUR="our"
    RESERVED_STATE="state"
    RESERVED_LOCAL="local"

    RESERVED_DO="do"
    RESERVED_EVAL="eval"

    RESERVED_GOTO="goto"
    RESERVED_REDO="redo"
    RESERVED_NEXT="next"
    RESERVED_LAST="last"

    // Operators

    OPERATOR_X="x"

    OPERATOR_CMP_NUMERIC="<=>"
    OPERATOR_LT_NUMERIC="<"
    OPERATOR_GT_NUMERIC=">"

    OPERATOR_DEREFERENCE="->"
    OPERATOR_COMMA_ARROW="=>"
    OPERATOR_COMMA=","

    OPERATOR_HELLIP="..."
    OPERATOR_FLIP_FLOP=".."
    OPERATOR_CONCAT="."

    OPERATOR_PLUS_PLUS="++"
    OPERATOR_MINUS_MINUS="--"
    OPERATOR_POW="**"

    OPERATOR_RE="=~"
    OPERATOR_NOT_RE="!~"

    OPERATOR_HEREDOC="<<"
    OPERATOR_SHIFT_LEFT="<<"
    OPERATOR_SHIFT_RIGHT=">>"

    OPERATOR_SMARTMATCH="~~"

    OPERATOR_AND="&&"
    OPERATOR_OR="||"
    OPERATOR_OR_DEFINED="//"
    OPERATOR_NOT="!"

    OPERATOR_ASSIGN="="

    QUESTION="?"
    COLON=":"

    OPERATOR_REFERENCE="\\"

    OPERATOR_DIV="/"
    OPERATOR_MUL="*"
    OPERATOR_MOD="%"
    OPERATOR_PLUS="+"
    OPERATOR_MINUS="-"

    OPERATOR_BITWISE_NOT="~"
    OPERATOR_BITWISE_AND="&"
    OPERATOR_BITWISE_OR="|"
    OPERATOR_BITWISE_XOR="^"

    OPERATOR_AND_LP="and"
    OPERATOR_OR_LP="or"
    OPERATOR_XOR_LP="xor"
    OPERATOR_NOT_LP="not"

    OPERATOR_LT_STR="lt"
    OPERATOR_GT_STR="gt"
    OPERATOR_LE_STR="le"
    OPERATOR_GE_STR="ge"
    OPERATOR_CMP_STR="cmp"
    OPERATOR_EQ_STR="eq"
    OPERATOR_NE_STR="ne"

    OPERATOR_FILETEST="OPERATOR_FILETEST"

    REGEX_QUOTE_OPEN="REGEX_QUOTE_OPEN"
    REGEX_QUOTE_CLOSE="REGEX_QUOTE_CLOSE"
    REGEX_MODIFIER="REGEX_MODIFIER"
    REGEX_TOKEN="REGEX_TOKEN"

    STRING_CONTENT="STRING_CONTENT"

    TAG="TAG"

    LEFT_BRACKET='LEFT_BRACKET'
    RIGHT_BRACKET='RIGHT_BRACKET'

    LEFT_PAREN="LEFT_PAREN"
    RIGHT_PAREN="RIGHT_PAREN"

    LEFT_BRACE='LEFT_BRACE'
    RIGHT_BRACE='RIGHT_BRACE'

    SEMICOLON=";";

    QUOTE="\""
    QUOTE_DOUBLE="\""
    QUOTE_SINGLE="'"
    QUOTE_TICK="`"

    // custom tokens
    IDENTIFIER="IDENTIFIER"
    PACKAGE_IDENTIFIER="PACKAGE_IDENTIFIER"

    SUB_ATTRIBUTE="SUB_ATTRIBUTE"
    SUB_PROTOTYPE_TOKEN="SUB_PROTOTYPE_TOKEN"

    PACKAGE="PACKAGE"

    HANDLE="HANDLE"
    BLOCK_NAME="BLOCK_NAME"
    LABEL="LABEL"

    // inline HTML support
    EMBED_MARKER="EMBED_MARKER"
    TEMPLATE_BLOCK_HTML="TEMPLATE_BLOCK_HTML"
  ]

    extends(".*expr")=expr
    name(".*expr")="expression"

    extends("string_sq|string_dq|string_xq|heredoc_opener")=term_expr

    extends("annotation_.*")=annotation
    implements("annotation_returns.*")="com.perl5.lang.perl.psi.properties.PerlNamespaceElementContainer"
    methods("annotation_returns.*")=[getNamespaceElement]

    mixin("use_statement")="com.perl5.lang.perl.psi.mixins.PerlUseStatementImplMixin"
    implements("use_statement")="com.perl5.lang.perl.psi.PerlUseStatement"

    extends("use_statement|no_statement|condition_statement|condition_statement_while|for_list_statement|for_iterator_statement")=statement

    implements("conditional_block|conditional_block_while|block|block_compound|if_compound|unless_compound|given_compound|while_compound|until_compound|for_compound|foreach_compound|namespace_block")="com.perl5.lang.perl.psi.properties.PerlLexicalScope";
    mixin("conditional_block|conditional_block_while|block|block_compound|if_compound|unless_compound|given_compound|while_compound|until_compound|for_compound|foreach_compound|namespace_block")="com.perl5.lang.perl.psi.mixins.PerlLexicalScopeMemberMixin"

    implements("deref_expr")="com.perl5.lang.perl.psi.PerlDerefExpression"
    mixin("deref_expr")="com.perl5.lang.perl.psi.mixins.PerlDerefExpressionMixin"

    implements("variable_declaration_lexical|variable_declaration_local|variable_declaration_global")="com.perl5.lang.perl.psi.PerlVariableDeclaration"
    mixin("variable_declaration_lexical|variable_declaration_local|variable_declaration_global")="com.perl5.lang.perl.psi.mixins.PerlVariableDeclarationMixin"

    elementTypeFactory("scalar_variable|array_variable|hash_variable|glob_variable|array_index_variable")="com.perl5.lang.perl.parser.PerlElementTypeFactory.factory"
    stubClass("scalar_variable|array_variable|hash_variable|array_index_variable")="com.perl5.lang.perl.idea.stubs.variables.PerlVariableStub"

    mixin("scalar_variable|array_variable|hash_variable|array_index_variable")="com.perl5.lang.perl.psi.mixins.PerlVariableImplMixin"
    implements("scalar_variable|array_variable|hash_variable|array_index_variable")="com.perl5.lang.perl.psi.PerlVariable"

    elementTypeFactory("sub_declaration|sub_definition|namespace_definition")="com.perl5.lang.perl.parser.PerlElementTypeFactory.factory"

    stubClass("namespace_definition")="com.perl5.lang.perl.idea.stubs.namespaces.PerlNamespaceDefinitionStub"
    mixin("namespace_definition")="com.perl5.lang.perl.psi.mixins.PerlNamespaceDefinitionImplMixin"
    implements("namespace_definition")="com.perl5.lang.perl.psi.PerlNamespaceDefinition"

    stubClass("sub_definition")="com.perl5.lang.perl.idea.stubs.subsdefinitions.PerlSubDefinitionStub"
    mixin("sub_definition")="com.perl5.lang.perl.psi.mixins.PerlSubDefinitionImplMixin"
    implements("sub_definition")="com.perl5.lang.perl.psi.PerlSubDefinition"

    stubClass("sub_declaration")="com.perl5.lang.perl.idea.stubs.subsdeclarations.PerlSubDeclarationStub"
    mixin("sub_declaration")="com.perl5.lang.perl.psi.mixins.PerlSubDeclarationImplMixin"
    implements("sub_declaration")="com.perl5.lang.perl.psi.PerlSubDeclaration"

    stubClass("glob_variable")="com.perl5.lang.perl.idea.stubs.globs.PerlGlobStub"
    mixin("glob_variable")="com.perl5.lang.perl.psi.mixins.PerlGlobVariableImplMixin"
    implements("glob_variable")="com.perl5.lang.perl.psi.PerlGlobVariable"

    mixin("require_expr")="com.perl5.lang.perl.psi.mixins.PerlRequireExprImplMixin"
    implements("require_expr")="com.perl5.lang.perl.psi.PerlRequireExpr"

    mixin("method")="com.perl5.lang.perl.psi.mixins.PerlMethodImplMixin";
    implements("method")="com.perl5.lang.perl.psi.PerlMethod";
 }

///////////////////////////// main code structure //////////////////////////////////////////////////////////////////////
root ::= file_item *

private file_item ::= !<<eof>> {SEMICOLON | namespace_block | namespace_item} //{pin=1 }

namespace_block ::= namespace_definition (block | SEMICOLON namespace_content)
namespace_definition ::= RESERVED_PACKAGE <<mergePackageName>> [perl_version] {pin=1 recoverWhile=recover_namespace_definition}
private recover_namespace_definition ::= !(SEMICOLON | LEFT_BRACE)
namespace_content ::= namespace_item *  {extends=block recoverWhile=recover_namespace}

// todo count opening braces
private recover_namespace ::= !( RESERVED_PACKAGE | RIGHT_BRACE )

block ::= LEFT_BRACE block_content RIGHT_BRACE {pin=1}
private block_content ::= file_item * {recoverWhile=recover_block}
private recover_block ::= !(RIGHT_BRACE)

private namespace_item ::=
    compound_statement [SEMICOLON+]
    | statement
    | annotation

private compound_statement ::=
    sub_definition
    | named_block
    | labelable_compound_statment

named_block ::= BLOCK_NAME block

// fixme we can't pin this because we need to distinct declaration and definition
sub_definition ::= [annotations] RESERVED_SUB canonical_sub_name [sub_definition_parameters] block

private sub_definition_parameters ::=
    sub_prototype [sub_attributes]
    | sub_attributes [sub_signature]
    | sub_signature


private labelable_compound_statment ::=
    [label_declaration] (
        block_compound
        | if_compound
        | unless_compound
        | given_compound
        | while_compound
        | until_compound
        | for_compound
        | foreach_compound
     )

if_compound ::= RESERVED_IF conditional_block if_compound_elsif * [if_compound_else]  {pin=1}
unless_compound ::= RESERVED_UNLESS conditional_block if_compound_elsif * [if_compound_else]  {pin=1}
private if_compound_elsif ::= RESERVED_ELSIF conditional_block  {pin=1}
private if_compound_else  ::= RESERVED_ELSE unconditional_block {pin=1}
unconditional_block ::= block

conditional_block ::= condition_statement block {pin=1 name="Conditional block"}
condition_statement ::= LEFT_PAREN condition_statement_expr RIGHT_PAREN {pin=1 recoverWhile=recover_to_block name="Condition"}

conditional_block_while ::= condition_statement_while block {pin=1 name="Conditional block"}
condition_statement_while ::= LEFT_PAREN [condition_statement_expr] RIGHT_PAREN {pin=1 recoverWhile=recover_to_block name="Condition"}
private condition_statement_expr ::= expr {recoverWhile=recover_condition_statement_expr}
private recover_condition_statement_expr ::= !(LEFT_BRACE|RIGHT_PAREN)
private recover_to_block ::= !(LEFT_BRACE)

given_compound ::= RESERVED_GIVEN conditional_block  {pin=1}

while_compound ::= RESERVED_WHILE conditional_block_while [continue_block]  {pin=1}
until_compound ::= RESERVED_UNTIL conditional_block [continue_block]  {pin=1}

continue_block ::= RESERVED_CONTINUE block {pin=1}

private block_compound ::= block [continue_block]


// for/foreach
// fixme why the heck there is no parsing error on "for" and there is a error on "use", both pinned
for_compound ::= RESERVED_FOR for_arguments {pin=1}
foreach_compound ::= RESERVED_FOREACH for_arguments  {pin=1}
private for_arguments ::=
    for_iterator block
    | for_list_statement block_compound

for_iterator ::= LEFT_PAREN [for_iterator_statement]  SEMICOLON [for_iterator_statement] SEMICOLON [for_iterator_statement] RIGHT_PAREN {pin=3}
for_iterator_statement ::= expr {recoverWhile=recover_parenthesised}

// @todo only single variable or variable definition may be here
for_list_statement ::= [ variable_declaration | variable ] for_list_epxr
for_list_epxr ::= LEFT_PAREN for_list_expr_content RIGHT_PAREN {pin=1}
private for_list_expr_content ::= list_expr {recoverWhile=recover_parenthesised}


statement ::= statement_body <<statementSemi>>
private statement_body ::=
    use_statement
    | no_statement
    | sub_declaration
    | normal_statement
    {recoverWhile=recover_statement}

private normal_statement ::= [label_declaration] expr [statement_modifier] {pin=2}

sub_declaration ::= [annotations] RESERVED_SUB canonical_sub_name sub_declaration_parameters

private canonical_sub_name ::= [namespace_canonical] <<convertIdentifier SUB>>

private sub_declaration_parameters ::=  [sub_prototype] [sub_attributes]

// todo implement parsing
private sub_prototype ::= LEFT_PAREN [sub_prototype_content] RIGHT_PAREN {pin=1 recoverWhile=recover_sub_prototype}
private recover_sub_prototype ::= !(COLON | LEFT_BRACE | SEMICOLON)
private sub_prototype_content ::= <<parseSubPrototype>> {recoverWhile=recover_sub_prototype_content}
private recover_sub_prototype_content ::= !(RIGHT_PAREN | COLON | LEFT_BRACE | SEMICOLON)

private sub_signature ::= LEFT_PAREN [sub_signature_content] RIGHT_PAREN {pin=1 recoverWhile=recover_sub_signature}
private recover_sub_signature ::= !(LEFT_BRACE | SEMICOLON)
private sub_signature_content ::= <<parseSubSignature>> {recoverWhile=recover_sub_signature_content}
private recover_sub_signature_content ::= !(RIGHT_PAREN | COLON | LEFT_BRACE | SEMICOLON)

private sub_attributes ::= COLON <<parseSubAttributes>> {pin=1 recoverWhile=recover_sub_attributes}
recover_sub_attributes ::= !(LEFT_PAREN| SEMICOLON| LEFT_BRACE)

last_expr ::= RESERVED_LAST [lnr_param] {pin=1}
next_expr ::= RESERVED_NEXT [lnr_param] {pin=1}
redo_expr ::= RESERVED_REDO [lnr_param] {pin=1}
goto_expr ::= RESERVED_GOTO [goto_param] {pin=1}

private lnr_param ::= <<convertIdentifier LABEL>> | expr // fixme scalar_expr ?
private goto_param ::= <<convertIdentifier LABEL>> | OPERATOR_BITWISE_AND <<convertIdentifier SUB>> | expr // fixme same, scalar expr?

private statement_modifier ::=
    if_statement_modifier
    | unless_statement_modifier
    | while_statement_modifier
    | until_statement_modifier
    | for_statement_modifier
    | foreach_statement_modifier
    | when_statement_modifier

if_statement_modifier ::= RESERVED_IF expr {pin=1 name="Postfix if"}
unless_statement_modifier ::=  RESERVED_UNLESS expr {pin=1 name="Postfix unless"}
while_statement_modifier ::=  RESERVED_WHILE expr {pin=1 name="Postfix while"}
until_statement_modifier ::=  RESERVED_UNTIL expr {pin=1 name="Postfix until"}
for_statement_modifier ::=  RESERVED_FOR expr  {pin=1 name="Postfix for"}
foreach_statement_modifier ::=  RESERVED_FOREACH expr {pin=1 name="Postfix foreach"}
when_statement_modifier ::= RESERVED_WHEN expr {pin=1 name="Postfix when"}

use_statement ::= RESERVED_USE use_no_parameters {pin=1}
no_statement ::= RESERVED_NO use_no_parameters {pin=1}

private use_no_parameters ::= use_module_parameters | use_version_parameters
private use_module_parameters ::= <<mergePackageName>> [perl_version [comma]] [expr];
private use_version_parameters ::= perl_version;

undef_expr ::= RESERVED_UNDEF (variable | LEFT_PAREN variable RIGHT_PAREN) ? {pin=1}
require_expr ::= RESERVED_REQUIRE (<<mergePackageName>> | perl_version | scalar_expr)  {pin=1}// multiline string is possible too

private recover_statement ::= !(SEMICOLON | RIGHT_BRACE | REGEX_QUOTE_CLOSE)

// expression
expr ::=
    lp_or_xor_expr          // 0
    | lp_and_expr           // 1
    | lp_not_expr           // 2
    | named_list_expr       // 3
    | comma_expr            // 4
    | assign_or_flow_expr   // 5
    | trenar_expr           // 6
    | flipflop_expr         // 7
    | or_expr               // 8
    | and_expr              // 9
    | bitwise_or_xor_expr   // 10
    | bitwise_and_expr      // 11
    | equal_expr            // 12
    | compare_expr          // 13
    | named_unary_expr      // 14
    | shift_expr            // 15
    | add_expr              // 16
    | mul_expr              // 17
    | regex_expr            // 18
    | op_5_expr             // 19
    | pow_expr              // 20
    | op_3_expr             // 21
    | deref_expr            // 22
    | term_expr             // 23

// above list operators
private list_expr ::= <<parseExpressionLevel 3>>

// List expression elements
private scalar_expr ::= <<parseExpressionLevel 4>>

// Unary expression argument
private unary_expr ::= <<parseExpressionLevel 14>>

// used in local declaration
private immutable_expr ::= <<parseExpressionLevel 22>>

named_unary_expr ::= { OPERATOR_FILETEST | <<isUnaryOperator>> method } [unary_expr]
named_list_expr ::= <<isListOperator>> method [call_arguments]

term_expr ::=
    variable_declaration
    | parenthesised_expr [LEFT_BRACKET expr RIGHT_BRACKET]
    | scalar_constant
    | do_expr
    | sub_expr
    | eval_expr
    | grep_expr
    | map_expr
    | sort_expr
    | regex_term
    | file_read_expr
    | print_expr
    | require_expr
    | undef_expr
    | perl_handle_expr
    | sub_call_expr
    | reference_value_expr
    | variable_expr
    | namespace_expr


grep_expr ::= RESERVED_GREP grep_map_arguments {pin=1}
map_expr ::= RESERVED_MAP grep_map_arguments {pin=1}

private grep_map_arguments ::=
    LEFT_PAREN grep_map_arguments_ RIGHT_PAREN !LEFT_BRACKET
    | grep_map_arguments_

private grep_map_arguments_ ::=
    block [comma] list_expr
    | scalar_expr comma list_expr

sort_expr ::= RESERVED_SORT sort_arguments {pin=1}
private sort_arguments ::=
    LEFT_PAREN sort_arguments_ RIGHT_PAREN !LEFT_BRACKET
    | sort_arguments_

private sort_arguments_ ::=
    scalar_variable list_expr
    | block [comma] list_expr
    | callable list_expr
    | list_expr

variable_expr ::= array_index_variable | variable
namespace_expr ::= <<mergePackageName>>
parenthesised_expr ::= LEFT_PAREN [parenthesised_expr_content] RIGHT_PAREN {pin=1 name="Parenthesised expression"}
private parenthesised_expr_content ::= expr {recoverWhile=recover_parenthesised}
private recover_parenthesised ::= !(RIGHT_PAREN | LEFT_BRACE | RIGHT_BRACE | SEMICOLON )

deref_expr ::= expr (<<parseArrowSmart>> nested_element_expr) + {pin(".*")=1}

private op_3_expr ::= pref_pp_expr | suff_pp_expr
pref_pp_expr ::= (OPERATOR_PLUS_PLUS|OPERATOR_MINUS_MINUS) expr
suff_pp_expr ::= expr (OPERATOR_PLUS_PLUS|OPERATOR_MINUS_MINUS)

pow_expr ::= expr (pow_operator expr)+ { rightAssociative=true }
private pow_operator ::= OPERATOR_MUL OPERATOR_MUL !OPERATOR_ASSIGN

private op_5_expr ::= ref_expr  | prefix_unary_expr
ref_expr ::= OPERATOR_REFERENCE referencable_expr { rightAssociative=true }
prefix_unary_expr ::= operator_prefix_unary expr { rightAssociative=true }
private operator_prefix_unary ::= (OPERATOR_BITWISE_NOT|OPERATOR_NOT|OPERATOR_PLUS|OPERATOR_MINUS) !OPERATOR_ASSIGN

regex_expr ::= expr (OPERATOR_RE|OPERATOR_NOT_RE) expr

mul_expr ::= expr (operator_mul expr)+
private operator_mul ::= (OPERATOR_MUL !OPERATOR_MUL |OPERATOR_DIV|OPERATOR_MOD|OPERATOR_X) !OPERATOR_ASSIGN

add_expr ::= expr (operator_add expr)+
private operator_add ::= (OPERATOR_PLUS|OPERATOR_MINUS|OPERATOR_CONCAT) !OPERATOR_ASSIGN

shift_expr ::= expr (operator_shift expr)+
private operator_shift ::= (OPERATOR_SHIFT_LEFT|OPERATOR_SHIFT_RIGHT) !OPERATOR_ASSIGN

compare_expr ::= expr (operator_compare) expr
private operator_compare ::=
    OPERATOR_GT_NUMERIC OPERATOR_ASSIGN   // >=
    |OPERATOR_LT_NUMERIC OPERATOR_ASSIGN  // <=
    |OPERATOR_GT_NUMERIC
    |OPERATOR_LT_NUMERIC

    |OPERATOR_GE_STR
    |OPERATOR_LE_STR
    |OPERATOR_LT_STR
    |OPERATOR_GT_STR

equal_expr ::= expr operator_equal expr
private operator_equal ::=
    OPERATOR_ASSIGN OPERATOR_ASSIGN // ==
    |OPERATOR_NOT OPERATOR_ASSIGN   // !=
    |OPERATOR_CMP_NUMERIC
    |OPERATOR_EQ_STR
    |OPERATOR_NE_STR
    |OPERATOR_CMP_STR
    |OPERATOR_SMARTMATCH

bitwise_and_expr ::= expr (OPERATOR_BITWISE_AND !OPERATOR_ASSIGN expr)+

bitwise_or_xor_expr ::= expr ( operator_bitwise_or_xor expr)+
private operator_bitwise_or_xor ::= (OPERATOR_BITWISE_OR|OPERATOR_BITWISE_XOR) !OPERATOR_ASSIGN

and_expr ::= expr ( operator_and expr)+
private operator_and ::= OPERATOR_AND !OPERATOR_ASSIGN

or_expr ::= expr ( operator_or_or_defined expr)+
private operator_or_or_defined ::= (OPERATOR_OR|OPERATOR_OR_DEFINED) !OPERATOR_ASSIGN

flipflop_expr ::= expr (OPERATOR_FLIP_FLOP|OPERATOR_HELLIP) expr
trenar_expr ::= expr QUESTION scalar_expr COLON scalar_expr { rightAssociative=true }

private assign_or_flow_expr ::=
    assign_expr
    | last_expr
    | next_expr
    | goto_expr
    | redo_expr

// fixme do we need to collapse tokens?
assign_expr ::= expr (operator_assign expr ) + { rightAssociative=true }

private operator_assign ::=
    OPERATOR_MUL OPERATOR_MUL OPERATOR_ASSIGN  // **=
    |OPERATOR_PLUS OPERATOR_ASSIGN      // +=
    |OPERATOR_MINUS OPERATOR_ASSIGN     // -=
    |OPERATOR_MUL OPERATOR_ASSIGN       // *=
    |OPERATOR_DIV OPERATOR_ASSIGN       // /=
    |OPERATOR_MOD OPERATOR_ASSIGN       // %=
    |OPERATOR_CONCAT OPERATOR_ASSIGN    // .=
    |OPERATOR_X OPERATOR_ASSIGN         // x=
    |OPERATOR_BITWISE_AND OPERATOR_ASSIGN   // &=
    |OPERATOR_BITWISE_OR OPERATOR_ASSIGN    // |=
    |OPERATOR_BITWISE_XOR OPERATOR_ASSIGN   // ^=
    |OPERATOR_SHIFT_LEFT OPERATOR_ASSIGN    //  <<=
    |OPERATOR_SHIFT_RIGHT OPERATOR_ASSIGN   //  >>=
    |OPERATOR_AND OPERATOR_ASSIGN           //  &&=
    |OPERATOR_OR OPERATOR_ASSIGN            //  ||=
    |OPERATOR_OR_DEFINED OPERATOR_ASSIGN    //  //=
    |OPERATOR_ASSIGN !OPERATOR_ASSIGN

private comma_expr ::= comma_sequence_expr | trailing_comma_expr
comma_sequence_expr ::= expr (comma_any+ expr ) + {pin(".*")=1}
trailing_comma_expr ::= expr comma+ // fixme we should annotate this
private comma_any ::= comma + !(RIGHT_PAREN|RIGHT_BRACKET|RIGHT_BRACE|SEMICOLON)

lp_not_expr ::= OPERATOR_NOT_LP expr { rightAssociative=true }
lp_and_expr ::= expr (OPERATOR_AND_LP expr)+

lp_or_xor_expr ::= expr ((OPERATOR_OR_LP|OPERATOR_XOR_LP) expr)+

print_expr ::= (RESERVED_PRINT|RESERVED_PRINTF|RESERVED_SAY) ( LEFT_PAREN [print_arguments] RIGHT_PAREN | [print_arguments] ) // {pin=1}
private print_arguments ::= print_handle expr | expr
private print_handle ::= <<parsePrintHandle>> | perl_handle

sub_expr ::= RESERVED_SUB sub_definition_parameters block  // fixme make sure that this one checked after definition and declaration

sub_call_expr ::= leftward_call_expr | rightward_call_expr

private leftward_call_expr ::= callable LEFT_PAREN [call_arguments] RIGHT_PAREN !LEFT_BRACKET
private rightward_call_expr ::= callable [call_arguments]

//// fixme this should depend on prototype
call_arguments ::=
    anon_hash comma list_expr
    | block [[comma] list_expr]
    | list_expr

file_read_expr ::= OPERATOR_LT_NUMERIC [read_handle | perl_handle] OPERATOR_GT_NUMERIC
read_handle ::= <<parseReadHandle>>

////////////////////////// regular expressions /////////////////////////////////////////////////////////////////////////
private regex_term ::=
    compile_regex
    | replacement_regex
    | tr_regex
    | match_regex

// pinning quotes leads to bug with replacement block
compile_regex ::= RESERVED_QR match_regex_body
match_regex ::= [RESERVED_M] match_regex_body
private match_regex_body ::= REGEX_QUOTE_OPEN [perl_regex] REGEX_QUOTE_CLOSE [perl_regex_modifiers]
replacement_regex ::= RESERVED_S REGEX_QUOTE_OPEN [perl_regex] REGEX_QUOTE_CLOSE [REGEX_QUOTE_OPEN] [perl_regex | regex_code] REGEX_QUOTE_CLOSE [perl_regex_modifiers]
private regex_code ::= file_item+ {recoverWhile=recover_regex_code}
private recover_regex_code ::= !(REGEX_QUOTE_CLOSE)

perl_regex_modifiers ::= REGEX_MODIFIER +
perl_regex ::= <<joinRegexTokens>> // fixme implement regex parsing

tr_regex ::= (RESERVED_TR|RESERVED_Y) REGEX_QUOTE_OPEN tr_searchlist REGEX_QUOTE_CLOSE [REGEX_QUOTE_OPEN] tr_replacementlist REGEX_QUOTE_CLOSE [tr_modifiers] {pin=1}
tr_searchlist ::= STRING_CONTENT
tr_replacementlist ::= STRING_CONTENT

tr_modifiers ::= REGEX_MODIFIER +
////////////////////////// end of regular expressions //////////////////////////////////////////////////////////////////

do_expr ::= RESERVED_DO eval_argument {pin=1}
eval_expr ::= RESERVED_EVAL eval_argument {pin=1}
private eval_argument ::= parenthesised_expr | block | expr

private variable_declaration ::=
    variable_declaration_global
    | variable_declaration_lexical
    | variable_declaration_local

// @todo attributes support
variable_declaration_local ::= RESERVED_LOCAL [<<mergePackageName>>]  local_variable_declaration_variation {pin=1}
variable_declaration_lexical ::= (RESERVED_MY | RESERVED_STATE) [<<mergePackageName>>] variable_declaration_variation {pin=1}
variable_declaration_global ::= RESERVED_OUR [<<mergePackageName>>] variable_declaration_variation  {pin=1}

private local_variable_declaration_variation ::=
    LEFT_PAREN local_variable_declaration_argument (comma + local_variable_declaration_argument ) * comma * RIGHT_PAREN
    | local_variable_declaration_argument

private local_variable_declaration_argument ::= immutable_expr | lexical_variable_definition_argument

private variable_declaration_variation ::=
    LEFT_PAREN lexical_variable_definition_argument (comma + lexical_variable_definition_argument ) * comma* RIGHT_PAREN
    | lexical_variable_definition_argument

private lexical_variable_definition_argument ::= lexical_variable | RESERVED_UNDEF

/////////////////////////////////// REFERENCES /////////////////////////////////////////////////////////////////////////
// most of the references created by \ operator, but some - don't
private reference_value_expr ::=
    anon_array
    | anon_hash
    | code_ref

anon_array ::= LEFT_BRACKET [expr] RIGHT_BRACKET //{pin=1}
anon_hash ::= LEFT_BRACE [expr] RIGHT_BRACE // fixme pin here after solving problem with code block and prototypes
code_ref ::= RESERVED_SUB block

//////////////////////////// END OF REFERENCES /////////////////////////////////////////////////////////////////////////

// fixme it's not a variable, its variable expression
private variable ::= scalar | array | hash | glob

private array ::=
    array_array_slice              // array slice
    | array_hash_slice              // hash slice
    | array_variable
    | array_constant
    | SIGIL_ARRAY LEFT_BRACE expr RIGHT_BRACE   // scalar dereference

array_array_slice ::= array_variable LEFT_BRACKET expr RIGHT_BRACKET
array_hash_slice ::= array_variable LEFT_BRACE expr RIGHT_BRACE

private hash ::=
    hash_variable                    // hash as is
    | OPERATOR_MOD LEFT_BRACE expr RIGHT_BRACE      // hash dereference w braces

private scalar ::=
    scalar_array_element
    | scalar_hash_element
    | scalar_variable
    | scalar_array_index
    | scalar_constant
    | scalar_anon_array_element
    | undef_expr
    | SIGIL_SCALAR + LEFT_BRACE expr RIGHT_BRACE
    | SIGIL_SCALAR_INDEX SIGIL_SCALAR * ( LEFT_BRACE expr RIGHT_BRACE | scalar_variable )

scalar_array_index ::= SIGIL_SCALAR_INDEX SIGIL_SCALAR * scalar_variable
scalar_array_element ::= scalar_variable LEFT_BRACKET expr RIGHT_BRACKET
scalar_hash_element ::= scalar_variable braced_expr
scalar_anon_array_element ::= LEFT_PAREN expr RIGHT_PAREN LEFT_BRACKET expr RIGHT_BRACKET

private glob ::=
    glob_variable
    | OPERATOR_MUL LEFT_BRACE expr RIGHT_BRACE

private nested_element ::=
    braced_expr
    | LEFT_BRACKET expr RIGHT_BRACKET

// extended nested element for using in ()
private nested_element_expr ::=
    nested_element
    | parenthesised_expr    // function call like $var->()
    | scalar_call
    | sub_call_expr
//    | rightward_call_expr
    | scalar

scalar_call ::= scalar_variable [parenthesised_expr]


///////////////////////////////////// CALLABLE /////////////////////////////////////////////////////////////////////////

private callable ::= method | referencable_method // being used in parseFunctionCall

private referencable_expr ::= referencable_method | scalar_expr
private referencable_method ::= OPERATOR_BITWISE_AND
    (
        method
        | LEFT_BRACE expr RIGHT_BRACE
        | scalar
    )

////////////////////////////////END OF CALLABLE ////////////////////////////////////////////////////////////////////////

label_declaration ::= <<parseLabelDeclaration>> // do we need to change tokentype?
private perl_version ::= NUMBER_VERSION | NUMBER | NUMBER_SIMPLE // fixme convert to version
private perl_handle ::=  LEFT_BRACE scalar_expr RIGHT_BRACE | immutable_expr
perl_handle_expr ::= HANDLE

//////////////////////////////////// constants /////////////////////////////////////////////////////////////////////////

private scalar_constant ::=
    NUMBER
    | NUMBER_VERSION
    | NUMBER_SIMPLE
    | TAG
    | string

private array_constant ::=
    string_list

private string ::= string_sq | string_dq | string_xq | heredoc_opener

private string_quoted ::= QUOTE [STRING_CONTENT] QUOTE
string_dq ::=
    QUOTE_DOUBLE [STRING_CONTENT] QUOTE_DOUBLE
     | RESERVED_QQ string_quoted

string_sq ::=
    QUOTE_SINGLE [STRING_CONTENT] QUOTE_SINGLE
    | RESERVED_Q string_quoted
    | STRING_CONTENT

string_xq ::=
    QUOTE_TICK [STRING_CONTENT] QUOTE_TICK
    | RESERVED_QX string_quoted

heredoc_opener ::= OPERATOR_HEREDOC ( string_xq | string_dq | string_sq | STRING_CONTENT )

string_list ::= RESERVED_QW QUOTE STRING_CONTENT * QUOTE

///////////////////////////////////// variables ////////////////////////////////////////////////////////////////////////
private lexical_variable ::= scalar_variable | array_variable | hash_variable

array_index_variable ::= SIGIL_SCALAR_INDEX variable_body
scalar_variable ::= SIGIL_SCALAR variable_body
array_variable ::= SIGIL_ARRAY variable_body
hash_variable ::= OPERATOR_MOD variable_body
glob_variable ::= OPERATOR_MUL variable_body [braced_expr]

private braced_expr ::= braced_string | LEFT_BRACE expr RIGHT_BRACE
braced_string ::= <<parseBracedString>>

private variable_body ::= <<parseVariableName>>

private comma ::= OPERATOR_COMMA | OPERATOR_COMMA_ARROW
method ::= <<parseMethod>>

/******************************************** PERL SUBS ANNOTATIONS ***************************************************/
private annotations ::= annotation+
annotation ::=
    annotation_unknown
    | annotation_abstract
    | annotation_deprectaed
    | annotation_method
    | annotation_returns_ref
    | annotation_returns_arrayref
    | annotation_returns_hashref
    | annotation_override
    | annotation_incomplete

annotation_unknown ::= ANNOTATION_PREFIX ANNOTATION_UNKNOWN_KEY
annotation_abstract ::= ANNOTATION_PREFIX ANNOTATION_ABSTRACT_KEY
annotation_deprectaed ::= ANNOTATION_PREFIX ANNOTATION_DEPRECATED_KEY
annotation_method ::= ANNOTATION_PREFIX ANNOTATION_METHOD_KEY
annotation_override ::= ANNOTATION_PREFIX ANNOTATION_OVERRIDE_KEY
annotation_returns_ref ::= ANNOTATION_PREFIX ANNOTATION_RETURNS_KEY <<mergePackageName>>
annotation_returns_arrayref ::= ANNOTATION_PREFIX ANNOTATION_RETURNS_KEY namespace_element_bracketed
annotation_returns_hashref ::= ANNOTATION_PREFIX ANNOTATION_RETURNS_KEY namespace_element_braced
annotation_incomplete ::= ANNOTATION_PREFIX

private namespace_element_bracketed ::= LEFT_BRACKET <<mergePackageName>> RIGHT_BRACKET {name="[Package::Name]"}
private namespace_element_braced ::= LEFT_BRACE <<mergePackageName>> RIGHT_BRACE {name="{Package::Name}"}

/******************************************** PERL SUBS ANNOTATIONS ***************************************************/
private namespace_canonical ::= <<convertPackageIdentifier>>
