/*
Copyright 2015 Alexandr Evstigneev

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
{
  parserClass="com.perl5.lang.perl.parser.PerlParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

//  generate=[tokens="yes" psi="yes" tokenAccessors="yes"]

  psiClassPrefix="PsiPerl"
  psiImplClassSuffix="Impl"
  psiPackage="com.perl5.lang.perl.psi"
  psiImplPackage="com.perl5.lang.perl.psi.impl"

  elementTypeHolderClass="com.perl5.lang.perl.lexer.PerlElementTypes"
  elementTypeClass="com.perl5.lang.perl.PerlElementType"
  tokenTypeClass="com.perl5.lang.perl.PerlTokenType"

  parserUtilClass="com.perl5.lang.perl.parser.PerlParserUitl"
  psiImplUtilClass="com.perl5.lang.perl.psi.utils.PerlPsiImplUtil"

  //elementTypeFactory="com.perl5.lang.perl.psi.PerlElementFactory.getCompositeType"
//  tokenTypeFactory="com.perl5.lang.perl.psi.PerlElementFactory.getCompositeType"

  tokens=[
    PERL_COMMENT="PERL_COMMENT"
    PERL_COMMENT_BLOCK="PERL_COMMENT_BLOCK"
    PERL_POD="PERL_POD"

    PERL_SUB_PROTOTYPE_TOKEN="PERL_SUB_PROTOTYPE_TOKEN"

    PERL_SIGIL_ARRAY="SIGIL_ARRAY"
    PERL_SIGIL_HASH="SIGIL_HASH"
    PERL_SIGIL_SCALAR="SIGIL_SCALAR"
    PERL_SIGIL_SCALAR_INDEX="SIGIL_SCALAR_INDEX"
    PERL_SIGIL_GLOB = "SIGIL_GLOB"
    PERL_SIGIL_CODE = "SIGIL_CODE"

    ANNOTATION_PREFIX="ANNOTATION_PREFIX"

    ANNOTATION_UNKNOWN_KEY="ANNOTATION_UNKNOWN"
    ANNOTATION_DEPRECATED_KEY="ANNOTATION_DEPRECATED"
    ANNOTATION_RETURNS_KEY="ANNOTATION_RETURNS"
    ANNOTATION_OVERRIDE_KEY="ANNOTATION_OVERRIDE"
    ANNOTATION_METHOD_KEY="ANNOTATION_METHOD"
    ANNOTATION_ABSTRACT_KEY="ANNOTATION_ABSTRACT"

    PERL_VARIABLE_NAME="PERL_VARIABLE_NAME"


    PERL_HEREDOC="PERL_HEREDOC" // should be string content too
    PERL_HEREDOC_END="PERL_HEREDOC_END"

    PERL_VERSION="PERL_VERSION"
    PERL_NUMBER_VERSION="PERL_NUMBER_VERSION"
    PERL_NUMBER="PERL_NUMBER"

    PERL_RESERVED="PERL_RESERVED"

    RESERVED_IF="if"
    RESERVED_UNLESS="unless"
    RESERVED_ELSIF="elsif"
    RESERVED_ELSE="else"
    RESERVED_GIVEN="given"
    RESERVED_WHILE="while"
    RESERVED_UNTIL="until"
    RESERVED_FOR="for"
    RESERVED_FOREACH="foreach"
    RESERVED_CONTINUE="continue"

    RESERVED_SUB="sub"
    RESERVED_PACKAGE="package"
    RESERVED_USE="use"
    RESERVED_NO="no"
    RESERVED_REQUIRE="require"

    RESERVED_PRINT="print"
    RESERVED_PRINTF="printf"
    RESERVED_SAY="say"

    RESERVED_UNDEF="undef"

    RESERVED_QW="qw"

    RESERVED_QQ="qq"
    RESERVED_Q="q"
    RESERVED_QX="qx"

    RESERVED_TR="tr"
    RESERVED_Y="y"

    RESERVED_S="s"
    RESERVED_QR="qr"
    RESERVED_M="m"

    RESERVED_MY="my"
    RESERVED_OUR="our"
    RESERVED_STATE="state"
    RESERVED_LOCAL="local"

    RESERVED_DO="do"
    RESERVED_EVAL="eval"

    RESERVED_GOTO="goto"
    RESERVED_REDO="redo"
    RESERVED_NEXT="next"
    RESERVED_LAST="last"

    PERL_OPERATOR="PERL_OPERATOR"
    PERL_OPERATOR_NOT="not"
    PERL_OPERATOR_X="x"
    PERL_OPERATOR_DIV="/"
    PERL_OPERATOR_MUL="*"
    PERL_OPERATOR_AMP="&"
    PERL_OPERATOR_MOD="%"

    PERL_OPERATOR_UNARY="PERL_OPERATOR_UNARY"
    PERL_OPERATOR_FILETEST="PERL_OPERATOR_FILETEST"

    PERL_REGEX_QUOTE_OPEN="PERL_REGEX_QUOTE_OPEN"
    PERL_REGEX_QUOTE_CLOSE="PERL_REGEX_QUOTE_CLOSE"
    PERL_REGEX_MODIFIER="PERL_REGEX_MODIFIER"
    PERL_REGEX_TOKEN="PERL_REGEX_TOKEN"

//    PERL_STRING="PERL_STRING"
    PERL_STRING_CONTENT="PERL_STRING_CONTENT"

    PERL_TAG="PERL_TAG"

    PERL_COMMA=','
    PERL_ARROW_COMMA='=>'
    PERL_DEREFERENCE='->'
    PERL_COLON=":"
    PERL_LBRACK='['
    PERL_RBRACK=']'
    PERL_LPAREN="("
    PERL_RPAREN=")"
    PERL_LBRACE='{'
    PERL_RBRACE='}'
    PERL_LANGLE='<'
    PERL_RANGLE='>'
    PERL_SEMI=';';
    PERL_QUOTE="\""

    // custom tokens
    PERL_SUB="PERL_SUB"
    PERL_SUB_ATTRIBUTE="PERL_SUB_ATTRIBUTE"

    PERL_PACKAGE="PERL_PACKAGE"

    PERL_HANDLE="PERL_HANDLE"
    PERL_HANDLE_BUILT_IN="PERL_HANDLE_BUILT_IN"
    PERL_BLOCK_NAME="PERL_BLOCK_NAME"
    PERL_LABEL="PERL_LABEL"

    // inline HTML support
    TEMPLATE_BLOCK_HTML="TEMPLATE_BLOCK_HTML"
    EMBED_MARKER="EMBED_MARKER"

//    TEMPLATE_BLOCK_SQL="TEMPLATE_BLOCK_SQL"
  ]

    extends(".*expr")=expr
    name(".*expr")="expression"

    extends("string_sq|string_dq|string_xq|heredoc_opener")=term_expr

    extends("annotation_.*")=annotation
    implements("annotation_returns.*")="com.perl5.lang.perl.psi.properties.PerlNamespaceElementContainer"
    methods("annotation_returns.*")=[getNamespaceElement]

    mixin("use_statement")="com.perl5.lang.perl.psi.mixins.PerlUseStatementImplMixin"
    implements("use_statement")="com.perl5.lang.perl.psi.PerlUseStatement"

    extends("use_statement|no_statement|condition_statement|for_list_statement|for_iterator_statement")=statement

    implements("conditional_block|block|block_compound|if_compound|unless_compound|given_compound|while_compound|until_compound|for_compound|foreach_compound|namespace_block")="com.perl5.lang.perl.psi.properties.PerlLexicalScope";
    mixin("conditional_block|block|block_compound|if_compound|unless_compound|given_compound|while_compound|until_compound|for_compound|foreach_compound|namespace_block")="com.perl5.lang.perl.psi.mixins.PerlLexicalScopeMemberMixin"

    implements("deref_expr")="com.perl5.lang.perl.psi.PerlDerefExpression"
    mixin("deref_expr")="com.perl5.lang.perl.psi.mixins.PerlDerefExpressionMixin"

    implements("variable_declaration_lexical|variable_declaration_local|variable_declaration_global")="com.perl5.lang.perl.psi.PerlVariableDeclaration"
    mixin("variable_declaration_lexical|variable_declaration_local|variable_declaration_global")="com.perl5.lang.perl.psi.mixins.PerlVariableDeclarationMixin"

    elementTypeFactory("scalar_variable|array_variable|hash_variable|glob_variable|array_index_variable")="com.perl5.lang.perl.parser.PerlElementTypeFactory.factory"
    stubClass("scalar_variable|array_variable|hash_variable|array_index_variable")="com.perl5.lang.perl.idea.stubs.variables.PerlVariableStub"

    mixin("scalar_variable|array_variable|hash_variable|array_index_variable")="com.perl5.lang.perl.psi.mixins.PerlVariableImplMixin"
    implements("scalar_variable|array_variable|hash_variable|array_index_variable")="com.perl5.lang.perl.psi.PerlVariable"

    elementTypeFactory("sub_declaration|sub_definition|namespace_definition")="com.perl5.lang.perl.parser.PerlElementTypeFactory.factory"

    stubClass("namespace_definition")="com.perl5.lang.perl.idea.stubs.namespaces.PerlNamespaceDefinitionStub"
    mixin("namespace_definition")="com.perl5.lang.perl.psi.mixins.PerlNamespaceDefinitionImplMixin"
    implements("namespace_definition")="com.perl5.lang.perl.psi.PerlNamespaceDefinition"

    stubClass("sub_definition")="com.perl5.lang.perl.idea.stubs.subsdefinitions.PerlSubDefinitionStub"
    mixin("sub_definition")="com.perl5.lang.perl.psi.mixins.PerlSubDefinitionImplMixin"
    implements("sub_definition")="com.perl5.lang.perl.psi.PerlSubDefinition"

    stubClass("sub_declaration")="com.perl5.lang.perl.idea.stubs.subsdeclarations.PerlSubDeclarationStub"
    mixin("sub_declaration")="com.perl5.lang.perl.psi.mixins.PerlSubDeclarationImplMixin"
    implements("sub_declaration")="com.perl5.lang.perl.psi.PerlSubDeclaration"

    stubClass("glob_variable")="com.perl5.lang.perl.idea.stubs.globs.PerlGlobStub"
    mixin("glob_variable")="com.perl5.lang.perl.psi.mixins.PerlGlobVariableImplMixin"
    implements("glob_variable")="com.perl5.lang.perl.psi.PerlGlobVariable"

    mixin("require_expr")="com.perl5.lang.perl.psi.mixins.PerlRequireExprImplMixin"
    implements("require_expr")="com.perl5.lang.perl.psi.PerlRequireExpr"

    mixin("method")="com.perl5.lang.perl.psi.mixins.PerlMethodImplMixin";
    implements("method")="com.perl5.lang.perl.psi.PerlMethod";
 }

///////////////////////////// main code structure //////////////////////////////////////////////////////////////////////
root ::= file_item *

private file_item ::= !<<eof>> {PERL_SEMI | namespace_block | namespace_item} //{pin=1 }

namespace_block ::= namespace_definition (block | PERL_SEMI namespace_content)
namespace_definition ::= RESERVED_PACKAGE namespace_element [perl_version] {pin=1 recoverWhile=recover_namespace_definition}
private recover_namespace_definition ::= !(PERL_SEMI | PERL_LBRACE)
namespace_content ::= namespace_item *  {extends=block recoverWhile=recover_namespace}

// todo count opening braces
private recover_namespace ::= !( RESERVED_PACKAGE | PERL_RBRACE )

block ::= PERL_LBRACE block_content PERL_RBRACE {pin=1}
private block_content ::= file_item * {recoverWhile=recover_block}
private recover_block ::= !(PERL_RBRACE)

private namespace_item ::=
    compound_statement [PERL_SEMI+]
    | statement
    | annotation

private compound_statement ::=
    sub_definition
    | named_block
    | labelable_compound_statment

named_block ::= PERL_BLOCK_NAME block

// fixme we can't pin this because we need to distinct declaration and definition
sub_definition ::= [annotations] RESERVED_SUB canonical_sub_name [sub_definition_parameters] block

private sub_definition_parameters ::=
    sub_prototype [sub_attributes]
    | sub_attributes [sub_signature]
    | sub_signature


private labelable_compound_statment ::=
    [label_declaration] (
        block_compound
        | if_compound
        | unless_compound
        | given_compound
        | while_compound
        | until_compound
        | for_compound
        | foreach_compound
     )

if_compound ::= RESERVED_IF conditional_block if_compound_elsif * [if_compound_else]  {pin=1}
unless_compound ::= RESERVED_UNLESS conditional_block if_compound_elsif * [if_compound_else]  {pin=1}
private if_compound_elsif ::= RESERVED_ELSIF conditional_block  {pin=1}
private if_compound_else  ::= RESERVED_ELSE unconditional_block {pin=1}
unconditional_block ::= block

conditional_block ::= condition_statement block {pin=1 name="Conditional block"}
condition_statement ::= PERL_LPAREN condition_statement_expr PERL_RPAREN {pin=1 recoverWhile=recover_to_block name="Condition"}
private condition_statement_expr ::= expr {recoverWhile=recover_condition_statement_expr}
private recover_condition_statement_expr ::= !(PERL_LBRACE|PERL_RPAREN)
private recover_to_block ::= !(PERL_LBRACE)

given_compound ::= RESERVED_GIVEN conditional_block  {pin=1}

while_compound ::= RESERVED_WHILE conditional_block [continue_block]  {pin=1}
until_compound ::= RESERVED_UNTIL conditional_block [continue_block]  {pin=1}

continue_block ::= RESERVED_CONTINUE block {pin=1}

private block_compound ::= block [continue_block]


// for/foreach
// fixme why the heck there is no parsing error on "for" and there is a error on "use", both pinned
for_compound ::= RESERVED_FOR for_arguments {pin=1}
foreach_compound ::= RESERVED_FOREACH for_arguments  {pin=1}
private for_arguments ::=
    for_iterator block
    | for_list_statement block_compound

for_iterator ::= PERL_LPAREN [for_iterator_statement]  PERL_SEMI [for_iterator_statement] PERL_SEMI [for_iterator_statement] PERL_RPAREN {pin=3}
for_iterator_statement ::= expr {recoverWhile=recover_parenthesised}

// @todo only single variable or variable definition may be here
for_list_statement ::= [ variable_declaration | variable ] for_list_epxr
for_list_epxr ::= PERL_LPAREN for_list_expr_content PERL_RPAREN {pin=1}
private for_list_expr_content ::= list_expr {recoverWhile=recover_parenthesised}


statement ::= statement_body <<statementSemi>>
private statement_body ::=
    use_statement
    | no_statement
    | sub_declaration
    | normal_statement
    {recoverWhile=recover_statement}

private normal_statement ::= [label_declaration] expr [statement_modifier] {pin=2}

sub_declaration ::= [annotations] RESERVED_SUB canonical_sub_name sub_declaration_parameters

private canonical_sub_name ::= [namespace_element] sub_name_element

private sub_declaration_parameters ::=  [sub_prototype] [sub_attributes]

// todo implement parsing
private sub_prototype ::= PERL_LPAREN [sub_prototype_content] PERL_RPAREN {pin=1 recoverWhile=recover_sub_prototype}
private recover_sub_prototype ::= !(":" | PERL_LBRACE | PERL_SEMI)
private sub_prototype_content ::= <<parseSubPrototype>> {recoverWhile=recover_sub_prototype_content}
private recover_sub_prototype_content ::= !(PERL_RPAREN | ":" | PERL_LBRACE | PERL_SEMI)

private sub_signature ::= PERL_LPAREN [sub_signature_content] PERL_RPAREN {pin=1 recoverWhile=recover_sub_signature}
private recover_sub_signature ::= !(PERL_LBRACE | PERL_SEMI)
private sub_signature_content ::= <<parseSubSignature>> {recoverWhile=recover_sub_signature_content}
private recover_sub_signature_content ::= !(PERL_RPAREN | ":" | PERL_LBRACE | PERL_SEMI)

private sub_attributes ::= ":" <<parseSubAttributes>> {pin=1 recoverWhile=recover_sub_attributes}
recover_sub_attributes ::= !(PERL_LPAREN| PERL_SEMI| PERL_LBRACE)

last_expr ::= RESERVED_LAST [lnr_param] {pin=1}
next_expr ::= RESERVED_NEXT [lnr_param] {pin=1}
redo_expr ::= RESERVED_REDO [lnr_param] {pin=1}
goto_expr ::= RESERVED_GOTO [goto_param] {pin=1}
private lnr_param ::= PERL_LABEL | expr // fixme scalar_expr ?
private goto_param ::= PERL_LABEL | PERL_SIGIL_CODE PERL_SUB | expr // fixme same, scalar expr?

private statement_modifier ::=
    if_statement_modifier
    | unless_statement_modifier
    | while_statement_modifier
    | until_statement_modifier
    | for_statement_modifier
    | foreach_statement_modifier
    | when_statement_modifier

if_statement_modifier ::= RESERVED_IF expr {pin=1 name="Postfix if"}
unless_statement_modifier ::=  RESERVED_UNLESS expr {pin=1 name="Postfix unless"}
while_statement_modifier ::=  RESERVED_WHILE expr {pin=1 name="Postfix while"}
until_statement_modifier ::=  RESERVED_UNTIL expr {pin=1 name="Postfix until"}
for_statement_modifier ::=  RESERVED_FOR expr  {pin=1 name="Postfix for"}
foreach_statement_modifier ::=  RESERVED_FOREACH expr {pin=1 name="Postfix foreach"}
when_statement_modifier ::= RESERVED_WHEN expr {pin=1 name="Postfix when"}

use_statement ::= RESERVED_USE use_no_parameters {pin=1}
no_statement ::= RESERVED_NO use_no_parameters {pin=1}

private use_no_parameters ::= use_module_parameters | use_version_parameters
private use_module_parameters ::= namespace_element [perl_version] [expr];
private use_version_parameters ::= perl_version;

undef_expr ::= RESERVED_UNDEF (variable | PERL_LPAREN variable PERL_RPAREN) ? {pin=1}
require_expr ::= RESERVED_REQUIRE (namespace_element | perl_version | unary_expr)  {pin=1}// multiline string is possible too

private recover_statement ::= !(PERL_SEMI | PERL_RBRACE | PERL_REGEX_QUOTE_CLOSE)

// expression
expr ::=
    lp_or_xor_expr
    | lp_and_expr
    | lp_not_expr
    | comma_expr
    | assign_expr
    | trenar_expr
    | flipflop_expr
    | or_expr
    | and_expr
    | bitwise_or_xor_expr
    | bitwise_and_expr
    | equal_expr
    | compare_expr
    | op_10_expr
    | shift_expr
    | add_expr
    | mul_expr
    | regex_expr
    | op_5_expr
    | pow_expr
    | op_3_expr
    | deref_expr
    | term_expr


term_expr ::=
    variable_declaration
    | parenthesised_expr ["[" expr "]"]
    | scalar_constant
    | do_expr
    | sub_expr
    | eval_expr
    | regex_term
    | file_read_expr
    | print_expr
    | open_expr
    | close_expr
    | grep_expr
    | sort_expr
    | map_expr
    | require_expr
    | undef_expr
    | last_expr
    | next_expr
    | goto_expr
    | return_expr
    | redo_expr
    | PERL_OPERATOR_UNARY parenthesised_expr !"["   // named operators as functions
    | function_call_expr
    | rightward_call_expr
    | reference_value_expr
    | variable_expr
    | namespace_expr

variable_expr ::= array_index_variable | variable
namespace_expr ::= namespace_element
parenthesised_expr ::= PERL_LPAREN [parenthesised_expr_content] PERL_RPAREN {pin=1 name="Parenthesised expression"}
private parenthesised_expr_content ::= expr {recoverWhile=recover_parenthesised}
private recover_parenthesised ::= !(PERL_RPAREN | PERL_LBRACE | PERL_RBRACE | PERL_SEMI )

return_expr ::= "return" [list_expr] {pin=1}

deref_expr ::= expr (<<parseArrowSmart>> nested_element_expr) +
private immutable_expression ::= <<parseExpressionLevel 20>>

private op_3_expr ::= pref_pp_expr | suff_pp_expr
pref_pp_expr ::= ('++'|'--') expr
suff_pp_expr ::= expr ('++'|'--')

pow_expr ::= expr ('**' expr)+ { rightAssociative=true }

private op_5_expr ::= ref_expr  | prefix_unary_expr
ref_expr ::= '\' referencable_expr { rightAssociative=true }
prefix_unary_expr ::=  ('~'| '!'| '+' | '-') expr { rightAssociative=true }

regex_expr ::= expr ('=~'|'!~') expr

mul_expr ::= expr (PERL_OPERATOR_MUL|PERL_OPERATOR_DIV|PERL_OPERATOR_MOD|PERL_OPERATOR_X) expr
add_expr ::= expr ('+'|'-'|'.') expr
shift_expr ::= expr ('<<'|'>>') expr

private op_10_expr ::= named_unary_expr | filetest_expr
named_unary_expr ::= named_undry_expr_defined | named_unary_expr_normal
private named_undry_expr_defined ::= 'defined' !PERL_LPAREN [unary_expr]
private named_unary_expr_normal ::= PERL_OPERATOR_UNARY !PERL_LPAREN unary_expr

private unary_expr ::= <<parseExpressionLevel 13>>

filetest_expr ::= PERL_OPERATOR_FILETEST [(perl_handle | expr )]

compare_expr ::= expr ('>='|'<='|'<'|'>'|'lt'|'gt'|'le'|'ge') expr
equal_expr ::= expr ('=='|'!='|'<=>'|'eq'|'ne'|'cmp'|'~~') expr
bitwise_and_expr ::= expr PERL_OPERATOR_AMP expr
bitwise_or_xor_expr ::= expr ('|'|'^') expr
and_expr ::= expr '&&' expr
or_expr ::= expr ('||'|'//') expr
flipflop_expr ::= expr ('..'|'...') expr
trenar_expr ::= expr '?' scalar_expr ':' scalar_expr { rightAssociative=true }
assign_expr ::= expr ('=' | '**='|'+='|'-='| '*='|'/='|'x='| '&='|'|='|'.='| '<<='|'>>='|'%='| '&&='|'||='|'^='| '//=') expr { rightAssociative=true }

private comma_expr ::= comma_sequence_expr | comma_last_expr
comma_last_expr ::= expr comma
comma_sequence_expr ::= expr (comma_any expr) +
private comma_any ::= comma + !(PERL_RPAREN|"]"|"}")

lp_not_expr ::= PERL_OPERATOR_NOT expr { rightAssociative=true }
lp_and_expr ::= expr 'and' expr
lp_or_xor_expr ::= expr ('or'|'xor') expr

private scalar_expr ::= <<parseExpressionLevel 3>>
private list_expr ::= <<parseExpressionLevel 2>>

print_expr ::= (RESERVED_PRINT|RESERVED_PRINTF|RESERVED_SAY) ( PERL_LPAREN [print_arguments] PERL_RPAREN | [print_arguments] ) // {pin=1}
private print_arguments ::= perl_handle expr | expr

open_expr ::= "open" ( PERL_LPAREN open_arguments PERL_RPAREN | open_arguments )
private open_arguments ::=
    open_handle comma open_mode comma open_ref  // open FILEHANDLE,MODE,REFERENCE
    | open_handle comma open_mode comma expr    // open FILEHANDLE,MODE,EXPR,LIST ?
    | open_handle [comma expr]                // open FILEHANDLE, EXPR ?

open_handle ::= variable_declaration | perl_handle
open_mode ::= scalar_expr
open_ref ::= ref_expr

close_expr ::= "close" ( PERL_LPAREN close_arguments PERL_RPAREN | close_arguments ) {pin=1}
private close_arguments ::= perl_handle

sort_expr ::= 'sort' ( PERL_LPAREN sort_op_arguments PERL_RPAREN| sort_op_arguments ) {pin=1}
private sort_op_arguments ::=
    sub_name_element expr
    | block expr
    | scalar_expr expr
    | expr

sub_expr ::= RESERVED_SUB sub_definition_parameters block  // fixme make sure that this one checked after definition and declaration

grep_expr ::= 'grep' grep_map_arguments {pin=1}
map_expr ::= 'map' grep_map_arguments {pin=1}
private grep_map_arguments ::=
    PERL_LPAREN grep_map_arguments_variations PERL_RPAREN
    | grep_map_arguments_variations

private grep_map_arguments_variations ::=
    block expr
    | scalar_expr comma expr

function_call_expr ::= callable PERL_LPAREN [call_arguments] PERL_RPAREN !"["  // avoiding ()[]
rightward_call_expr ::= callable [call_arguments]

call_arguments ::=
    anon_hash comma list_expr
    | block [[comma] list_expr]
    | list_expr

file_read_expr ::= '<' [perl_handle] '>'

////////////////////////// regular expressions /////////////////////////////////////////////////////////////////////////
private regex_term ::=
    compile_regex
    | replacement_regex
    | tr_regex
    | match_regex

// pinning quotes leads to bug with replacement block
compile_regex ::= RESERVED_QR match_regex_body
match_regex ::= [RESERVED_M] match_regex_body
private match_regex_body ::= PERL_REGEX_QUOTE_OPEN [perl_regex] PERL_REGEX_QUOTE_CLOSE [perl_regex_modifiers]
replacement_regex ::= RESERVED_S PERL_REGEX_QUOTE_OPEN [perl_regex] PERL_REGEX_QUOTE_CLOSE [PERL_REGEX_QUOTE_OPEN] [perl_regex | regex_code] PERL_REGEX_QUOTE_CLOSE [perl_regex_modifiers]
private regex_code ::= file_item+ {recoverWhile=recover_regex_code}
private recover_regex_code ::= !(PERL_REGEX_QUOTE_CLOSE)

perl_regex_modifiers ::= PERL_REGEX_MODIFIER +
perl_regex ::= PERL_REGEX_TOKEN + // here we should make a trick

tr_regex ::= (RESERVED_TR|RESERVED_Y) PERL_REGEX_QUOTE_OPEN tr_searchlist PERL_REGEX_QUOTE_CLOSE [PERL_REGEX_QUOTE_OPEN] tr_replacementlist PERL_REGEX_QUOTE_CLOSE [tr_modifiers] {pin=1}
tr_searchlist ::= PERL_STRING_CONTENT
tr_replacementlist ::= PERL_STRING_CONTENT

tr_modifiers ::= PERL_REGEX_MODIFIER +
////////////////////////// end of regular expressions //////////////////////////////////////////////////////////////////

do_expr ::= RESERVED_DO eval_argument {pin=1}
eval_expr ::= RESERVED_EVAL eval_argument {pin=1}
private eval_argument ::= parenthesised_expr | block | expr

private variable_declaration ::=
    variable_declaration_global
    | variable_declaration_lexical
    | variable_declaration_local

// @todo attributes support
variable_declaration_local ::= RESERVED_LOCAL [namespace_element]  local_variable_declaration_variation {pin=1}
variable_declaration_lexical ::= (RESERVED_MY | RESERVED_STATE) [namespace_element] variable_declaration_variation {pin=1}
variable_declaration_global ::= RESERVED_OUR [namespace_element] variable_declaration_variation  {pin=1}

private local_variable_declaration_variation ::=
    PERL_LPAREN local_variable_declaration_argument (comma + local_variable_declaration_argument ) * comma * PERL_RPAREN
    | local_variable_declaration_argument



private local_variable_declaration_argument ::= immutable_expression | lexical_variable_definition_argument

private variable_declaration_variation ::=
    PERL_LPAREN lexical_variable_definition_argument (comma + lexical_variable_definition_argument ) * comma* PERL_RPAREN
    | lexical_variable_definition_argument

private lexical_variable_definition_argument ::= lexical_variable | RESERVED_UNDEF

/////////////////////////////////// REFERENCES /////////////////////////////////////////////////////////////////////////
// most of the references created by \ operator, but some - don't
private reference_value_expr ::=
    anon_array
    | anon_hash
    | code_ref

anon_array ::= '[' [expr] ']' //{pin=1}
anon_hash ::= '{' [expr] '}' // fixme pin here after solving problem with code block and prototypes
code_ref ::= RESERVED_SUB block

//////////////////////////// END OF REFERENCES /////////////////////////////////////////////////////////////////////////

// fixme it's not a variable, its variable expression
private variable ::= scalar | array | hash | glob

private array ::=
    PERL_SIGIL_ARRAY '{' expr '}'   // scalar dereference
    | array_array_slice              // array slice
    | array_hash_slice              // hash slice
    | array_variable
    | array_constant

array_array_slice ::= array_variable '[' expr ']'
array_hash_slice ::= array_variable '{' expr '}'

private hash ::=
    PERL_SIGIL_HASH '{' expr '}'      // hash dereference w braces
    | hash_variable                    // hash as is

private scalar ::=
    PERL_SIGIL_SCALAR + "{" expr "}"
    | scalar_array_element
    | scalar_hash_element
    | scalar_variable
    | scalar_array_index
    | scalar_constant
    | scalar_anon_array_element
    | undef_expr
    | PERL_SIGIL_SCALAR_INDEX PERL_SIGIL_SCALAR * ( '{' expr '}' | scalar_variable )
    | perl_handle_basic

scalar_array_index ::= PERL_SIGIL_SCALAR_INDEX PERL_SIGIL_SCALAR * scalar_variable
scalar_array_element ::= scalar_variable "[" expr "]"
scalar_hash_element ::= scalar_variable ( "{" expr "}" | braced_string )
scalar_anon_array_element ::= PERL_LPAREN expr PERL_RPAREN "["expr"]"

private glob ::=
    PERL_SIGIL_GLOB "{" expr "}"     // @todo we need to colorize this as glob
    | glob_variable                    // hash as is

private nested_element ::=
    braced_string
    | "{" expr "}"
    | "[" expr "]"

// extended nested element for using in ()
private nested_element_expr ::=
    nested_element
    | parenthesised_expr    // function call like $var->()
    | scalar_call
    | function_call_expr
    | rightward_call_expr
    | scalar

scalar_call ::= scalar_variable [parenthesised_expr]


///////////////////////////////////// CALLABLE /////////////////////////////////////////////////////////////////////////

private callable ::= method | referencable_method

private referencable_expr ::= referencable_method | scalar_expr
private referencable_method ::= PERL_SIGIL_CODE
    (
        method
        | "{"method"}"
        | "{"expr"}"
        | scalar
    )

////////////////////////////////END OF CALLABLE ////////////////////////////////////////////////////////////////////////

label_declaration ::= PERL_LABEL ":" // do we need to change tokentype?
private perl_version ::= PERL_NUMBER_VERSION | PERL_NUMBER
private perl_handle ::=  perl_handle_basic | "{" scalar_expr "}" | <<parseExpressionLevel 21>>
private perl_handle_basic ::= PERL_HANDLE | PERL_HANDLE_BUILT_IN

//////////////////////////////////// constants /////////////////////////////////////////////////////////////////////////

private scalar_constant ::=
    PERL_NUMBER
    | PERL_NUMBER_VERSION
    | PERL_TAG  // __PACKAGE__ etc.
    | string

braced_string ::= "{" PERL_STRING_CONTENT "}"

private array_constant ::=
    string_list

private string ::= string_sq | string_dq | string_xq | heredoc_opener

private string_quoted ::= PERL_QUOTE [PERL_STRING_CONTENT] PERL_QUOTE
string_dq ::=
    "\"" [PERL_STRING_CONTENT] "\""
     | RESERVED_QQ string_quoted

string_sq ::=
    "'" [PERL_STRING_CONTENT] "'"
    | RESERVED_Q string_quoted
    | PERL_STRING_CONTENT

string_xq ::=
    "`" [PERL_STRING_CONTENT] "`"
    | RESERVED_QX string_quoted

heredoc_opener ::= '<<' ( string_xq | string_dq | string_sq | PERL_STRING_CONTENT )

string_list ::= RESERVED_QW PERL_QUOTE PERL_STRING_CONTENT * PERL_QUOTE

///////////////////////////////////// variables ////////////////////////////////////////////////////////////////////////
private lexical_variable ::= scalar_variable | array_variable | hash_variable

array_index_variable ::= PERL_SIGIL_SCALAR_INDEX [scalar_sigils] variable_body

scalar_variable ::= PERL_SIGIL_SCALAR [scalar_sigils] variable_body

array_variable ::= PERL_SIGIL_ARRAY [scalar_sigils] variable_body

hash_variable ::= PERL_SIGIL_HASH [scalar_sigils] variable_body

scalar_sigils ::= PERL_SIGIL_SCALAR+

glob_variable ::= PERL_SIGIL_GLOB glob_name [glob_slot_part]
private glob_slot_part ::= PERL_LBRACE glob_slot PERL_RBRACE {pin=1}
private glob_name ::= variable_body | scalar_variable
glob_slot ::=
    "SCALAR"
    | "ARRAY"
    | "HASH"
    | "CODE"
    | "IO"
    | "GLOB"
    | "FORMAT"
    | "NAME"
    | "PACKAGE"
    | expr


private variable_body ::=
    variable_body_braced
    | variable_body_canonical
    | variable_body_namespace_braced
    | variable_body_namespace

private variable_body_namespace_braced ::= PERL_LBRACE namespace_element PERL_RBRACE {pin=2}
private variable_body_namespace ::= namespace_element
private variable_body_braced ::= PERL_LBRACE [namespace_element] variable_name_element PERL_RBRACE {pin=3}
private variable_body_canonical ::= [namespace_element] variable_name_element {pin=2}

private variable_name_element ::= PERL_VARIABLE_NAME

private comma ::= PERL_COMMA | PERL_ARROW_COMMA
method ::=
    namespace_element sub_name_element         // package::method
    | sub_name_element [namespace_element &PERL_LPAREN]       // method package

private sub_name_element ::= PERL_SUB

/******************************************** PERL SUBS ANNOTATIONS ***************************************************/
private annotations ::= annotation+
annotation ::=
    annotation_unknown
    | annotation_abstract
    | annotation_deprectaed
    | annotation_method
    | annotation_returns_ref
    | annotation_returns_arrayref
    | annotation_returns_hashref
    | annotation_override
    | annotation_incomplete

annotation_unknown ::= ANNOTATION_PREFIX ANNOTATION_UNKNOWN_KEY
annotation_abstract ::= ANNOTATION_PREFIX ANNOTATION_ABSTRACT_KEY
annotation_deprectaed ::= ANNOTATION_PREFIX ANNOTATION_DEPRECATED_KEY
annotation_method ::= ANNOTATION_PREFIX ANNOTATION_METHOD_KEY
annotation_override ::= ANNOTATION_PREFIX ANNOTATION_OVERRIDE_KEY
annotation_returns_ref ::= ANNOTATION_PREFIX ANNOTATION_RETURNS_KEY namespace_element
annotation_returns_arrayref ::= ANNOTATION_PREFIX ANNOTATION_RETURNS_KEY namespace_element_bracketed
annotation_returns_hashref ::= ANNOTATION_PREFIX ANNOTATION_RETURNS_KEY namespace_element_braced
annotation_incomplete ::= ANNOTATION_PREFIX

private namespace_element_bracketed ::= PERL_LBRACK namespace_element PERL_RBRACK {name="[Package::Name]"}
private namespace_element_braced ::= PERL_LBRACE namespace_element PERL_RBRACE {name="{Package::Name}"}

/******************************************** PERL SUBS ANNOTATIONS ***************************************************/
private namespace_element ::= PERL_PACKAGE {name="Package::Name"}
