/*
Copyright 2015 Alexandr Evstigneev

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
{
  parserClass="com.perl5.lang.perl.parser.PerlParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

//  generate=[tokens="yes" psi="yes" tokenAccessors="yes"]

  psiClassPrefix="PsiPerl"
  psiImplClassSuffix="Impl"
  psiPackage="com.perl5.lang.perl.psi"
  psiImplPackage="com.perl5.lang.perl.psi.impl"

  elementTypeHolderClass="com.perl5.lang.perl.lexer.PerlElementTypes"
  elementTypeClass="com.perl5.lang.perl.PerlElementType"
  tokenTypeClass="com.perl5.lang.perl.PerlTokenType"

  parserUtilClass="com.perl5.lang.perl.parser.PerlParserUitl"
  psiImplUtilClass="com.perl5.lang.perl.psi.utils.PerlPsiImplUtil"

  //elementTypeFactory="com.perl5.lang.perl.psi.PerlElementFactory.getCompositeType"
//  tokenTypeFactory="com.perl5.lang.perl.psi.PerlElementFactory.getCompositeType"

  tokens=[
    PERL_COMMENT="PERL_COMMENT"
    PERL_COMMENT_BLOCK="PERL_COMMENT_BLOCK"
    PERL_POD="PERL_POD"

    PERL_SUB_PROTOTYPE_TOKEN="PERL_SUB_PROTOTYPE_TOKEN"

    PERL_SIGIL_ARRAY="SIGIL_ARRAY"
    PERL_SIGIL_HASH="SIGIL_HASH"
    PERL_SIGIL_SCALAR="SIGIL_SCALAR"
    PERL_SIGIL_SCALAR_INDEX="SIGIL_SCALAR_INDEX"

    ANNOTATION_PREFIX="ANNOTATION_PREFIX"

    ANNOTATION_UNKNOWN_KEY="ANNOTATION_UNKNOWN"
    ANNOTATION_DEPRECATED_KEY="ANNOTATION_DEPRECATED"
    ANNOTATION_RETURNS_KEY="ANNOTATION_RETURNS"
    ANNOTATION_OVERRIDE_KEY="ANNOTATION_OVERRIDE"
    ANNOTATION_METHOD_KEY="ANNOTATION_METHOD"
    ANNOTATION_ABSTRACT_KEY="ANNOTATION_ABSTRACT"

    // these being detected in parser
//    PERL_SIGIL_GLOB = "SIGIL_GLOB"
//    PERL_SIGIL_CODE = "SIGIL_CODE"

    PERL_VARIABLE_NAME="PERL_VARIABLE_NAME"


    PERL_HEREDOC="PERL_HEREDOC" // should be string content too
    PERL_HEREDOC_END="PERL_HEREDOC_END"

    PERL_VERSION="PERL_VERSION"
    PERL_NUMBER_VERSION="PERL_NUMBER_VERSION"
    PERL_NUMBER="PERL_NUMBER"

    PERL_KEYWORD="PERL_KEYWORD"
    PERL_RESERVED="PERL_RESERVED"

    PERL_OPERATOR="PERL_OPERATOR"
    PERL_OPERATOR_NOT="not"
    PERL_OPERATOR_X="x"
    PERL_OPERATOR_DIV="/"

    PERL_OPERATOR_UNARY="PERL_OPERATOR_UNARY"
    PERL_OPERATOR_FILETEST="PERL_OPERATOR_FILETEST"

    PERL_REGEX_QUOTE_OPEN="PERL_REGEX_QUOTE_OPEN"
    PERL_REGEX_QUOTE_CLOSE="PERL_REGEX_QUOTE_CLOSE"
    PERL_REGEX_MODIFIER="PERL_REGEX_MODIFIER"
    PERL_REGEX_TOKEN="PERL_REGEX_TOKEN"

//    PERL_STRING="PERL_STRING"
    PERL_STRING_CONTENT="PERL_STRING_CONTENT"

    PERL_TAG="PERL_TAG"

    PERL_COMMA=','
    PERL_ARROW_COMMA='=>'
    PERL_DEREFERENCE='->'
    PERL_DEPACKAGE='::'
    PERL_COLON=":"
    PERL_LBRACK='['
    PERL_RBRACK=']'
    PERL_LPAREN="("
    PERL_RPAREN=")"
    PERL_LBRACE='{'
    PERL_RBRACE='}'
    PERL_LANGLE='<'
    PERL_RANGLE='>'
    PERL_SEMI=';';
    PERL_QUOTE="\""

    // custom tokens
    PERL_FUNCTION_ATTRIBUTE="PERL_FUNCTION_ATTRIBUTE"

    PERL_PACKAGE="PERL_PACKAGE"

    PERL_FUNCTION="PERL_FUNCTION"
    PERL_FUNCTION_BUILT_IN="PERL_FUNCTION_BUILT_IN"
    PERL_HANDLE="PERL_HANDLE"
    PERL_HANDLE_BUILT_IN="PERL_HANDLE_BUILT_IN"
    PERL_BLOCK_NAME="PERL_BLOCK_NAME"
    PERL_LABEL="PERL_LABEL"

    // inline HTML support
    TEMPLATE_BLOCK_HTML="TEMPLATE_BLOCK_HTML"
    EMBED_MARKER="EMBED_MARKER"

    HEREDOC_SQL="HEREDOC_SQL"
//    TEMPLATE_BLOCK_SQL="TEMPLATE_BLOCK_SQL"
  ]

    extends(".*expr")=expr

    extends("annotation_.*")=annotation
    implements("annotation_returns.*")="com.perl5.lang.perl.psi.properties.PerlNamespaceElementContainer"
    methods("annotation_returns.*")=[getNamespaceElement]

    mixin("use_statement")="com.perl5.lang.perl.psi.mixins.PerlUseStatementImplMixin"
    implements("use_statement")="com.perl5.lang.perl.psi.PerlUseStatement"

    extends("use_statement|no_statement|require_statement|condition_statement|for_list_statement|for_iterator_statement")=statement

    implements("conditional_block|block|block_compound|if_compound|unless_compound|given_compound|while_compound|until_compound|for_compound|foreach_compound|namespace_block")="com.perl5.lang.perl.psi.properties.PerlLexicalScope";
    mixin("conditional_block|block|block_compound|if_compound|unless_compound|given_compound|while_compound|until_compound|for_compound|foreach_compound|namespace_block")="com.perl5.lang.perl.psi.mixins.PerlLexicalScopeMemberMixin"

    implements("variable_declaration_lexical|variable_declaration_local|variable_declaration_global")="com.perl5.lang.perl.psi.PerlVariableDeclaration"
    mixin("variable_declaration_lexical|variable_declaration_local|variable_declaration_global")="com.perl5.lang.perl.psi.mixins.PerlVariableDeclarationMixin"

    elementTypeFactory("scalar_variable|array_variable|hash_variable|glob_variable|array_index_variable")="com.perl5.lang.perl.parser.PerlElementTypeFactory.factory"
    stubClass("scalar_variable|array_variable|hash_variable|array_index_variable")="com.perl5.lang.perl.idea.stubs.variables.PerlVariableStub"

    mixin("scalar_variable|array_variable|hash_variable|array_index_variable")="com.perl5.lang.perl.psi.mixins.PerlVariableImplMixin"
    implements("scalar_variable|array_variable|hash_variable|array_index_variable")="com.perl5.lang.perl.psi.PerlVariable"

    elementTypeFactory("sub_declaration|sub_definition|namespace_definition")="com.perl5.lang.perl.parser.PerlElementTypeFactory.factory"

    stubClass("namespace_definition")="com.perl5.lang.perl.idea.stubs.namespaces.PerlNamespaceDefinitionStub"
    mixin("namespace_definition")="com.perl5.lang.perl.psi.mixins.PerlNamespaceDefinitionImplMixin"
    implements("namespace_definition")="com.perl5.lang.perl.psi.PerlNamespaceDefinition"

    stubClass("sub_definition")="com.perl5.lang.perl.idea.stubs.subsdefinitions.PerlSubDefinitionStub"
    mixin("sub_definition")="com.perl5.lang.perl.psi.mixins.PerlSubDefinitionImplMixin"
    implements("sub_definition")="com.perl5.lang.perl.psi.PerlSubDefinition"

    stubClass("sub_declaration")="com.perl5.lang.perl.idea.stubs.subsdeclarations.PerlSubDeclarationStub"
    mixin("sub_declaration")="com.perl5.lang.perl.psi.mixins.PerlSubDeclarationImplMixin"
    implements("sub_declaration")="com.perl5.lang.perl.psi.PerlSubDeclaration"

    stubClass("glob_variable")="com.perl5.lang.perl.idea.stubs.globs.PerlGlobStub"
    mixin("glob_variable")="com.perl5.lang.perl.psi.mixins.PerlGlobVariableImplMixin"
    implements("glob_variable")="com.perl5.lang.perl.psi.PerlGlobVariable"

    mixin("require_expr")="com.perl5.lang.perl.psi.mixins.PerlRequireExprImplMixin"
    implements("require_expr")="com.perl5.lang.perl.psi.PerlRequireExpr"

    mixin("method")="com.perl5.lang.perl.psi.mixins.PerlMethodImplMixin";
    implements("method")="com.perl5.lang.perl.psi.PerlMethod";

    mixin("object_element")="com.perl5.lang.perl.psi.mixins.PerlObjectElementImplMixin"
    implements("object_element")="com.perl5.lang.perl.psi.PerlObject"
 }

///////////////////////////// main code structure //////////////////////////////////////////////////////////////////////
private perlFile ::= file_items <<eof>>

private file_items ::= PERL_SEMI * file_item * {recoverWhile=recover_block}
private file_item ::= namespace_block | namespace_item

block ::= "{" file_items "}" //{pin=1}  //fixme we shoud be able to distinct from anon hash

private namespace_item ::= (sub_definition | named_block | compound_statement | statement | annotation | PERL_SEMI ) {recoverWhile=recover_statement}

// package keyword
namespace_block ::= "package"  namespace_definition (block | PERL_SEMI namespace_content) {pin=1}
namespace_definition ::= namespace_element [perl_version]
private namespace_content ::= namespace_item *  {recoverWhile=recover_namespace}

named_block ::= PERL_BLOCK_NAME block

// declarations
private compound_statement ::=
    [label_declaration] (
        block_compound
        | if_compound
        | unless_compound
        | given_compound
        | while_compound
        | until_compound
        | for_compound
        | foreach_compound
     )

if_compound ::= 'if' conditional_block if_compound_elsif * [if_compound_else]  {pin=1}
unless_compound ::= 'unless' conditional_block if_compound_elsif * [if_compound_else]  {pin=1}
private if_compound_elsif ::= 'elsif' conditional_block  {pin=1}
private if_compound_else  ::= 'else' unconditional_block {pin=1}
unconditional_block ::= block

conditional_block ::= condition_statement block { recoverWhile=recover_statement}
condition_statement ::= parenthesised_expr // annotator should check that condition is not empty

given_compound ::= 'given' conditional_block  {pin=1}

while_compound ::= 'while' conditional_block [compound_continue_block]  {pin=1}
until_compound ::= 'until' conditional_block [compound_continue_block]  {pin=1}

private compound_continue_block ::= 'continue' block

private block_compound ::= block [compound_continue_block]


// for/foreach
for_compound ::= 'for' for_arguments  {pin=1}
foreach_compound ::= 'foreach' for_arguments  {pin=1}
private for_arguments ::=
    for_iterator block
    | for_list_statement block_compound

for_iterator ::= PERL_LPAREN [for_iterator_statement]  PERL_SEMI [for_iterator_statement] PERL_SEMI [for_iterator_statement] PERL_RPAREN
for_iterator_statement ::= expr

// @todo only single variable or variable definition may be here
for_list_statement ::=
    [ variable_declaration | variable ] parenthesised_expr

private statements ::= (statement | PERL_SEMI )+
statement ::= [label_declaration] statement_variation [statement_modifier] <<statementSemi>> {pin=2}

private statement_variation ::=
    use_statement
    | no_statement
    | require_statement
    | sub_declaration
    | expr

require_statement ::= require_expr &(PERL_RESERVED | ';' | '}')

sub_definition ::= [annotations] "sub" canonical_sub_name [sub_definition_parameters] block

private sub_definition_parameters ::=
    sub_prototype [sub_attributes]
    | sub_attributes [sub_signature]
    | sub_signature

sub_declaration ::= [annotations] "sub" canonical_sub_name sub_declaration_parameters

private canonical_sub_name ::= [namespace_element] sub_name_element

private sub_declaration_parameters ::=  [sub_prototype] [sub_attributes]

private sub_prototype ::= PERL_LPAREN [<<parseSubPrototype>>] PERL_RPAREN
private sub_signature ::= PERL_LPAREN [<<parseSubSignature>>] PERL_RPAREN
private sub_attributes ::= ":" <<parseSubAttributes>>


last_expr ::= 'last' [lnr_param]
next_expr ::= 'next' [lnr_param]
redo_expr ::= 'redo' [lnr_param]
private lnr_param ::= PERL_LABEL | expr


statement_modifier ::=
    if_statement_modifier
    | unless_statement_modifier
    | while_statement_modifier
    | until_statement_modifier
    | for_statement_modifier
    | foreach_statement_modifier
    | when_statement_modifier

if_statement_modifier ::= 'if' expr {pin=1}
unless_statement_modifier ::=  'unless' expr {pin=1}
while_statement_modifier ::=  'while' expr {pin=1}
until_statement_modifier ::=  'until' expr {pin=1}
for_statement_modifier ::=  'for' expr  {pin=1}
foreach_statement_modifier ::=  'foreach' expr {pin=1}
when_statement_modifier ::= 'when' expr {pin=1}

use_statement ::= 'use' use_no_parameters {pin=1}
no_statement ::= 'no' use_no_parameters {pin=1}
private use_no_parameters ::= use_module_parameters | use_version_parameters
private use_module_parameters ::= namespace_element [perl_version] [expr];
private use_version_parameters ::= perl_version;


undef_expr ::= "undef" (variable | PERL_LPAREN variable PERL_RPAREN) ?

require_expr ::= 'require' (namespace_element | perl_version | unary_expr)  // multiline string is possible too

// it looks meaningless now, eats nothing
private recover_statement ::= !(
    // fixme what the difference?
    PERL_RESERVED | PERL_KEYWORD
    // fixme should be lexed the same
    | PERL_FUNCTION | PERL_FUNCTION_BUILT_IN
    | PERL_OPERATOR_UNARY | PERL_TAG
    | PERL_OPERATOR_NOT
    | PERL_PACKAGE
    | PERL_RBRACE | PERL_LBRACE | PERL_LANGLE | PERL_REGEX_QUOTE_OPEN
    | PERL_LBRACK
    | PERL_LPAREN
    | PERL_SEMI
    | PERL_QUOTE
    | PERL_HANDLE | PERL_HANDLE_BUILT_IN
    | stop_on_var
    | PERL_NUMBER | PERL_OPERATOR| PERL_OPERATOR_FILETEST
    | PERL_LABEL
    | PERL_BLOCK_NAME
    | ANNOTATION_PREFIX
    )
private stop_on_var ::=
    (PERL_SIGIL_SCALAR_INDEX | PERL_SIGIL_SCALAR | PERL_SIGIL_ARRAY | PERL_SIGIL_HASH)
    [ PERL_SIGIL_SCALAR + ]
    (PERL_LBRACE | namespace_element | PERL_VARIABLE_NAME )
private recover_block ::= !(PERL_RBRACE | <<eof>>)
private recover_namespace ::= !( "package" | '}' | <<eof>>)

// expression
expr ::=
    lp_or_xor_expr
    | lp_and_expr
    | lp_not_expr
    | comma_expr
    | assign_expr
    | trenar_expr
    | flipflop_expr
    | or_expr
    | and_expr
    | bitwise_or_xor_expr
    | bitwise_and_expr
    | equal_expr
    | compare_expr
    | op_10_expr
    | shift_expr
    | add_expr
    | mul_expr
    | regex_expr
    | op_5_expr
    | pow_expr
    | op_3_expr
    | deref_expr
    | term_expr


term_expr ::=
    variable_declaration
    | parenthesised_expr ["[" expr "]"]
//    | parenthesised_expr  // this causes unknown errors in parenthesised grep
    | scalar_constant
    | do_expr
    | sub_expr
    | eval_expr
    | regex_term
    | file_read_expr
    | print_expr
    | open_expr
    | close_expr
    | grep_expr
    | sort_expr
    | map_expr
    | require_expr
    | undef_expr
    | last_expr
    | next_expr
    | return_expr
    | redo_expr
    | PERL_OPERATOR_UNARY parenthesised_expr !"["   // named operators as functions
    | function_call_expr
    | rightward_call_expr
    | reference_value_expr
    | array_index_variable
    | variable
    | namespace_element


parenthesised_expr ::= PERL_LPAREN [expr] PERL_RPAREN {pin=1}

return_expr ::= "return" [list_expr]

deref_expr ::= expr (<<parseArrowSmart>> nested_element_expr) +
private immutable_expression ::= <<parseExpressionLevel 20>>

private op_3_expr ::= pref_pp_expr | suff_pp_expr
pref_pp_expr ::= ('++'|'--') expr
suff_pp_expr ::= expr ('++'|'--')

pow_expr ::= expr ('**' expr)+ { rightAssociative=true }

private op_5_expr ::= ref_expr  | prefix_unary_expr
ref_expr ::= '\' referencable_expr { rightAssociative=true }
prefix_unary_expr ::=  ('~'| '!'| '+' | '-') expr { rightAssociative=true }

regex_expr ::= expr ('=~'|'!~') expr

mul_expr ::= expr ('*'|PERL_OPERATOR_DIV|'%'|PERL_OPERATOR_X) expr
add_expr ::= expr ('+'|'-'|'.') expr
shift_expr ::= expr ('<<'|'>>') expr

private op_10_expr ::= named_unary_expr | filetest_expr
named_unary_expr ::= named_undry_expr_defined | named_unary_expr_normal
private named_undry_expr_defined ::= 'defined' !PERL_LPAREN [unary_expr]
private named_unary_expr_normal ::= PERL_OPERATOR_UNARY !PERL_LPAREN unary_expr

private unary_expr ::= <<parseExpressionLevel 13>>

filetest_expr ::= PERL_OPERATOR_FILETEST [(perl_handle | expr )]

compare_expr ::= expr ('>='|'<='|'<'|'>'|'lt'|'gt'|'le'|'ge') expr
equal_expr ::= expr ('=='|'!='|'<=>'|'eq'|'ne'|'cmp'|'~~') expr
bitwise_and_expr ::= expr '&' expr
bitwise_or_xor_expr ::= expr ('|'|'^') expr
and_expr ::= expr '&&' expr
or_expr ::= expr ('||'|'//') expr
flipflop_expr ::= expr ('..'|'...') expr
trenar_expr ::= expr '?' scalar_expr ':' scalar_expr { rightAssociative=true }
assign_expr ::= expr ('=' | '**='|'+='|'-='| '*='|'/='|'x='| '&='|'|='|'.='| '<<='|'>>='|'%='| '&&='|'||='|'^='| '//=') expr { rightAssociative=true }

private comma_expr ::= comma_sequence_expr | comma_last_expr
comma_last_expr ::= expr comma
comma_sequence_expr ::= expr (comma_any expr) +
private comma_any ::= comma + !(PERL_RPAREN|"]"|"}")

lp_not_expr ::= PERL_OPERATOR_NOT expr { rightAssociative=true }
lp_and_expr ::= expr 'and' expr
lp_or_xor_expr ::= expr ('or'|'xor') expr

private scalar_expr ::= <<parseExpressionLevel 3>>
private list_expr ::= <<parseExpressionLevel 2>>

print_expr ::= ("print"|"printf"|"say") ( PERL_LPAREN [print_arguments] PERL_RPAREN | [print_arguments] ) // {pin=1}
private print_arguments ::= perl_handle expr | expr

open_expr ::= "open" ( PERL_LPAREN open_arguments PERL_RPAREN | open_arguments )
private open_arguments ::=
    open_handle comma open_mode comma open_ref  // open FILEHANDLE,MODE,REFERENCE
    | open_handle comma open_mode comma expr    // open FILEHANDLE,MODE,EXPR,LIST ?
    | open_handle [comma expr]                // open FILEHANDLE, EXPR ?

open_handle ::= variable_declaration | perl_handle
open_mode ::= scalar_expr
open_ref ::= ref_expr

close_expr ::= "close" ( PERL_LPAREN close_arguments PERL_RPAREN | close_arguments )
private close_arguments ::= perl_handle

sort_expr ::= 'sort' ( PERL_LPAREN sort_op_arguments PERL_RPAREN| sort_op_arguments )
private sort_op_arguments ::=
    PERL_FUNCTION expr
    | block expr
    | scalar_expr expr
    | expr

sub_expr ::= 'sub' sub_definition_parameters block

grep_expr ::= 'grep' grep_map_arguments {pin=1}
map_expr ::= 'map' grep_map_arguments {pin=1}
private grep_map_arguments ::=
    PERL_LPAREN grep_map_arguments_variations PERL_RPAREN
    | grep_map_arguments_variations

private grep_map_arguments_variations ::=
    block expr
    | scalar_expr comma expr

function_call_expr ::= callable PERL_LPAREN [call_arguments] PERL_RPAREN !"["  // avoiding ()[]
rightward_call_expr ::= callable [call_arguments]

call_arguments ::=
    anon_hash comma list_expr
    | block [[comma] list_expr]
    | list_expr

file_read_expr ::= '<' [perl_handle] '>'

////////////////////////// regular expressions /////////////////////////////////////////////////////////////////////////
private regex_term ::=
    compile_regex
    | replacement_regex
    | tr_regex
    | match_regex

// pinning quotes leads to bug with replacement block
compile_regex ::= 'qr' match_regex_body
match_regex ::= ['m'] match_regex_body
private match_regex_body ::= PERL_REGEX_QUOTE_OPEN [perl_regex] PERL_REGEX_QUOTE_CLOSE [perl_regex_modifiers]
replacement_regex ::= "s" PERL_REGEX_QUOTE_OPEN [perl_regex] PERL_REGEX_QUOTE_CLOSE [PERL_REGEX_QUOTE_OPEN] [perl_regex | statements] PERL_REGEX_QUOTE_CLOSE [perl_regex_modifiers]


perl_regex_modifiers ::= PERL_REGEX_MODIFIER +
perl_regex ::= PERL_REGEX_TOKEN + // here we should make a trick

tr_regex ::= ('tr'|'y') PERL_REGEX_QUOTE_OPEN tr_searchlist PERL_REGEX_QUOTE_CLOSE [PERL_REGEX_QUOTE_OPEN] tr_replacementlist PERL_REGEX_QUOTE_CLOSE [tr_modifiers] {pin=1}
tr_searchlist ::= PERL_STRING_CONTENT
tr_replacementlist ::= PERL_STRING_CONTENT

tr_modifiers ::= PERL_REGEX_MODIFIER +
////////////////////////// end of regular expressions //////////////////////////////////////////////////////////////////

do_expr ::= "do" eval_argument {pin=1}
eval_expr ::= "eval" eval_argument {pin=1}
private eval_argument ::= parenthesised_expr | block | expr

private variable_declaration ::=
    variable_declaration_global
    | variable_declaration_lexical
    | variable_declaration_local

// @todo attributes support
variable_declaration_local ::= <<checkTokenType PERL_RESERVED>> 'local' [namespace_element]  local_variable_declaration_variation {pin=2}
variable_declaration_lexical ::= <<checkTokenType PERL_RESERVED>> ('my' | 'state') [namespace_element] variable_declaration_variation {pin=2}
variable_declaration_global ::= <<checkTokenType PERL_RESERVED>> 'our' [namespace_element] variable_declaration_variation  {pin=2}

private local_variable_declaration_variation ::=
    PERL_LPAREN local_variable_declaration_argument (comma + local_variable_declaration_argument ) * comma * PERL_RPAREN
    | local_variable_declaration_argument

private local_variable_declaration_argument ::= immutable_expression | lexical_variable_definition_argument

private variable_declaration_variation ::=
    PERL_LPAREN lexical_variable_definition_argument (comma + lexical_variable_definition_argument ) * comma* PERL_RPAREN
    | lexical_variable_definition_argument

private lexical_variable_definition_argument ::= lexical_variable | "undef"

/////////////////////////////////// REFERENCES /////////////////////////////////////////////////////////////////////////
// most of the references created by \ operator, but some - don't
private reference_value_expr ::=
    anon_array
    | anon_hash
    | code_ref

anon_array ::= '[' [expr] ']' //{pin=1}
anon_hash ::= '{' [expr] '}' // fixme pin here after solving problem with code block and prototypes
code_ref ::= "sub" block

//////////////////////////// END OF REFERENCES /////////////////////////////////////////////////////////////////////////

// fixme it's not a variable, its variable expression
private variable ::= scalar | array | hash | glob

private array ::=
    PERL_SIGIL_ARRAY '{' expr '}'   // scalar dereference
    | array_array_slice              // array slice
    | array_hash_slice              // hash slice
    | array_variable
    | array_constant

array_array_slice ::= array_variable '[' expr ']'
array_hash_slice ::= array_variable '{' expr '}'

private hash ::=
    PERL_SIGIL_HASH '{' expr '}'      // hash dereference w braces
    | hash_variable                    // hash as is

private scalar ::=
    PERL_SIGIL_SCALAR + "{" expr "}"
    | scalar_array_element
    | scalar_hash_element
    | scalar_variable
    | scalar_array_index
    | scalar_constant
    | scalar_anon_array_element
    | undef_expr
    | PERL_SIGIL_SCALAR_INDEX PERL_SIGIL_SCALAR * ( '{' expr '}' | scalar_variable )
    | perl_handle_basic

scalar_array_index ::= PERL_SIGIL_SCALAR_INDEX PERL_SIGIL_SCALAR * scalar_variable
scalar_array_element ::= scalar_variable "[" expr "]"
scalar_hash_element ::= scalar_variable ( "{" expr "}" | braced_string )
scalar_anon_array_element ::= PERL_LPAREN expr PERL_RPAREN "["expr"]"

private glob ::=
    "*" "{" expr "}"     // @todo we need to colorize this as glob
    | glob_variable                    // hash as is

private nested_element ::=
    braced_string
    | "{" expr "}"
    | "[" expr "]"

// extended nested element for using in ()
private nested_element_expr ::=
    nested_element
    | parenthesised_expr    // function call like $var->()
    | scalar_call
    | function_call_expr
    | rightward_call_expr
    | scalar

scalar_call ::= scalar_variable [parenthesised_expr]


///////////////////////////////////// CALLABLE /////////////////////////////////////////////////////////////////////////

private callable ::= method | referencable_method
//<<resetLastCallable>> (
//
//    |
//)

private referencable_expr ::= referencable_method | scalar_expr
private referencable_method ::= '&'
    (
        method
        | "{"method"}"
        | "{"expr"}"
        | scalar
    )

////////////////////////////////END OF CALLABLE ////////////////////////////////////////////////////////////////////////

label_declaration ::= PERL_LABEL ":" // do we need to change tokentype?
private perl_version ::= PERL_NUMBER_VERSION | PERL_NUMBER
private perl_handle ::=  perl_handle_basic | "{" scalar_expr "}" | <<parseExpressionLevel 21>>
private perl_handle_basic ::= PERL_HANDLE | PERL_HANDLE_BUILT_IN

//////////////////////////////////// constants /////////////////////////////////////////////////////////////////////////

private scalar_constant ::=
    PERL_NUMBER
    | PERL_NUMBER_VERSION
    | PERL_TAG  // __PACKAGE__ etc.
    | string

braced_string ::= "{" PERL_STRING_CONTENT "}"

private array_constant ::=
    string_list

private string ::= string_sq | string_dq | string_xq | heredoc_opener

private string_quoted ::= PERL_QUOTE [PERL_STRING_CONTENT] PERL_QUOTE
string_dq ::=
    "\"" [PERL_STRING_CONTENT] "\""
     | "qq" string_quoted

string_sq ::=
    "'" [PERL_STRING_CONTENT] "'"
    | "q" string_quoted
    | PERL_STRING_CONTENT

string_xq ::=
    "`" [PERL_STRING_CONTENT] "`"
    | "qx" string_quoted

heredoc_opener ::= '<<' ( string_xq | string_dq | string_sq | PERL_STRING_CONTENT )

string_list ::= 'qw' PERL_QUOTE PERL_STRING_CONTENT * PERL_QUOTE

///////////////////////////////////// variables ////////////////////////////////////////////////////////////////////////
private lexical_variable ::= scalar_variable | array_variable | hash_variable

array_index_variable ::= PERL_SIGIL_SCALAR_INDEX [scalar_sigils] variable_body

scalar_variable ::= PERL_SIGIL_SCALAR [scalar_sigils] variable_body

array_variable ::= PERL_SIGIL_ARRAY [scalar_sigils] variable_body

hash_variable ::= PERL_SIGIL_HASH [scalar_sigils] variable_body

scalar_sigils ::= PERL_SIGIL_SCALAR+

glob_variable ::= "*" glob_name [PERL_LBRACE glob_slot PERL_RBRACE]
private glob_name ::= variable_body | scalar_variable
glob_slot ::=
    "SCALAR"
    | "ARRAY"
    | "HASH"
    | "CODE"
    | "IO"
    | "GLOB"
    | "FORMAT"
    | "NAME"
    | "PACKAGE"
    | expr


private variable_body ::=
    PERL_LBRACE [namespace_element] variable_name_element PERL_RBRACE
    | [namespace_element] variable_name_element
    | namespace_element
private variable_name_element ::= PERL_VARIABLE_NAME

private comma ::= PERL_COMMA | PERL_ARROW_COMMA
method ::=
    namespace_element sub_name_element         // package::method
//    | namespace_element '->' (scalar_variable | sub_name_element)
//    | object_element '->' sub_name_element       // $object->method actuall it can be not scalar, but scalar expression, but enough for now
    | sub_name_element [namespace_element &PERL_LPAREN]       // method package
    | PERL_FUNCTION_BUILT_IN
    | PERL_KEYWORD

object_element ::= scalar_variable

private sub_name_element ::= PERL_FUNCTION

/******************************************** PERL SUBS ANNOTATIONS ***************************************************/
private annotations ::= annotation+
annotation ::=
    annotation_unknown
    | annotation_abstract
    | annotation_deprectaed
    | annotation_method
    | annotation_returns_ref
    | annotation_returns_arrayref
    | annotation_returns_hashref
    | annotation_override
    | annotation_incomplete

annotation_unknown ::= ANNOTATION_PREFIX ANNOTATION_UNKNOWN_KEY
annotation_abstract ::= ANNOTATION_PREFIX ANNOTATION_ABSTRACT_KEY
annotation_deprectaed ::= ANNOTATION_PREFIX ANNOTATION_DEPRECATED_KEY
annotation_method ::= ANNOTATION_PREFIX ANNOTATION_METHOD_KEY
annotation_override ::= ANNOTATION_PREFIX ANNOTATION_OVERRIDE_KEY
annotation_returns_ref ::= ANNOTATION_PREFIX ANNOTATION_RETURNS_KEY namespace_element
annotation_returns_arrayref ::= ANNOTATION_PREFIX ANNOTATION_RETURNS_KEY namespace_element_bracketed
annotation_returns_hashref ::= ANNOTATION_PREFIX ANNOTATION_RETURNS_KEY namespace_element_braced
annotation_incomplete ::= ANNOTATION_PREFIX

private namespace_element_bracketed ::= PERL_LBRACK namespace_element PERL_RBRACK {name="[Package::Name]"}
private namespace_element_braced ::= PERL_LBRACE namespace_element PERL_RBRACE {name="{Package::Name}"}

/******************************************** PERL SUBS ANNOTATIONS ***************************************************/
private namespace_element ::= PERL_PACKAGE {name="Package::Name"}
