/* The following code was generated by JFlex 1.4.3 on 10.05.15 20:19 */

package com.perl5.lang.perl.lexer;

/*
    http://jflex.de/manual.html
    http://www2.cs.tum.edu/projects/cup

*/

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import org.jetbrains.annotations.NotNull;
import com.perl5.lang.perl.util.PerlFunctionUtil;
import com.perl5.lang.perl.util.PerlScalarUtil;
import com.perl5.lang.perl.util.PerlHashUtil;
import com.perl5.lang.perl.util.PerlGlobUtil;
import com.perl5.lang.perl.util.PerlArrayUtil;
import com.perl5.lang.perl.util.PerlPackageUtil;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10.05.15 20:19 from the specification file
 * <tt>C:/Repository/Perl5-IDEA/src/com/perl5/lang/perl/lexer/Perl.flex</tt>
 */
public abstract class PerlLexerGenerated implements PerlLexerBase {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int LEX_POD = 4;
  public static final int LEX_MULTILINE = 12;
  public static final int LEX_TRANS_MODIFIERS = 34;
  public static final int LEX_QUOTE_LIKE_LIST_OPENER = 22;
  public static final int LEX_CODE = 8;
  public static final int LEX_TRANS_OPENER = 28;
  public static final int LEX_MULTILINE_WAITING = 10;
  public static final int LEX_BAREWORD_STRING = 6;
  public static final int LEX_QUOTE_LIKE_CHARS = 18;
  public static final int LEX_QUOTE_LIKE_WORDS = 24;
  public static final int LEX_TRANS_CLOSER = 32;
  public static final int LEX_REGEX_ITEMS = 38;
  public static final int LEX_TRANS_CHARS = 30;
  public static final int LEX_REGEX_OPENER = 36;
  public static final int LEX_QUOTE_LIKE_OPENER = 16;
  public static final int LEX_QUOTE_LIKE_CLOSER = 20;
  public static final int LEX_EOF = 2;
  public static final int YYINITIAL = 0;
  public static final int LEX_MULTILINE_TOKEN = 14;
  public static final int LEX_QUOTE_LIKE_LIST_CLOSER = 26;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  0,  0,  4,  4,  5,  5,  6,  6, 
     7,  7,  8,  8,  9,  9, 10, 10, 11, 11,  9,  9, 12, 12, 13, 13, 
    14, 14, 15, 15, 16, 16, 17, 17
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\26\1\7"+
    "\1\12\1\65\1\32\1\35\1\10\1\111\1\112\1\25\1\24\1\23"+
    "\1\6\1\15\1\40\1\5\1\51\1\51\1\51\1\51\3\66\1\104"+
    "\1\66\1\113\1\114\1\33\1\31\1\34\1\41\1\115\1\21\1\73"+
    "\1\77\1\20\1\16\1\103\1\72\1\106\1\71\1\4\1\126\1\100"+
    "\1\76\1\17\1\102\1\110\1\4\1\70\1\74\1\22\1\101\1\107"+
    "\1\67\1\105\1\75\1\4\1\116\1\30\1\117\1\37\1\13\1\11"+
    "\1\50\1\56\1\57\1\45\1\47\1\63\1\61\1\46\1\53\1\4"+
    "\1\60\1\125\1\55\1\62\1\44\1\43\1\120\1\52\1\124\1\54"+
    "\1\64\1\14\1\121\1\122\1\123\1\42\1\127\1\36\1\130\1\27"+
    "\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\0\1\3\1\4\13\0\2\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\11"+
    "\1\10\1\5\1\15\6\12\1\16\1\17\1\20\2\12"+
    "\1\21\10\10\1\22\5\10\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\10\1\34\1\35"+
    "\1\22\1\10\1\36\1\37\1\1\3\2\1\40\1\11"+
    "\1\40\1\12\10\40\1\22\5\40\1\33\1\40\1\34"+
    "\1\35\1\22\1\40\1\11\2\3\1\41\1\42\1\43"+
    "\2\44\1\45\1\46\1\47\1\50\2\51\1\52\2\53"+
    "\1\54\1\55\2\56\1\0\2\57\1\60\1\14\2\11"+
    "\1\0\1\61\1\12\1\62\1\63\7\0\2\64\1\0"+
    "\2\12\3\10\1\34\13\10\2\34\3\10\5\65\1\66"+
    "\2\67\1\0\1\22\1\33\1\70\10\10\1\2\2\11"+
    "\1\61\3\40\1\34\13\40\2\34\3\40\1\22\1\33"+
    "\1\70\10\40\3\11\1\71\6\10\14\0\1\72\3\0"+
    "\10\10\1\73\3\10\1\34\3\10\2\0\5\65\1\0"+
    "\1\65\1\0\3\10\1\2\14\40\1\73\3\40\1\34"+
    "\6\40\6\10\1\61\1\0\1\74\11\0\7\10\13\0"+
    "\1\10\1\75\14\40\5\10\1\74\3\0\1\72\7\10"+
    "\11\0\1\10\1\75\13\40\3\10\1\0\3\10\11\0"+
    "\5\40\1\76\1\77\1\10\11\0\1\77\1\40\61\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[473];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\131\0\262\0\u010b\0\u0164\0\u01bd\0\u0216\0\u026f"+
    "\0\u02c8\0\u0321\0\u037a\0\u03d3\0\u042c\0\u0485\0\u04de\0\u0537"+
    "\0\u0590\0\u05e9\0\u0642\0\u069b\0\u0642\0\u06f4\0\u074d\0\u07a6"+
    "\0\u07ff\0\u0642\0\u0858\0\u08b1\0\u090a\0\u0963\0\u0642\0\u09bc"+
    "\0\u0a15\0\u0a6e\0\u0ac7\0\u0642\0\u0b20\0\u0b79\0\u0bd2\0\u0c2b"+
    "\0\u0c84\0\u0cdd\0\u0642\0\u0d36\0\u0d8f\0\u0de8\0\u0e41\0\u0e9a"+
    "\0\u0ef3\0\u0f4c\0\u0fa5\0\u0ffe\0\u1057\0\u10b0\0\u1109\0\u1162"+
    "\0\u11bb\0\u1214\0\u0642\0\u0642\0\u126d\0\u0642\0\u12c6\0\u0642"+
    "\0\u0642\0\u131f\0\u1378\0\u13d1\0\u074d\0\u142a\0\u1483\0\u0642"+
    "\0\u0642\0\u0642\0\u14dc\0\u0642\0\u1535\0\u158e\0\u15e7\0\u1640"+
    "\0\u1699\0\u16f2\0\u174b\0\u17a4\0\u17fd\0\u1856\0\u18af\0\u1908"+
    "\0\u1961\0\u19ba\0\u1a13\0\u1a6c\0\u1ac5\0\u1b1e\0\u1b77\0\u1bd0"+
    "\0\u1c29\0\u1c82\0\u158e\0\u1cdb\0\u1d34\0\u1d8d\0\u1de6\0\u1e3f"+
    "\0\u0642\0\u0642\0\u1e98\0\u0642\0\u1ef1\0\u0642\0\u0642\0\u1f4a"+
    "\0\u0642\0\u0642\0\u1fa3\0\u0642\0\u0642\0\u1ffc\0\u0642\0\u0642"+
    "\0\u0642\0\u2055\0\u20ae\0\u2107\0\u2160\0\u0642\0\u0642\0\u21b9"+
    "\0\u2212\0\u226b\0\u22c4\0\u231d\0\u2376\0\u0642\0\u23cf\0\u2428"+
    "\0\u2481\0\u24da\0\u2533\0\u258c\0\u25e5\0\u263e\0\u0642\0\u2697"+
    "\0\u26f0\0\u2749\0\u27a2\0\u27fb\0\u2854\0\u074d\0\u28ad\0\u2906"+
    "\0\u295f\0\u29b8\0\u2a11\0\u2a6a\0\u2ac3\0\u2b1c\0\u2b75\0\u2bce"+
    "\0\u2c27\0\u2c80\0\u2cd9\0\u2d32\0\u2d8b\0\u2de4\0\u2e3d\0\u0642"+
    "\0\u2e96\0\u2eef\0\u2f48\0\u0642\0\u2fa1\0\u0642\0\u2ffa\0\u074d"+
    "\0\u074d\0\u074d\0\u3053\0\u30ac\0\u3105\0\u315e\0\u31b7\0\u3210"+
    "\0\u3269\0\u32c2\0\u331b\0\u3374\0\u33cd\0\u3426\0\u347f\0\u34d8"+
    "\0\u3531\0\u158e\0\u358a\0\u35e3\0\u363c\0\u3695\0\u36ee\0\u3747"+
    "\0\u37a0\0\u37f9\0\u3852\0\u38ab\0\u3904\0\u395d\0\u39b6\0\u3a0f"+
    "\0\u3a68\0\u3ac1\0\u158e\0\u158e\0\u158e\0\u3b1a\0\u3b73\0\u3bcc"+
    "\0\u3c25\0\u3c7e\0\u3cd7\0\u3d30\0\u3d89\0\u3de2\0\u3e3b\0\u226b"+
    "\0\u0642\0\u3e94\0\u3eed\0\u3f46\0\u3f9f\0\u3ff8\0\u4051\0\u40aa"+
    "\0\u4103\0\u415c\0\u41b5\0\u420e\0\u4267\0\u42c0\0\u4319\0\u4372"+
    "\0\u43cb\0\u4424\0\u2749\0\u447d\0\u44d6\0\u452f\0\u4588\0\u45e1"+
    "\0\u463a\0\u4693\0\u46ec\0\u4745\0\u479e\0\u47f7\0\u4850\0\u074d"+
    "\0\u48a9\0\u4902\0\u2c80\0\u495b\0\u49b4\0\u4a0d\0\u4a66\0\u4abf"+
    "\0\u2e96\0\u4b18\0\u4b71\0\u4bca\0\u4c23\0\u4c7c\0\u4cd5\0\u4d2e"+
    "\0\u4d87\0\u4de0\0\u4e39\0\u4e92\0\u4eeb\0\u4f44\0\u4f9d\0\u4ff6"+
    "\0\u504f\0\u50a8\0\u5101\0\u515a\0\u51b3\0\u520c\0\u5265\0\u52be"+
    "\0\u5317\0\u158e\0\u5370\0\u53c9\0\u395d\0\u5422\0\u547b\0\u54d4"+
    "\0\u552d\0\u5586\0\u55df\0\u5638\0\u5691\0\u56ea\0\u5743\0\u579c"+
    "\0\u57f5\0\u584e\0\u58a7\0\u5900\0\u5959\0\u59b2\0\u5a0b\0\u5a64"+
    "\0\u5abd\0\u5b16\0\u5b6f\0\u5bc8\0\u5c21\0\u5c7a\0\u5cd3\0\u5d2c"+
    "\0\u5d85\0\u5dde\0\u5e37\0\u5e90\0\u5ee9\0\u5f42\0\u5f9b\0\u5ff4"+
    "\0\u604d\0\u60a6\0\u60ff\0\u6158\0\u61b1\0\u620a\0\u6263\0\u62bc"+
    "\0\u6315\0\u636e\0\u63c7\0\u6420\0\u6479\0\u64d2\0\u652b\0\u6584"+
    "\0\u65dd\0\u6636\0\u668f\0\u66e8\0\u6741\0\u679a\0\u67f3\0\u684c"+
    "\0\u68a5\0\u68fe\0\u6957\0\u0642\0\u69b0\0\u6a09\0\u6a62\0\u0642"+
    "\0\u6abb\0\u6b14\0\u6b6d\0\u6bc6\0\u6c1f\0\u6c78\0\u6cd1\0\u6d2a"+
    "\0\u6d83\0\u6ddc\0\u6e35\0\u6e8e\0\u6ee7\0\u6f40\0\u6f99\0\u6ff2"+
    "\0\u704b\0\u0642\0\u70a4\0\u70fd\0\u7156\0\u71af\0\u7208\0\u7261"+
    "\0\u72ba\0\u7313\0\u736c\0\u73c5\0\u741e\0\u7477\0\u74d0\0\u7529"+
    "\0\u7582\0\u75db\0\u7634\0\u768d\0\u76e6\0\u773f\0\u7798\0\u77f1"+
    "\0\u784a\0\u78a3\0\u78fc\0\u7955\0\u79ae\0\u7a07\0\u7a60\0\u7ab9"+
    "\0\u7b12\0\u7b6b\0\u074d\0\u074d\0\u7bc4\0\u7c1d\0\u7c76\0\u7ccf"+
    "\0\u7d28\0\u7d81\0\u7dda\0\u7e33\0\u7e8c\0\u7ee5\0\u158e\0\u7f3e"+
    "\0\u7f97\0\u7ff0\0\u8049\0\u80a2\0\u80fb\0\u8154\0\u81ad\0\u8206"+
    "\0\u825f\0\u82b8\0\u8311\0\u836a\0\u83c3\0\u841c\0\u8475\0\u84ce"+
    "\0\u8527\0\u8580\0\u85d9\0\u8632\0\u868b\0\u86e4\0\u873d\0\u8796"+
    "\0\u87ef\0\u8848\0\u88a1\0\u88fa\0\u8953\0\u89ac\0\u8a05\0\u8a5e"+
    "\0\u8ab7\0\u8b10\0\u8b69\0\u8bc2\0\u8c1b\0\u8c74\0\u8ccd\0\u8d26"+
    "\0\u8d7f\0\u8dd8\0\u8e31\0\u8e8a\0\u8ee3\0\u8f3c\0\u8f95\0\u8fee"+
    "\0\u9047";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[473];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\3\32"+
    "\1\33\1\34\1\35\1\36\5\27\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\44\1\53\1\44\1\27\1\54\1\55\1\56"+
    "\1\27\1\57\1\60\1\30\1\61\1\62\1\63\1\64"+
    "\1\27\1\65\1\27\1\66\1\67\1\70\1\71\1\72"+
    "\1\30\15\27\1\30\4\27\1\73\1\74\1\75\1\76"+
    "\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106"+
    "\1\107\1\27\1\110\1\111\2\2\1\112\126\2\2\113"+
    "\1\114\26\113\1\115\77\113\1\23\1\24\1\25\1\26"+
    "\1\116\1\30\1\31\3\32\1\33\1\117\1\120\1\36"+
    "\5\116\1\37\1\40\1\41\1\42\1\43\1\44\1\121"+
    "\1\46\1\47\1\50\1\51\1\52\1\44\1\53\1\44"+
    "\1\116\1\122\1\123\1\124\1\116\1\125\1\126\1\30"+
    "\1\127\1\130\1\131\1\132\1\116\1\133\1\116\1\134"+
    "\1\135\1\136\1\137\1\72\1\30\15\116\1\30\4\116"+
    "\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\140"+
    "\1\141\1\142\1\143\1\144\1\145\1\116\1\110\1\111"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\3\32"+
    "\1\33\1\146\1\35\1\36\5\27\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\121\1\46\1\47\1\50\1\51"+
    "\1\52\1\44\1\53\1\44\1\27\1\54\1\55\1\56"+
    "\1\27\1\57\1\60\1\30\1\61\1\62\1\63\1\64"+
    "\1\27\1\65\1\27\1\66\1\67\1\70\1\71\1\72"+
    "\1\30\15\27\1\30\4\27\1\73\1\74\1\75\1\76"+
    "\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106"+
    "\1\107\1\27\1\110\1\111\1\147\1\150\1\151\126\147"+
    "\2\7\1\0\126\7\1\152\3\153\125\152\1\154\1\155"+
    "\127\154\2\156\1\0\126\156\1\157\3\153\125\157\1\160"+
    "\3\153\125\160\1\161\3\153\125\161\1\162\1\163\127\162"+
    "\2\164\1\0\126\164\1\165\1\166\43\165\1\167\4\165"+
    "\1\167\4\165\1\167\44\165\1\167\4\165\1\170\3\153"+
    "\125\170\1\171\1\172\127\171\133\0\1\25\131\0\1\26"+
    "\131\0\2\27\5\0\2\27\1\0\5\27\17\0\23\27"+
    "\1\0\23\27\7\0\7\27\7\0\1\30\5\0\1\30"+
    "\1\0\1\173\33\0\1\30\14\0\1\30\15\0\1\30"+
    "\30\0\1\174\1\0\1\44\4\0\2\174\1\0\3\174"+
    "\2\175\6\0\1\44\2\0\1\176\5\0\4\175\1\174"+
    "\1\175\1\174\1\0\1\175\1\174\1\175\1\174\4\175"+
    "\1\174\2\175\2\0\2\175\2\174\2\175\1\174\2\175"+
    "\2\174\1\175\1\174\1\0\1\175\3\174\7\0\1\174"+
    "\2\175\1\174\2\175\1\174\2\0\2\33\1\177\126\33"+
    "\4\0\1\27\1\200\5\0\1\201\1\27\1\202\5\27"+
    "\17\0\7\27\1\200\13\27\1\0\1\200\15\27\1\200"+
    "\4\27\7\0\7\27\6\0\1\27\1\203\5\0\2\27"+
    "\1\0\5\27\17\0\7\27\1\203\13\27\1\0\1\203"+
    "\15\27\1\203\4\27\7\0\7\27\17\0\1\204\137\0"+
    "\1\44\4\0\1\44\103\0\1\205\6\0\2\205\1\0"+
    "\5\205\2\0\1\44\3\0\1\44\10\0\7\205\1\0"+
    "\13\205\2\0\15\205\1\0\4\205\7\0\7\205\31\0"+
    "\1\44\1\0\1\44\126\0\1\44\130\0\1\44\1\0"+
    "\1\44\2\0\1\206\6\0\1\207\1\210\1\0\1\211"+
    "\1\212\3\0\1\213\2\0\1\214\4\0\1\215\51\0"+
    "\1\216\1\0\1\217\4\0\2\216\1\0\5\216\1\0"+
    "\1\217\1\0\1\217\10\0\1\220\2\0\7\216\1\0"+
    "\13\216\2\0\15\216\1\0\4\216\7\0\7\216\33\0"+
    "\1\221\1\0\1\222\126\0\1\44\2\0\1\44\131\0"+
    "\1\44\131\0\1\44\76\0\2\27\5\0\2\27\1\0"+
    "\5\27\17\0\6\27\1\223\1\27\1\224\12\27\1\0"+
    "\23\27\7\0\7\27\6\0\2\27\5\0\2\27\1\0"+
    "\5\27\17\0\1\27\1\225\6\27\1\226\11\27\1\227"+
    "\1\0\23\27\7\0\7\27\6\0\2\27\5\0\2\27"+
    "\1\0\5\27\17\0\2\27\1\226\2\27\1\230\15\27"+
    "\1\0\23\27\7\0\7\27\6\0\2\27\5\0\1\27"+
    "\1\231\1\0\5\27\17\0\23\27\1\0\23\27\7\0"+
    "\1\226\1\27\1\232\2\27\1\233\1\27\6\0\2\27"+
    "\5\0\2\27\1\0\5\27\17\0\20\27\1\234\2\27"+
    "\1\0\23\27\7\0\7\27\6\0\2\27\5\0\2\27"+
    "\1\0\5\27\17\0\5\27\1\235\15\27\1\0\23\27"+
    "\7\0\7\27\6\0\2\27\5\0\2\27\1\0\5\27"+
    "\17\0\21\27\1\226\1\27\1\0\23\27\7\0\7\27"+
    "\6\0\2\27\5\0\2\27\1\0\5\27\17\0\10\27"+
    "\1\105\12\27\1\0\23\27\7\0\7\27\6\0\2\27"+
    "\5\0\2\27\1\0\5\27\17\0\6\27\1\236\14\27"+
    "\1\0\23\27\7\0\3\27\1\226\3\27\6\0\2\27"+
    "\5\0\2\27\1\0\5\27\17\0\2\27\1\237\10\27"+
    "\1\236\7\27\1\0\23\27\7\0\7\27\6\0\2\27"+
    "\5\0\2\27\1\0\5\27\17\0\5\27\1\226\2\27"+
    "\1\240\1\241\1\226\10\27\1\0\23\27\7\0\7\27"+
    "\6\0\2\27\5\0\2\27\1\0\5\27\17\0\2\27"+
    "\1\242\2\27\1\243\15\27\1\0\23\27\7\0\7\27"+
    "\6\0\2\27\5\0\2\27\1\0\5\27\17\0\2\27"+
    "\1\244\20\27\1\0\23\27\7\0\7\27\6\0\2\27"+
    "\5\0\2\27\1\0\5\27\17\0\20\27\1\245\2\27"+
    "\1\0\23\27\7\0\4\27\1\246\2\27\6\0\1\247"+
    "\5\250\1\251\2\247\1\250\5\247\5\250\1\0\6\250"+
    "\1\252\2\250\7\247\1\253\13\247\1\251\1\253\15\247"+
    "\1\253\4\247\7\250\7\247\115\0\1\254\21\0\1\255"+
    "\1\0\1\256\4\0\2\255\1\0\5\255\1\0\1\256"+
    "\1\0\1\256\10\0\1\257\2\0\7\255\1\0\13\255"+
    "\2\0\15\255\1\0\4\255\7\0\7\255\6\0\2\27"+
    "\5\0\2\27\1\0\5\27\17\0\10\27\1\260\12\27"+
    "\1\0\23\27\7\0\1\261\1\262\1\261\4\27\6\0"+
    "\2\27\5\0\2\27\1\0\5\27\17\0\4\27\1\263"+
    "\16\27\1\0\23\27\7\0\7\27\6\0\2\27\5\0"+
    "\2\27\1\0\5\27\17\0\2\27\1\227\20\27\1\0"+
    "\23\27\7\0\7\27\6\0\2\27\5\0\2\27\1\0"+
    "\5\27\17\0\2\27\1\264\3\27\1\265\3\27\1\266"+
    "\2\27\1\267\4\27\1\270\1\0\23\27\7\0\7\27"+
    "\6\0\2\27\5\0\2\27\1\0\5\27\17\0\2\27"+
    "\1\271\2\27\1\226\1\272\3\27\1\226\10\27\1\0"+
    "\23\27\7\0\7\27\2\0\2\113\1\114\130\113\1\114"+
    "\54\113\1\273\51\113\4\0\2\116\5\0\2\116\1\0"+
    "\5\116\17\0\23\116\1\0\23\116\7\0\7\116\6\0"+
    "\1\116\1\274\5\0\1\275\1\116\1\202\5\116\17\0"+
    "\7\116\1\274\13\116\1\0\1\274\15\116\1\274\4\116"+
    "\7\0\7\116\6\0\1\116\1\276\5\0\2\116\1\0"+
    "\5\116\17\0\7\116\1\276\13\116\1\0\1\276\15\116"+
    "\1\276\4\116\7\0\7\116\31\0\1\44\1\0\1\44"+
    "\2\0\1\206\100\0\2\116\5\0\2\116\1\0\5\116"+
    "\17\0\6\116\1\277\1\116\1\300\12\116\1\0\23\116"+
    "\7\0\7\116\6\0\2\116\5\0\2\116\1\0\5\116"+
    "\17\0\1\116\1\301\6\116\1\302\11\116\1\303\1\0"+
    "\23\116\7\0\7\116\6\0\2\116\5\0\2\116\1\0"+
    "\5\116\17\0\2\116\1\302\2\116\1\304\15\116\1\0"+
    "\23\116\7\0\7\116\6\0\2\116\5\0\1\116\1\305"+
    "\1\0\5\116\17\0\23\116\1\0\23\116\7\0\1\302"+
    "\1\116\1\306\2\116\1\307\1\116\6\0\2\116\5\0"+
    "\2\116\1\0\5\116\17\0\20\116\1\310\2\116\1\0"+
    "\23\116\7\0\7\116\6\0\2\116\5\0\2\116\1\0"+
    "\5\116\17\0\5\116\1\311\15\116\1\0\23\116\7\0"+
    "\7\116\6\0\2\116\5\0\2\116\1\0\5\116\17\0"+
    "\21\116\1\302\1\116\1\0\23\116\7\0\7\116\6\0"+
    "\2\116\5\0\2\116\1\0\5\116\17\0\10\116\1\143"+
    "\12\116\1\0\23\116\7\0\7\116\6\0\2\116\5\0"+
    "\2\116\1\0\5\116\17\0\6\116\1\312\14\116\1\0"+
    "\23\116\7\0\3\116\1\302\3\116\6\0\2\116\5\0"+
    "\2\116\1\0\5\116\17\0\2\116\1\313\10\116\1\312"+
    "\7\116\1\0\23\116\7\0\7\116\6\0\2\116\5\0"+
    "\2\116\1\0\5\116\17\0\5\116\1\302\2\116\1\314"+
    "\1\315\1\302\10\116\1\0\23\116\7\0\7\116\6\0"+
    "\2\116\5\0\2\116\1\0\5\116\17\0\2\116\1\316"+
    "\2\116\1\317\15\116\1\0\23\116\7\0\7\116\6\0"+
    "\2\116\5\0\2\116\1\0\5\116\17\0\2\116\1\320"+
    "\20\116\1\0\23\116\7\0\7\116\6\0\2\116\5\0"+
    "\2\116\1\0\5\116\17\0\20\116\1\321\2\116\1\0"+
    "\23\116\7\0\4\116\1\322\2\116\6\0\2\116\5\0"+
    "\2\116\1\0\5\116\17\0\10\116\1\323\12\116\1\0"+
    "\23\116\7\0\1\324\1\325\1\324\4\116\6\0\2\116"+
    "\5\0\2\116\1\0\5\116\17\0\4\116\1\326\16\116"+
    "\1\0\23\116\7\0\7\116\6\0\2\116\5\0\2\116"+
    "\1\0\5\116\17\0\2\116\1\303\20\116\1\0\23\116"+
    "\7\0\7\116\6\0\2\116\5\0\2\116\1\0\5\116"+
    "\17\0\2\116\1\327\3\116\1\330\3\116\1\331\2\116"+
    "\1\332\4\116\1\333\1\0\23\116\7\0\7\116\6\0"+
    "\2\116\5\0\2\116\1\0\5\116\17\0\2\116\1\334"+
    "\2\116\1\302\1\335\3\116\1\302\10\116\1\0\23\116"+
    "\7\0\7\116\6\0\1\27\1\200\5\0\1\336\1\27"+
    "\1\202\5\27\17\0\7\27\1\200\13\27\1\0\1\200"+
    "\15\27\1\200\4\27\7\0\7\27\2\0\2\147\1\0"+
    "\130\147\1\151\126\147\1\0\3\153\127\0\1\154\126\0"+
    "\1\160\3\0\125\160\2\0\1\162\130\0\1\165\130\0"+
    "\1\171\133\0\1\337\5\0\1\340\35\0\1\337\14\0"+
    "\1\337\15\0\1\337\30\0\2\174\5\0\2\174\1\0"+
    "\5\174\17\0\23\174\1\0\23\174\7\0\7\174\2\0"+
    "\4\341\2\174\5\341\2\174\1\341\5\174\17\341\23\174"+
    "\1\341\23\174\7\341\7\174\2\341\4\0\1\27\1\200"+
    "\5\0\1\200\1\27\1\202\5\27\17\0\7\27\1\200"+
    "\13\27\1\0\1\200\15\27\1\200\4\27\7\0\7\27"+
    "\6\0\1\27\1\200\5\0\1\200\1\27\1\202\1\342"+
    "\1\27\1\343\2\27\17\0\7\27\1\200\13\27\1\0"+
    "\1\200\5\27\1\344\3\27\1\345\2\27\1\346\1\200"+
    "\3\27\1\347\7\0\7\27\7\0\1\340\5\0\1\340"+
    "\35\0\1\340\14\0\1\340\15\0\1\340\30\0\1\27"+
    "\1\203\5\0\1\203\1\27\1\350\5\27\17\0\7\27"+
    "\1\203\13\27\1\0\1\203\15\27\1\203\4\27\7\0"+
    "\7\27\17\0\1\44\117\0\2\205\5\0\2\205\1\0"+
    "\5\205\17\0\23\205\1\0\23\205\2\0\1\351\4\0"+
    "\7\205\46\0\1\352\100\0\1\353\163\0\1\354\143\0"+
    "\1\355\122\0\1\356\123\0\1\357\1\360\124\0\1\361"+
    "\70\0\2\216\5\0\2\216\1\0\5\216\17\0\23\216"+
    "\1\0\23\216\2\0\1\362\4\0\7\216\110\0\1\217"+
    "\56\0\1\44\77\0\1\363\1\364\2\0\1\365\1\366"+
    "\1\367\1\0\2\364\1\0\5\364\17\0\7\364\1\0"+
    "\13\364\2\0\15\364\1\0\4\364\7\0\7\364\6\0"+
    "\2\27\5\0\2\27\1\0\5\27\17\0\15\27\1\370"+
    "\5\27\1\0\23\27\7\0\7\27\6\0\2\27\5\0"+
    "\2\27\1\0\5\27\17\0\11\27\1\371\11\27\1\0"+
    "\23\27\7\0\7\27\6\0\2\27\5\0\2\27\1\0"+
    "\5\27\17\0\5\27\1\372\15\27\1\0\23\27\7\0"+
    "\7\27\6\0\2\27\5\0\2\27\1\0\5\27\17\0"+
    "\10\27\1\226\12\27\1\0\23\27\7\0\7\27\6\0"+
    "\2\27\5\0\2\27\1\0\5\27\17\0\21\27\1\373"+
    "\1\27\1\0\23\27\7\0\7\27\6\0\2\27\5\0"+
    "\2\27\1\0\5\27\17\0\6\27\1\374\14\27\1\0"+
    "\23\27\7\0\7\27\6\0\2\27\5\0\2\27\1\0"+
    "\5\27\17\0\11\27\1\375\11\27\1\0\23\27\7\0"+
    "\7\27\6\0\2\27\5\0\2\27\1\0\5\27\17\0"+
    "\23\27\1\0\23\27\7\0\4\27\1\376\2\27\6\0"+
    "\2\27\5\0\2\27\1\0\5\27\17\0\3\27\1\226"+
    "\17\27\1\0\23\27\7\0\7\27\6\0\2\27\5\0"+
    "\2\27\1\0\5\27\17\0\3\27\1\377\15\27\1\u0100"+
    "\1\27\1\0\23\27\7\0\1\u0101\6\27\6\0\2\27"+
    "\5\0\2\27\1\0\5\27\17\0\1\27\1\226\21\27"+
    "\1\0\23\27\7\0\7\27\6\0\2\27\5\0\2\27"+
    "\1\0\5\27\17\0\20\27\1\u0102\2\27\1\0\23\27"+
    "\7\0\7\27\6\0\2\27\5\0\2\27\1\0\5\27"+
    "\17\0\5\27\1\236\15\27\1\0\23\27\7\0\7\27"+
    "\6\0\2\27\5\0\1\27\1\225\1\0\5\27\17\0"+
    "\23\27\1\0\23\27\7\0\7\27\6\0\2\27\5\0"+
    "\2\27\1\0\5\27\17\0\12\27\1\226\10\27\1\0"+
    "\23\27\7\0\7\27\6\0\2\27\5\0\2\27\1\0"+
    "\5\27\17\0\23\27\1\0\23\27\7\0\2\27\1\u0103"+
    "\4\27\6\0\2\27\5\0\2\27\1\0\5\27\17\0"+
    "\10\27\1\u0104\12\27\1\0\23\27\7\0\7\27\6\0"+
    "\2\27\5\0\2\27\1\0\5\27\17\0\3\27\1\u0105"+
    "\6\27\1\u0106\10\27\1\0\23\27\7\0\5\27\1\u0107"+
    "\1\27\6\0\2\27\5\0\2\27\1\0\5\27\17\0"+
    "\5\27\1\226\15\27\1\0\23\27\7\0\7\27\6\0"+
    "\2\247\5\0\2\247\1\0\5\247\17\0\23\247\1\0"+
    "\23\247\2\0\1\u0108\4\0\7\247\6\0\1\247\6\0"+
    "\2\247\1\0\5\247\17\0\7\247\1\0\13\247\1\u0109"+
    "\1\0\15\247\1\0\4\247\7\0\7\247\20\0\1\u010a"+
    "\3\250\1\u010b\44\0\1\u010c\1\u010d\1\250\2\0\1\250"+
    "\1\0\1\250\1\u010e\1\250\1\u010f\1\u0110\1\250\1\0"+
    "\4\250\25\0\1\253\43\0\1\253\14\0\1\253\15\0"+
    "\1\253\30\0\2\255\5\0\2\255\1\0\5\255\17\0"+
    "\23\255\1\0\23\255\2\0\1\u0111\4\0\7\255\110\0"+
    "\1\256\26\0\2\27\5\0\2\27\1\0\5\27\17\0"+
    "\11\27\1\u0112\11\27\1\0\23\27\7\0\7\27\6\0"+
    "\2\27\5\0\2\27\1\0\5\27\17\0\10\27\1\u0103"+
    "\12\27\1\0\23\27\7\0\7\27\6\0\2\27\5\0"+
    "\2\27\1\0\5\27\17\0\23\27\1\0\23\27\7\0"+
    "\3\27\1\226\3\27\6\0\2\27\5\0\2\27\1\0"+
    "\5\27\17\0\6\27\1\u0113\14\27\1\0\23\27\7\0"+
    "\7\27\6\0\2\27\5\0\2\27\1\0\5\27\17\0"+
    "\6\27\1\u0114\14\27\1\0\23\27\7\0\7\27\6\0"+
    "\2\27\5\0\2\27\1\0\5\27\17\0\14\27\1\226"+
    "\6\27\1\0\23\27\7\0\7\27\6\0\2\27\5\0"+
    "\2\27\1\0\5\27\17\0\15\27\1\231\5\27\1\0"+
    "\23\27\7\0\7\27\6\0\2\27\5\0\2\27\1\0"+
    "\5\27\17\0\23\27\1\0\23\27\7\0\4\27\1\u0103"+
    "\2\27\2\0\2\113\1\114\61\113\1\u0115\44\113\4\0"+
    "\1\116\1\274\5\0\1\274\1\116\1\202\5\116\17\0"+
    "\7\116\1\274\13\116\1\0\1\274\15\116\1\274\4\116"+
    "\7\0\7\116\6\0\1\116\1\274\5\0\1\274\1\116"+
    "\1\202\5\116\17\0\7\116\1\274\13\116\1\0\1\274"+
    "\5\116\1\u0116\3\116\1\u0117\2\116\1\u0118\1\274\3\116"+
    "\1\u0119\7\0\7\116\6\0\1\116\1\276\5\0\1\276"+
    "\1\116\1\350\5\116\17\0\7\116\1\276\13\116\1\0"+
    "\1\276\15\116\1\276\4\116\7\0\7\116\6\0\2\116"+
    "\5\0\2\116\1\0\5\116\17\0\15\116\1\u011a\5\116"+
    "\1\0\23\116\7\0\7\116\6\0\2\116\5\0\2\116"+
    "\1\0\5\116\17\0\11\116\1\u011b\11\116\1\0\23\116"+
    "\7\0\7\116\6\0\2\116\5\0\2\116\1\0\5\116"+
    "\17\0\5\116\1\u011c\15\116\1\0\23\116\7\0\7\116"+
    "\6\0\2\116\5\0\2\116\1\0\5\116\17\0\10\116"+
    "\1\302\12\116\1\0\23\116\7\0\7\116\6\0\2\116"+
    "\5\0\2\116\1\0\5\116\17\0\21\116\1\u011d\1\116"+
    "\1\0\23\116\7\0\7\116\6\0\2\116\5\0\2\116"+
    "\1\0\5\116\17\0\6\116\1\u011e\14\116\1\0\23\116"+
    "\7\0\7\116\6\0\2\116\5\0\2\116\1\0\5\116"+
    "\17\0\11\116\1\u011f\11\116\1\0\23\116\7\0\7\116"+
    "\6\0\2\116\5\0\2\116\1\0\5\116\17\0\23\116"+
    "\1\0\23\116\7\0\4\116\1\u0120\2\116\6\0\2\116"+
    "\5\0\2\116\1\0\5\116\17\0\3\116\1\302\17\116"+
    "\1\0\23\116\7\0\7\116\6\0\2\116\5\0\2\116"+
    "\1\0\5\116\17\0\3\116\1\u0121\15\116\1\u0122\1\116"+
    "\1\0\23\116\7\0\1\u0123\6\116\6\0\2\116\5\0"+
    "\2\116\1\0\5\116\17\0\1\116\1\302\21\116\1\0"+
    "\23\116\7\0\7\116\6\0\2\116\5\0\2\116\1\0"+
    "\5\116\17\0\20\116\1\u0124\2\116\1\0\23\116\7\0"+
    "\7\116\6\0\2\116\5\0\2\116\1\0\5\116\17\0"+
    "\5\116\1\312\15\116\1\0\23\116\7\0\7\116\6\0"+
    "\2\116\5\0\1\116\1\301\1\0\5\116\17\0\23\116"+
    "\1\0\23\116\7\0\7\116\6\0\2\116\5\0\2\116"+
    "\1\0\5\116\17\0\12\116\1\302\10\116\1\0\23\116"+
    "\7\0\7\116\6\0\2\116\5\0\2\116\1\0\5\116"+
    "\17\0\23\116\1\0\23\116\7\0\2\116\1\u0125\4\116"+
    "\6\0\2\116\5\0\2\116\1\0\5\116\17\0\10\116"+
    "\1\u0126\12\116\1\0\23\116\7\0\7\116\6\0\2\116"+
    "\5\0\2\116\1\0\5\116\17\0\3\116\1\u0127\6\116"+
    "\1\u0128\10\116\1\0\23\116\7\0\5\116\1\u0129\1\116"+
    "\6\0\2\116\5\0\2\116\1\0\5\116\17\0\5\116"+
    "\1\302\15\116\1\0\23\116\7\0\7\116\6\0\2\116"+
    "\5\0\2\116\1\0\5\116\17\0\11\116\1\u012a\11\116"+
    "\1\0\23\116\7\0\7\116\6\0\2\116\5\0\2\116"+
    "\1\0\5\116\17\0\10\116\1\u0125\12\116\1\0\23\116"+
    "\7\0\7\116\6\0\2\116\5\0\2\116\1\0\5\116"+
    "\17\0\23\116\1\0\23\116\7\0\3\116\1\302\3\116"+
    "\6\0\2\116\5\0\2\116\1\0\5\116\17\0\6\116"+
    "\1\u012b\14\116\1\0\23\116\7\0\7\116\6\0\2\116"+
    "\5\0\2\116\1\0\5\116\17\0\6\116\1\u012c\14\116"+
    "\1\0\23\116\7\0\7\116\6\0\2\116\5\0\2\116"+
    "\1\0\5\116\17\0\14\116\1\302\6\116\1\0\23\116"+
    "\7\0\7\116\6\0\2\116\5\0\2\116\1\0\5\116"+
    "\17\0\15\116\1\305\5\116\1\0\23\116\7\0\7\116"+
    "\6\0\2\116\5\0\2\116\1\0\5\116\17\0\23\116"+
    "\1\0\23\116\7\0\4\116\1\u0125\2\116\6\0\1\27"+
    "\1\200\5\0\1\200\1\27\1\202\5\27\17\0\7\27"+
    "\1\200\13\27\1\0\1\200\5\27\1\344\3\27\1\345"+
    "\2\27\1\346\1\200\3\27\1\347\7\0\7\27\7\0"+
    "\1\337\5\0\1\337\1\0\1\350\33\0\1\337\14\0"+
    "\1\337\15\0\1\337\30\0\2\27\5\0\2\27\1\0"+
    "\1\27\1\u012d\3\27\17\0\23\27\1\0\23\27\7\0"+
    "\7\27\6\0\2\27\5\0\2\27\1\0\3\27\1\u012e"+
    "\1\27\17\0\23\27\1\0\23\27\7\0\7\27\6\0"+
    "\2\27\5\0\2\27\1\0\5\27\17\0\23\27\1\0"+
    "\13\27\1\u012f\7\27\7\0\7\27\6\0\2\27\5\0"+
    "\2\27\1\0\5\27\17\0\23\27\1\0\3\27\1\u0130"+
    "\17\27\7\0\7\27\6\0\2\27\5\0\2\27\1\0"+
    "\5\27\17\0\23\27\1\0\3\27\1\u0131\17\27\7\0"+
    "\7\27\6\0\2\27\5\0\2\27\1\0\3\27\1\u0132"+
    "\1\27\17\0\23\27\1\0\23\27\7\0\7\27\7\0"+
    "\1\u0133\43\0\1\u0133\14\0\1\u0133\15\0\1\u0133\137\0"+
    "\1\u0134\62\0\1\u0135\132\0\1\361\131\0\1\u0136\125\0"+
    "\1\u0135\11\0\1\u0137\120\0\1\u0138\142\0\1\u0139\126\0"+
    "\1\u013a\123\0\1\u0135\171\0\1\u013b\21\0\2\364\5\0"+
    "\2\364\1\0\5\364\17\0\23\364\1\0\23\364\7\0"+
    "\7\364\6\0\1\u013c\6\0\2\u013c\1\0\5\u013c\17\0"+
    "\7\u013c\1\0\13\u013c\2\0\15\u013c\1\0\4\u013c\7\0"+
    "\7\u013c\6\0\1\u013d\6\0\2\u013d\1\0\5\u013d\17\0"+
    "\7\u013d\1\0\13\u013d\2\0\15\u013d\1\0\4\u013d\7\0"+
    "\7\u013d\6\0\1\u013e\6\0\2\u013e\1\0\5\u013e\17\0"+
    "\7\u013e\1\0\13\u013e\2\0\15\u013e\1\0\4\u013e\7\0"+
    "\7\u013e\6\0\2\27\5\0\2\27\1\0\5\27\17\0"+
    "\16\27\1\u013f\4\27\1\0\23\27\7\0\7\27\6\0"+
    "\2\27\5\0\2\27\1\0\5\27\17\0\20\27\1\u0103"+
    "\2\27\1\0\23\27\7\0\7\27\6\0\2\27\5\0"+
    "\2\27\1\0\5\27\17\0\20\27\1\226\2\27\1\0"+
    "\23\27\7\0\7\27\6\0\2\27\5\0\2\27\1\0"+
    "\5\27\17\0\11\27\1\u0140\11\27\1\0\23\27\7\0"+
    "\7\27\6\0\2\27\5\0\2\27\1\0\5\27\17\0"+
    "\23\27\1\0\23\27\7\0\5\27\1\226\1\27\6\0"+
    "\2\27\5\0\2\27\1\0\5\27\17\0\23\27\1\0"+
    "\23\27\7\0\4\27\1\u0141\2\27\6\0\2\27\5\0"+
    "\2\27\1\0\5\27\17\0\5\27\1\226\3\27\1\62"+
    "\11\27\1\0\23\27\7\0\7\27\6\0\2\27\5\0"+
    "\2\27\1\0\5\27\17\0\2\27\1\226\20\27\1\0"+
    "\23\27\7\0\7\27\6\0\2\27\5\0\2\27\1\0"+
    "\5\27\17\0\22\27\1\u0142\1\0\23\27\7\0\7\27"+
    "\6\0\2\27\5\0\2\27\1\0\5\27\17\0\12\27"+
    "\1\u0143\10\27\1\0\23\27\7\0\7\27\6\0\2\27"+
    "\5\0\2\27\1\0\5\27\17\0\5\27\1\u0144\15\27"+
    "\1\0\23\27\7\0\7\27\6\0\2\27\5\0\2\27"+
    "\1\0\5\27\17\0\5\27\1\62\15\27\1\0\23\27"+
    "\7\0\7\27\6\0\2\27\5\0\2\27\1\0\5\27"+
    "\17\0\11\27\1\374\11\27\1\0\23\27\7\0\7\27"+
    "\6\0\2\27\5\0\2\27\1\0\5\27\17\0\5\27"+
    "\1\u0145\15\27\1\0\23\27\7\0\7\27\115\0\1\u0146"+
    "\34\0\1\u0147\132\0\1\u0148\130\0\1\u0149\47\0\1\u014a"+
    "\55\0\1\u014b\220\0\1\u014c\41\0\1\u014d\2\0\1\u014e"+
    "\216\0\1\u014f\133\0\1\u0150\21\0\2\27\5\0\2\27"+
    "\1\0\5\27\17\0\23\27\1\0\23\27\7\0\5\27"+
    "\1\246\1\27\6\0\2\27\5\0\2\27\1\0\5\27"+
    "\17\0\12\27\1\246\10\27\1\0\23\27\7\0\7\27"+
    "\6\0\2\27\5\0\2\27\1\0\5\27\17\0\23\27"+
    "\1\0\23\27\7\0\5\27\1\u0151\1\27\2\0\2\113"+
    "\1\114\51\113\1\u0152\54\113\4\0\2\116\5\0\2\116"+
    "\1\0\5\116\17\0\23\116\1\0\13\116\1\u0153\7\116"+
    "\7\0\7\116\6\0\2\116\5\0\2\116\1\0\5\116"+
    "\17\0\23\116\1\0\3\116\1\u0154\17\116\7\0\7\116"+
    "\6\0\2\116\5\0\2\116\1\0\5\116\17\0\23\116"+
    "\1\0\3\116\1\u0155\17\116\7\0\7\116\6\0\2\116"+
    "\5\0\2\116\1\0\3\116\1\u0156\1\116\17\0\23\116"+
    "\1\0\23\116\7\0\7\116\6\0\2\116\5\0\2\116"+
    "\1\0\5\116\17\0\16\116\1\u0157\4\116\1\0\23\116"+
    "\7\0\7\116\6\0\2\116\5\0\2\116\1\0\5\116"+
    "\17\0\20\116\1\u0125\2\116\1\0\23\116\7\0\7\116"+
    "\6\0\2\116\5\0\2\116\1\0\5\116\17\0\20\116"+
    "\1\302\2\116\1\0\23\116\7\0\7\116\6\0\2\116"+
    "\5\0\2\116\1\0\5\116\17\0\11\116\1\u0158\11\116"+
    "\1\0\23\116\7\0\7\116\6\0\2\116\5\0\2\116"+
    "\1\0\5\116\17\0\23\116\1\0\23\116\7\0\5\116"+
    "\1\302\1\116\6\0\2\116\5\0\2\116\1\0\5\116"+
    "\17\0\23\116\1\0\23\116\7\0\4\116\1\u0159\2\116"+
    "\6\0\2\116\5\0\2\116\1\0\5\116\17\0\5\116"+
    "\1\302\3\116\1\130\11\116\1\0\23\116\7\0\7\116"+
    "\6\0\2\116\5\0\2\116\1\0\5\116\17\0\2\116"+
    "\1\302\20\116\1\0\23\116\7\0\7\116\6\0\2\116"+
    "\5\0\2\116\1\0\5\116\17\0\22\116\1\u015a\1\0"+
    "\23\116\7\0\7\116\6\0\2\116\5\0\2\116\1\0"+
    "\5\116\17\0\12\116\1\u015b\10\116\1\0\23\116\7\0"+
    "\7\116\6\0\2\116\5\0\2\116\1\0\5\116\17\0"+
    "\5\116\1\u015c\15\116\1\0\23\116\7\0\7\116\6\0"+
    "\2\116\5\0\2\116\1\0\5\116\17\0\5\116\1\130"+
    "\15\116\1\0\23\116\7\0\7\116\6\0\2\116\5\0"+
    "\2\116\1\0\5\116\17\0\11\116\1\u011e\11\116\1\0"+
    "\23\116\7\0\7\116\6\0\2\116\5\0\2\116\1\0"+
    "\5\116\17\0\5\116\1\u015d\15\116\1\0\23\116\7\0"+
    "\7\116\6\0\2\116\5\0\2\116\1\0\5\116\17\0"+
    "\23\116\1\0\23\116\7\0\5\116\1\322\1\116\6\0"+
    "\2\116\5\0\2\116\1\0\5\116\17\0\12\116\1\322"+
    "\10\116\1\0\23\116\7\0\7\116\6\0\2\116\5\0"+
    "\2\116\1\0\5\116\17\0\23\116\1\0\23\116\7\0"+
    "\5\116\1\u015e\1\116\6\0\2\27\5\0\2\27\1\0"+
    "\2\27\1\u015f\2\27\17\0\23\27\1\0\23\27\7\0"+
    "\7\27\6\0\2\27\5\0\2\27\1\0\4\27\1\u0160"+
    "\17\0\23\27\1\0\23\27\7\0\7\27\6\0\2\27"+
    "\5\0\2\27\1\0\5\27\17\0\23\27\1\0\5\27"+
    "\1\u0161\15\27\7\0\7\27\6\0\2\27\5\0\2\27"+
    "\1\0\1\27\1\u0162\3\27\17\0\23\27\1\0\23\27"+
    "\7\0\7\27\6\0\2\27\5\0\2\27\1\0\5\27"+
    "\17\0\23\27\1\0\12\27\1\u0162\10\27\7\0\7\27"+
    "\6\0\2\27\5\0\2\27\1\0\5\27\17\0\23\27"+
    "\1\0\11\27\1\u0163\11\27\7\0\7\27\7\0\1\u0133"+
    "\5\0\1\u0133\1\0\1\350\33\0\1\u0133\14\0\1\u0133"+
    "\15\0\1\u0133\30\0\1\205\6\0\2\205\1\0\5\205"+
    "\17\0\7\205\1\0\13\205\2\0\15\205\1\0\4\205"+
    "\7\0\7\205\2\0\2\u0135\1\u0164\126\u0135\45\0\1\u0165"+
    "\127\0\1\u0166\141\0\1\u0135\126\0\1\u0167\135\0\1\u0135"+
    "\54\0\1\216\6\0\2\216\1\0\5\216\17\0\7\216"+
    "\1\0\13\216\2\0\15\216\1\0\4\216\7\0\7\216"+
    "\6\0\2\u013c\1\0\1\u0168\3\0\2\u013c\1\0\5\u013c"+
    "\17\0\23\u013c\1\0\23\u013c\7\0\7\u013c\6\0\2\u013d"+
    "\2\0\1\u0168\2\0\2\u013d\1\0\5\u013d\17\0\23\u013d"+
    "\1\0\23\u013d\7\0\7\u013d\6\0\2\u013e\3\0\1\u0168"+
    "\1\0\2\u013e\1\0\5\u013e\17\0\23\u013e\1\0\23\u013e"+
    "\7\0\7\u013e\6\0\2\27\5\0\2\27\1\0\5\27"+
    "\17\0\6\27\1\u0169\14\27\1\0\23\27\7\0\7\27"+
    "\6\0\2\27\5\0\2\27\1\0\5\27\17\0\20\27"+
    "\1\u016a\2\27\1\0\23\27\7\0\7\27\6\0\2\27"+
    "\5\0\2\27\1\0\5\27\17\0\12\27\1\u016b\10\27"+
    "\1\0\23\27\7\0\7\27\6\0\2\27\5\0\2\27"+
    "\1\0\5\27\17\0\11\27\1\u016c\11\27\1\0\23\27"+
    "\7\0\7\27\6\0\2\27\5\0\2\27\1\0\5\27"+
    "\17\0\11\27\1\u016d\11\27\1\0\23\27\7\0\7\27"+
    "\6\0\2\27\5\0\2\27\1\0\5\27\17\0\6\27"+
    "\1\u016e\14\27\1\0\23\27\7\0\7\27\6\0\2\27"+
    "\5\0\2\27\1\0\5\27\17\0\23\27\1\0\23\27"+
    "\7\0\4\27\1\u016f\2\27\6\0\1\247\6\0\2\247"+
    "\1\0\5\247\17\0\7\247\1\0\13\247\2\0\15\247"+
    "\1\0\4\247\7\0\7\247\101\0\1\u0170\122\0\1\u0171"+
    "\127\0\1\u0172\60\0\1\u0173\123\0\1\u0174\206\0\1\u0175"+
    "\130\0\1\u0176\142\0\1\u0177\43\0\1\u0178\116\0\1\255"+
    "\6\0\2\255\1\0\5\255\17\0\7\255\1\0\13\255"+
    "\2\0\15\255\1\0\4\255\7\0\7\255\6\0\2\27"+
    "\5\0\2\27\1\0\5\27\17\0\6\27\1\u0179\14\27"+
    "\1\0\23\27\7\0\7\27\2\0\2\u0152\1\u017a\126\u0152"+
    "\4\0\2\116\5\0\2\116\1\0\5\116\17\0\23\116"+
    "\1\0\5\116\1\u017b\15\116\7\0\7\116\6\0\2\116"+
    "\5\0\2\116\1\0\1\116\1\u017c\3\116\17\0\23\116"+
    "\1\0\23\116\7\0\7\116\6\0\2\116\5\0\2\116"+
    "\1\0\5\116\17\0\23\116\1\0\12\116\1\u017c\10\116"+
    "\7\0\7\116\6\0\2\116\5\0\2\116\1\0\5\116"+
    "\17\0\23\116\1\0\11\116\1\u017d\11\116\7\0\7\116"+
    "\6\0\2\116\5\0\2\116\1\0\5\116\17\0\6\116"+
    "\1\u017e\14\116\1\0\23\116\7\0\7\116\6\0\2\116"+
    "\5\0\2\116\1\0\5\116\17\0\20\116\1\u017f\2\116"+
    "\1\0\23\116\7\0\7\116\6\0\2\116\5\0\2\116"+
    "\1\0\5\116\17\0\12\116\1\u0180\10\116\1\0\23\116"+
    "\7\0\7\116\6\0\2\116\5\0\2\116\1\0\5\116"+
    "\17\0\11\116\1\u0181\11\116\1\0\23\116\7\0\7\116"+
    "\6\0\2\116\5\0\2\116\1\0\5\116\17\0\11\116"+
    "\1\u0182\11\116\1\0\23\116\7\0\7\116\6\0\2\116"+
    "\5\0\2\116\1\0\5\116\17\0\6\116\1\u0183\14\116"+
    "\1\0\23\116\7\0\7\116\6\0\2\116\5\0\2\116"+
    "\1\0\5\116\17\0\23\116\1\0\23\116\7\0\4\116"+
    "\1\u0184\2\116\6\0\2\116\5\0\2\116\1\0\5\116"+
    "\17\0\6\116\1\u0185\14\116\1\0\23\116\7\0\7\116"+
    "\6\0\2\27\5\0\1\u0186\1\27\1\0\5\27\17\0"+
    "\23\27\1\0\23\27\7\0\7\27\6\0\2\27\5\0"+
    "\2\27\1\0\3\27\1\u015f\1\27\17\0\23\27\1\0"+
    "\23\27\7\0\7\27\6\0\2\27\5\0\1\u0187\1\27"+
    "\1\0\5\27\17\0\23\27\1\0\23\27\7\0\7\27"+
    "\6\0\2\27\5\0\2\27\1\0\1\u0161\4\27\17\0"+
    "\23\27\1\0\23\27\7\0\7\27\6\0\2\27\5\0"+
    "\2\27\1\0\5\27\17\0\23\27\1\0\23\27\7\0"+
    "\6\27\1\u0188\53\0\1\u0135\124\0\1\u0189\145\0\1\u0135"+
    "\52\0\2\27\5\0\2\27\1\0\5\27\17\0\17\27"+
    "\1\246\3\27\1\0\23\27\7\0\7\27\6\0\2\27"+
    "\5\0\2\27\1\0\5\27\17\0\5\27\1\u018a\15\27"+
    "\1\0\23\27\7\0\7\27\6\0\2\27\5\0\2\27"+
    "\1\0\5\27\17\0\23\27\1\0\23\27\7\0\4\27"+
    "\1\u0100\2\27\6\0\2\27\5\0\2\27\1\0\5\27"+
    "\17\0\10\27\1\246\12\27\1\0\23\27\7\0\7\27"+
    "\6\0\2\27\5\0\2\27\1\0\5\27\17\0\20\27"+
    "\1\u018b\2\27\1\0\23\27\7\0\7\27\6\0\2\27"+
    "\5\0\2\27\1\0\5\27\17\0\15\27\1\u018c\5\27"+
    "\1\0\23\27\7\0\7\27\6\0\2\27\5\0\2\27"+
    "\1\0\5\27\17\0\23\27\1\0\23\27\7\0\4\27"+
    "\1\226\2\27\104\0\1\u018d\45\0\1\u018e\130\0\1\u018f"+
    "\127\0\1\u0190\132\0\1\u0191\1\0\1\u0192\206\0\1\u0193"+
    "\127\0\1\u0194\135\0\1\u0195\43\0\1\250\115\0\2\27"+
    "\5\0\2\27\1\0\5\27\17\0\10\27\1\u0100\12\27"+
    "\1\0\23\27\7\0\7\27\6\0\2\116\5\0\1\u0196"+
    "\1\116\1\0\5\116\17\0\23\116\1\0\23\116\7\0"+
    "\7\116\6\0\2\116\5\0\2\116\1\0\1\u017b\4\116"+
    "\17\0\23\116\1\0\23\116\7\0\7\116\6\0\2\116"+
    "\5\0\2\116\1\0\5\116\17\0\23\116\1\0\23\116"+
    "\7\0\6\116\1\u0197\6\0\2\116\5\0\2\116\1\0"+
    "\5\116\17\0\17\116\1\322\3\116\1\0\23\116\7\0"+
    "\7\116\6\0\2\116\5\0\2\116\1\0\5\116\17\0"+
    "\5\116\1\u0198\15\116\1\0\23\116\7\0\7\116\6\0"+
    "\2\116\5\0\2\116\1\0\5\116\17\0\23\116\1\0"+
    "\23\116\7\0\4\116\1\u0122\2\116\6\0\2\116\5\0"+
    "\2\116\1\0\5\116\17\0\10\116\1\322\12\116\1\0"+
    "\23\116\7\0\7\116\6\0\2\116\5\0\2\116\1\0"+
    "\5\116\17\0\20\116\1\u0199\2\116\1\0\23\116\7\0"+
    "\7\116\6\0\2\116\5\0\2\116\1\0\5\116\17\0"+
    "\15\116\1\u019a\5\116\1\0\23\116\7\0\7\116\6\0"+
    "\2\116\5\0\2\116\1\0\5\116\17\0\23\116\1\0"+
    "\23\116\7\0\4\116\1\302\2\116\6\0\2\116\5\0"+
    "\2\116\1\0\5\116\17\0\10\116\1\u0122\12\116\1\0"+
    "\23\116\7\0\7\116\6\0\2\27\5\0\1\u019b\1\27"+
    "\1\0\5\27\17\0\23\27\1\0\23\27\7\0\7\27"+
    "\6\0\2\27\5\0\1\u019c\1\27\1\0\5\27\17\0"+
    "\23\27\1\0\23\27\7\0\7\27\6\0\2\27\5\0"+
    "\2\27\1\0\3\27\1\u019d\1\27\17\0\23\27\1\0"+
    "\23\27\7\0\7\27\55\0\1\u019e\61\0\2\27\5\0"+
    "\2\27\1\0\5\27\17\0\3\27\1\u0100\17\27\1\0"+
    "\23\27\7\0\7\27\6\0\2\27\5\0\2\27\1\0"+
    "\5\27\17\0\22\27\1\246\1\0\23\27\7\0\7\27"+
    "\6\0\2\27\5\0\2\27\1\0\5\27\17\0\4\27"+
    "\1\226\16\27\1\0\23\27\7\0\7\27\22\0\1\u019f"+
    "\132\0\1\250\177\0\1\u01a0\52\0\1\u01a1\133\0\1\u01a2"+
    "\202\0\1\u01a3\60\0\1\u01a4\212\0\1\u01a5\126\0\1\u01a6"+
    "\34\0\2\116\5\0\1\u01a7\1\116\1\0\5\116\17\0"+
    "\23\116\1\0\23\116\7\0\7\116\6\0\2\116\5\0"+
    "\2\116\1\0\3\116\1\u01a8\1\116\17\0\23\116\1\0"+
    "\23\116\7\0\7\116\6\0\2\116\5\0\2\116\1\0"+
    "\5\116\17\0\3\116\1\u0122\17\116\1\0\23\116\7\0"+
    "\7\116\6\0\2\116\5\0\2\116\1\0\5\116\17\0"+
    "\22\116\1\322\1\0\23\116\7\0\7\116\6\0\2\116"+
    "\5\0\2\116\1\0\5\116\17\0\4\116\1\302\16\116"+
    "\1\0\23\116\7\0\7\116\6\0\2\27\5\0\2\27"+
    "\1\0\5\27\17\0\23\27\1\0\4\27\1\u0162\16\27"+
    "\7\0\7\27\64\0\1\u01a9\137\0\1\u01aa\56\0\1\u01ab"+
    "\205\0\1\u01ac\127\0\1\u01ad\126\0\1\u01ae\52\0\1\u01af"+
    "\135\0\1\u01b0\212\0\1\u01b1\32\0\2\116\5\0\2\116"+
    "\1\0\5\116\17\0\23\116\1\0\4\116\1\u017c\16\116"+
    "\7\0\7\116\63\0\1\u0135\66\0\1\u01b2\203\0\1\u01b3"+
    "\133\0\1\u01b4\134\0\1\u01b5\45\0\1\u01b6\130\0\1\u01b7"+
    "\130\0\1\250\211\0\1\u01b8\123\0\1\250\51\0\1\u01b9"+
    "\211\0\1\u01ba\126\0\1\u01bb\51\0\1\u01bc\205\0\1\u01bd"+
    "\61\0\1\u01be\202\0\1\u01bf\57\0\1\u01c0\121\0\1\u01c1"+
    "\213\0\1\u01c2\122\0\1\u01c3\140\0\1\u01b0\121\0\1\u01c4"+
    "\55\0\1\u01c5\215\0\1\u01c6\46\0\1\u01c7\211\0\1\u01c8"+
    "\50\0\1\u01c9\204\0\1\u01ca\132\0\1\u01cb\135\0\1\u01cc"+
    "\113\0\1\u01cd\134\0\1\250\47\0\1\u01ce\136\0\1\u01cf"+
    "\202\0\1\u01d0\50\0\1\u01d1\214\0\1\u01d2\123\0\1\u01c9"+
    "\137\0\1\u01d3\46\0\1\u01d4\132\0\1\u01d5\212\0\1\250"+
    "\46\0\1\u01d6\207\0\1\u01d7\52\0\1\u01d8\206\0\1\u01c9"+
    "\121\0\1\u01d9\146\0\1\u01b0\21\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[37024];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\1\2\0\2\1\13\0\1\11\1\1\1\11"+
    "\4\1\1\11\4\1\1\11\4\1\1\11\6\1\1\11"+
    "\17\1\2\11\1\1\1\11\1\1\2\11\6\1\3\11"+
    "\1\1\1\11\34\1\2\11\1\1\1\11\1\1\2\11"+
    "\1\1\2\11\1\1\2\11\1\1\3\11\1\1\1\0"+
    "\2\1\2\11\2\1\1\0\3\1\1\11\7\0\1\1"+
    "\1\11\1\0\27\1\1\11\3\1\1\11\1\1\1\11"+
    "\1\0\61\1\1\11\6\1\14\0\1\1\3\0\20\1"+
    "\2\0\5\1\1\0\1\1\1\0\42\1\1\0\1\1"+
    "\11\0\7\1\13\0\23\1\1\11\3\0\1\11\7\1"+
    "\11\0\1\1\1\11\16\1\1\0\3\1\11\0\10\1"+
    "\11\0\2\1\61\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[473];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    public void setTokenStart(int position){zzCurrentPos = zzStartRead = position;}
    public void setTokenEnd(int position){zzMarkedPos = position;}
    public CharSequence getBuffer(){ return zzBuffer;}
    public char[] getBufferArray(){ return zzBufferArray;}
    public int getBufferEnd() {return zzEndRead;}
    public int getNextTokenStart(){ return zzMarkedPos;}
    public boolean isLastToken(){ return zzMarkedPos == zzEndRead; }
    public void setState(int newState){ zzLexicalState = newState; }



  public PerlLexerGenerated(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PerlLexerGenerated(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 202) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 55: 
          { return PERL_ARRAY;
          }
        case 64: break;
        case 11: 
          { return processStringOpener();
          }
        case 65: break;
        case 60: 
          { processPodOpener();break;
          }
        case 66: break;
        case 3: 
          { if( isMultilineEnd() || isLastToken())
        {
            return endMultiline();
        }
        break;
          }
        case 67: break;
        case 9: 
          { return PERL_NUMBER;
          }
        case 68: break;
        case 45: 
          { return parseRegex();
          }
        case 69: break;
        case 63: 
          { return PERL_TAG;
          }
        case 70: break;
        case 35: 
          { return processOpenerWhiteSpace();
          }
        case 71: break;
        case 18: 
          { return processRegexOpener();
          }
        case 72: break;
        case 41: 
          { IElementType tokenType = processTransChar();
          if( tokenType != null )
                return tokenType;
          break;
          }
        case 73: break;
        case 62: 
          { processDataOpener(); break;
          }
        case 74: break;
        case 38: 
          { IElementType type = processQuoteLikeListQuote();
            if( type == null ) // disallowed sharp
                break;
            return type;
          }
        case 75: break;
        case 10: 
          { return PERL_OPERATOR;
          }
        case 76: break;
        case 7: 
          { return TokenType.WHITE_SPACE;
          }
        case 77: break;
        case 52: 
          { return PERL_HASH;
          }
        case 78: break;
        case 40: 
          { IElementType type = processTransQuote();
            if( type == null ) // disallowed sharp
                break;
            return type;
          }
        case 79: break;
        case 27: 
          { return processQuoteLikeStringOpener();
          }
        case 80: break;
        case 13: 
          { return PERL_COMMA;
          }
        case 81: break;
        case 56: 
          { return processQuoteLikeListOpener();
          }
        case 82: break;
        case 44: 
          { return PERL_REGEX_MODIFIER;
          }
        case 83: break;
        case 29: 
          { return processTransOpener();
          }
        case 84: break;
        case 1: 
          { if( isLastToken() )
            return endDataBlock();
        break;
          }
        case 85: break;
        case 22: 
          { return PERL_COLON;
          }
        case 86: break;
        case 28: 
          { return PERL_KEYWORD;
          }
        case 87: break;
        case 23: 
          { return processSemicolon();
          }
        case 88: break;
        case 50: 
          { return PERL_GLOB;
          }
        case 89: break;
        case 36: 
          { IElementType tokenType = processQuoteLikeChar();
          if( tokenType != null )
                return tokenType;
          break;
          }
        case 90: break;
        case 54: 
          { return PERL_DEPACKAGE;
          }
        case 91: break;
        case 12: 
          { return PERL_COMMENT;
          }
        case 92: break;
        case 32: 
          { yybegin(YYINITIAL); return PERL_STRING_CONTENT;
          }
        case 93: break;
        case 33: 
          { if( isLastToken() )
        {
            return endMultiline();
        }
        break;
          }
        case 94: break;
        case 58: 
          { return processMultilineOpener();
          }
        case 95: break;
        case 57: 
          { yypushback(1);return PERL_OPERATOR_FILETEST;
          }
        case 96: break;
        case 42: 
          { return processTransCloser();
          }
        case 97: break;
        case 6: 
          { return processNewLine();
          }
        case 98: break;
        case 47: 
          { return PERL_STRING_CONTENT;
          }
        case 99: break;
        case 49: 
          { return PERL_NUMBER_VERSION;
          }
        case 100: break;
        case 20: 
          { return PERL_LPAREN;
          }
        case 101: break;
        case 14: 
          { return PERL_SIGIL_HASH;
          }
        case 102: break;
        case 5: 
          { return TokenType.BAD_CHARACTER;
          }
        case 103: break;
        case 53: 
          { return PERL_SCALAR;
          }
        case 104: break;
        case 2: 
          { if( isLastToken() )
        {
            endPodBlock();
        }
        break;
          }
        case 105: break;
        case 21: 
          { return PERL_RPAREN;
          }
        case 106: break;
        case 19: 
          { return PERL_SIGIL_SCALAR;
          }
        case 107: break;
        case 24: 
          { return PERL_SIGIL_ARRAY;
          }
        case 108: break;
        case 4: 
          { yybegin(YYINITIAL);return PERL_STRING_MULTILINE_END;
          }
        case 109: break;
        case 46: 
          { IElementType nextTokenType = getParsedToken();
        if( nextTokenType == null )
            break;
        return nextTokenType;
          }
        case 110: break;
        case 34: 
          { IElementType type = processQuoteLikeQuote();
            if( type == null ) // disallowed sharp
                break;
            return type;
          }
        case 111: break;
        case 59: 
          { return PERL_OPERATOR_UNARY;
          }
        case 112: break;
        case 17: 
          { // regexp or div
    IElementType tokenType = processDiv();
    if( tokenType == null )
        break;
    return tokenType;
          }
        case 113: break;
        case 51: 
          { return PERL_ARROW_COMMA;
          }
        case 114: break;
        case 48: 
          { return PERL_DEREFERENCE;
          }
        case 115: break;
        case 30: 
          { return PERL_LBRACE;
          }
        case 116: break;
        case 16: 
          { return PERL_RANGLE;
          }
        case 117: break;
        case 31: 
          { return PERL_RBRACE;
          }
        case 118: break;
        case 15: 
          { return PERL_LANGLE;
          }
        case 119: break;
        case 39: 
          { IElementType tokenType = processQuoteLikeWord();
          if( tokenType != null )
                return tokenType;
          break;
          }
        case 120: break;
        case 37: 
          { popState(); return PERL_QUOTE;
          }
        case 121: break;
        case 8: 
          { return PERL_BAREWORD;
          }
        case 122: break;
        case 61: 
          { return endPodBlock();
          }
        case 123: break;
        case 43: 
          { popState(); yypushback(1); break;
          }
        case 124: break;
        case 26: 
          { return PERL_RBRACK;
          }
        case 125: break;
        case 25: 
          { return PERL_LBRACK;
          }
        case 126: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
