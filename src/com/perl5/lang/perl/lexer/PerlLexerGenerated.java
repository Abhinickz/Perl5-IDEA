/* The following code was generated by JFlex 1.4.3 on 16.05.15 11:18 */

package com.perl5.lang.perl.lexer;

/*
    http://jflex.de/manual.html
    http://www2.cs.tum.edu/projects/cup

*/

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import org.jetbrains.annotations.NotNull;
import com.perl5.lang.perl.util.PerlFunctionUtil;
import com.perl5.lang.perl.util.PerlScalarUtil;
import com.perl5.lang.perl.util.PerlHashUtil;
import com.perl5.lang.perl.util.PerlGlobUtil;
import com.perl5.lang.perl.util.PerlArrayUtil;
import com.perl5.lang.perl.util.PerlPackageUtil;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 16.05.15 11:18 from the specification file
 * <tt>C:/Repository/Perl5-IDEA/src/com/perl5/lang/perl/lexer/Perl.flex</tt>
 */
public abstract class PerlLexerGenerated implements PerlLexerBase {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int LEX_POD = 4;
  public static final int LEX_TRANS_MODIFIERS = 30;
  public static final int LEX_QUOTE_LIKE_LIST_OPENER = 18;
  public static final int LEX_CODE = 8;
  public static final int LEX_TRANS_OPENER = 24;
  public static final int LEX_MULTILINE_WAITING = 10;
  public static final int LEX_BAREWORD_STRING = 6;
  public static final int LEX_QUOTE_LIKE_CHARS = 14;
  public static final int LEX_QUOTE_LIKE_WORDS = 20;
  public static final int LEX_TRANS_CLOSER = 28;
  public static final int LEX_TRANS_CHARS = 26;
  public static final int LEX_REGEX_OPENER = 32;
  public static final int LEX_QUOTE_LIKE_OPENER = 12;
  public static final int LEX_PREPARSED_ITEMS = 34;
  public static final int LEX_QUOTE_LIKE_CLOSER = 16;
  public static final int LEX_EOF = 2;
  public static final int YYINITIAL = 0;
  public static final int LEX_QUOTE_LIKE_LIST_CLOSER = 22;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  0,  0,  4,  4,  5,  5,  6,  6, 
     7,  7,  8,  8,  9,  9,  7,  7, 10, 10, 11, 11, 12, 12, 13, 13, 
    14, 14, 15, 15
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\44\1\15"+
    "\1\7\1\6\1\12\1\52\1\16\1\115\1\116\1\14\1\42\1\41"+
    "\1\43\1\22\1\54\1\5\1\65\1\65\1\65\1\65\5\11\1\10"+
    "\1\110\1\50\1\47\1\51\1\46\1\13\1\30\1\32\1\36\1\27"+
    "\1\25\1\24\1\33\1\37\1\34\1\4\1\40\1\105\1\55\1\26"+
    "\1\55\1\106\1\4\1\55\1\107\1\31\1\35\1\4\2\55\2\4"+
    "\1\113\1\46\1\114\1\46\1\20\1\17\1\64\1\72\1\73\1\61"+
    "\1\63\1\56\1\75\1\62\1\67\1\4\1\74\1\104\1\71\1\76"+
    "\1\60\1\57\1\100\1\66\1\103\1\70\1\77\1\21\1\101\1\23"+
    "\1\102\1\55\1\111\1\53\1\112\1\45\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\15\0\2\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\7\1\13\1\14\1\15"+
    "\1\16\2\6\1\3\1\17\5\6\1\20\6\15\1\21"+
    "\1\22\2\15\1\23\11\6\1\24\4\6\1\25\1\6"+
    "\1\26\1\24\1\6\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\1\3\2\3\36\1\17\5\36\1\15"+
    "\11\36\1\24\4\36\1\25\1\36\1\26\1\24\1\36"+
    "\1\6\1\37\1\40\2\41\1\42\1\43\1\44\1\45"+
    "\2\46\1\47\2\50\1\51\1\52\2\53\2\0\1\54"+
    "\1\55\1\0\1\54\1\56\1\57\1\0\1\60\1\0"+
    "\1\61\1\0\1\6\1\62\1\15\1\63\6\6\1\0"+
    "\1\64\1\65\7\0\2\15\4\6\1\17\13\6\2\17"+
    "\2\6\1\25\1\24\1\66\10\6\1\2\1\36\1\62"+
    "\13\36\1\17\13\36\2\17\2\36\1\25\1\24\1\66"+
    "\10\36\1\6\3\7\1\67\5\0\6\6\1\0\1\63"+
    "\1\70\4\6\1\71\11\0\1\72\3\0\1\17\7\6"+
    "\1\73\13\6\1\2\4\36\1\70\4\36\1\17\7\36"+
    "\1\73\13\36\1\0\6\6\1\62\3\6\1\74\10\0"+
    "\10\6\1\75\17\36\5\6\1\74\3\0\3\72\10\6"+
    "\1\75\13\36\3\6\1\0\3\6\5\36\1\76\1\6"+
    "\1\77\1\0\1\36\1\77\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[417];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\117\0\236\0\355\0\u013c\0\u018b\0\u01da\0\u0229"+
    "\0\u0278\0\u02c7\0\u0316\0\u0365\0\u03b4\0\u0403\0\u0452\0\u04a1"+
    "\0\u04f0\0\u053f\0\u04f0\0\u058e\0\u05dd\0\u062c\0\u067b\0\u06ca"+
    "\0\u0719\0\u0768\0\u07b7\0\u0806\0\u0855\0\u04f0\0\u08a4\0\u08f3"+
    "\0\u0942\0\u0991\0\u09e0\0\u0a2f\0\u0a7e\0\u0acd\0\u0b1c\0\u04f0"+
    "\0\u0b6b\0\u0bba\0\u0c09\0\u0c58\0\u04f0\0\u0ca7\0\u0cf6\0\u0d45"+
    "\0\u0d94\0\u0de3\0\u04f0\0\u0e32\0\u0e81\0\u0ed0\0\u0f1f\0\u0f6e"+
    "\0\u0fbd\0\u100c\0\u105b\0\u10aa\0\u10f9\0\u1148\0\u1197\0\u11e6"+
    "\0\u1235\0\u1284\0\u12d3\0\u05dd\0\u1322\0\u1371\0\u04f0\0\u04f0"+
    "\0\u04f0\0\u04f0\0\u04f0\0\u04f0\0\u04f0\0\u04f0\0\u13c0\0\u04f0"+
    "\0\u140f\0\u145e\0\u14ad\0\u14fc\0\u154b\0\u159a\0\u15e9\0\u1638"+
    "\0\u1687\0\u16d6\0\u1725\0\u1774\0\u17c3\0\u1812\0\u1861\0\u18b0"+
    "\0\u18ff\0\u194e\0\u199d\0\u19ec\0\u1a3b\0\u1a8a\0\u1ad9\0\u1b28"+
    "\0\u1b77\0\u1bc6\0\u1c15\0\u145e\0\u1c64\0\u1cb3\0\u1d02\0\u04f0"+
    "\0\u1d51\0\u04f0\0\u1da0\0\u04f0\0\u04f0\0\u1def\0\u04f0\0\u04f0"+
    "\0\u1e3e\0\u04f0\0\u04f0\0\u1e8d\0\u04f0\0\u04f0\0\u04f0\0\u1edc"+
    "\0\u1f2b\0\u1f7a\0\u1fc9\0\u2018\0\u2067\0\u20b6\0\u04f0\0\u2105"+
    "\0\u2154\0\u21a3\0\u21f2\0\u2241\0\u2290\0\u22df\0\u232e\0\u237d"+
    "\0\u23cc\0\u241b\0\u246a\0\u24b9\0\u2508\0\u2557\0\u25a6\0\u25f5"+
    "\0\u04f0\0\u04f0\0\u2644\0\u2693\0\u26e2\0\u2731\0\u2780\0\u27cf"+
    "\0\u281e\0\u286d\0\u28bc\0\u290b\0\u295a\0\u29a9\0\u29f8\0\u05dd"+
    "\0\u2a47\0\u2a96\0\u2ae5\0\u2b34\0\u2b83\0\u2bd2\0\u2c21\0\u2c70"+
    "\0\u2cbf\0\u2d0e\0\u2d5d\0\u2dac\0\u2dfb\0\u2e4a\0\u2e99\0\u05dd"+
    "\0\u05dd\0\u05dd\0\u2ee8\0\u2f37\0\u2f86\0\u2fd5\0\u3024\0\u3073"+
    "\0\u30c2\0\u3111\0\u3160\0\u31af\0\u31fe\0\u324d\0\u329c\0\u32eb"+
    "\0\u333a\0\u3389\0\u33d8\0\u3427\0\u3476\0\u34c5\0\u3514\0\u3563"+
    "\0\u145e\0\u35b2\0\u3601\0\u3650\0\u369f\0\u36ee\0\u373d\0\u378c"+
    "\0\u37db\0\u382a\0\u3879\0\u38c8\0\u3917\0\u3966\0\u39b5\0\u3a04"+
    "\0\u145e\0\u145e\0\u145e\0\u3a53\0\u3aa2\0\u3af1\0\u3b40\0\u3b8f"+
    "\0\u3bde\0\u3c2d\0\u3c7c\0\u3ccb\0\u3d1a\0\u3d69\0\u1f7a\0\u3db8"+
    "\0\u3e07\0\u3e56\0\u3ea5\0\u3ef4\0\u3f43\0\u3f92\0\u3fe1\0\u4030"+
    "\0\u407f\0\u40ce\0\u411d\0\u416c\0\u41bb\0\u05dd\0\u420a\0\u4259"+
    "\0\u42a8\0\u42f7\0\u04f0\0\u4346\0\u4395\0\u43e4\0\u4433\0\u4482"+
    "\0\u44d1\0\u4520\0\u456f\0\u28bc\0\u45be\0\u460d\0\u465c\0\u46ab"+
    "\0\u46fa\0\u4749\0\u4798\0\u47e7\0\u4836\0\u4885\0\u48d4\0\u4923"+
    "\0\u05dd\0\u4972\0\u49c1\0\u4a10\0\u4a5f\0\u2dac\0\u4aae\0\u4afd"+
    "\0\u4b4c\0\u4b9b\0\u4bea\0\u4c39\0\u4c88\0\u4cd7\0\u4d26\0\u4d75"+
    "\0\u4dc4\0\u145e\0\u4e13\0\u4e62\0\u4eb1\0\u4f00\0\u4f4f\0\u4f9e"+
    "\0\u4fed\0\u503c\0\u508b\0\u50da\0\u5129\0\u5178\0\u145e\0\u51c7"+
    "\0\u5216\0\u5265\0\u52b4\0\u3917\0\u5303\0\u5352\0\u53a1\0\u53f0"+
    "\0\u543f\0\u548e\0\u54dd\0\u552c\0\u557b\0\u55ca\0\u5619\0\u5668"+
    "\0\u56b7\0\u5706\0\u5755\0\u57a4\0\u57f3\0\u5842\0\u5891\0\u58e0"+
    "\0\u592f\0\u597e\0\u59cd\0\u5a1c\0\u5a6b\0\u5aba\0\u5b09\0\u5b58"+
    "\0\u5ba7\0\u5bf6\0\u5c45\0\u5c94\0\u5ce3\0\u5d32\0\u5d81\0\u5dd0"+
    "\0\u5e1f\0\u5e6e\0\u5ebd\0\u5f0c\0\u5f5b\0\u5faa\0\u5ff9\0\u6048"+
    "\0\u6097\0\u60e6\0\u6135\0\u6184\0\u61d3\0\u6222\0\u6271\0\u62c0"+
    "\0\u630f\0\u635e\0\u63ad\0\u04f0\0\u63fc\0\u644b\0\u649a\0\u5a1c"+
    "\0\u5a6b\0\u5aba\0\u64e9\0\u6538\0\u6587\0\u65d6\0\u6625\0\u6674"+
    "\0\u66c3\0\u6712\0\u04f0\0\u6761\0\u67b0\0\u67ff\0\u684e\0\u689d"+
    "\0\u68ec\0\u693b\0\u698a\0\u69d9\0\u6a28\0\u6a77\0\u6ac6\0\u6b15"+
    "\0\u6b64\0\u6bb3\0\u6c02\0\u6c51\0\u6ca0\0\u6cef\0\u6d3e\0\u6d8d"+
    "\0\u6ddc\0\u6e2b\0\u05dd\0\u6e7a\0\u05dd\0\u6ec9\0\u6f18\0\u145e"+
    "\0\u6f67";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[417];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\3\36\1\37\1\40"+
    "\1\41\1\42\1\25\1\43\4\25\1\44\1\25\1\45"+
    "\1\46\1\47\2\25\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\25"+
    "\1\64\1\65\1\66\1\67\1\25\1\70\1\71\1\32"+
    "\1\72\1\73\1\74\1\75\1\25\1\76\1\25\1\77"+
    "\1\100\1\101\1\102\1\103\1\104\1\105\1\106\3\25"+
    "\1\107\1\110\1\111\1\112\1\113\1\114\1\115\2\2"+
    "\1\116\114\2\2\117\1\120\44\117\1\121\47\117\1\21"+
    "\1\22\1\23\1\24\1\122\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\3\36\1\123\1\124\1\41"+
    "\1\125\1\122\1\126\4\122\1\127\1\122\1\130\1\131"+
    "\1\132\2\122\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\133\1\57\1\60\1\61\1\62\1\63\1\122\1\134"+
    "\1\135\1\136\1\137\1\122\1\140\1\141\1\32\1\142"+
    "\1\143\1\144\1\145\1\122\1\146\1\122\1\147\1\150"+
    "\1\151\1\152\1\153\1\154\1\155\1\156\3\122\1\107"+
    "\1\110\1\111\1\112\1\113\1\114\1\115\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\3\36\1\157\1\40\1\41\1\42"+
    "\1\25\1\43\4\25\1\44\1\25\1\45\1\46\1\47"+
    "\2\25\1\50\1\51\1\52\1\53\1\54\1\55\1\133"+
    "\1\57\1\60\1\61\1\62\1\63\1\25\1\64\1\65"+
    "\1\66\1\67\1\25\1\70\1\71\1\32\1\72\1\73"+
    "\1\74\1\75\1\25\1\76\1\25\1\77\1\100\1\101"+
    "\1\102\1\103\1\104\1\105\1\106\3\25\1\107\1\110"+
    "\1\111\1\112\1\113\1\114\1\115\1\160\3\161\113\160"+
    "\1\162\1\163\115\162\2\164\1\0\114\164\1\165\3\161"+
    "\113\165\1\166\3\161\113\166\1\167\3\161\113\167\1\170"+
    "\1\171\115\170\2\172\1\0\114\172\1\173\1\174\57\173"+
    "\1\175\4\173\1\175\4\173\1\175\7\173\1\175\13\173"+
    "\1\176\3\161\113\176\1\177\1\200\115\177\121\0\1\23"+
    "\117\0\1\24\117\0\2\25\3\0\1\25\6\0\2\25"+
    "\1\0\16\25\14\0\33\25\14\0\1\32\3\0\1\32"+
    "\6\0\1\32\1\0\1\201\1\202\41\0\1\32\35\0"+
    "\1\203\2\0\1\204\1\205\1\206\6\0\2\203\1\0"+
    "\16\203\14\0\10\203\1\206\22\203\7\0\1\30\2\0"+
    "\114\30\10\0\1\207\113\0\1\32\3\0\1\32\6\0"+
    "\1\32\1\0\1\201\42\0\1\32\35\0\1\210\3\0"+
    "\1\211\7\0\2\210\1\0\16\210\14\0\10\210\1\0"+
    "\22\210\13\0\1\212\3\0\1\213\7\0\2\212\1\0"+
    "\16\212\14\0\10\212\1\0\22\212\13\0\1\214\3\0"+
    "\1\215\3\0\1\55\3\0\2\214\1\0\16\214\6\0"+
    "\1\55\5\0\10\214\1\0\22\214\13\0\2\25\3\0"+
    "\1\25\6\0\1\216\1\25\1\0\16\25\14\0\33\25"+
    "\13\0\1\25\1\217\3\0\1\217\6\0\2\25\1\0"+
    "\16\25\14\0\10\25\1\217\22\25\31\0\1\220\100\0"+
    "\1\25\1\221\3\0\1\221\6\0\2\25\1\0\16\25"+
    "\14\0\3\25\1\222\4\25\1\221\22\25\13\0\2\25"+
    "\3\0\1\25\6\0\2\25\1\0\3\25\1\223\12\25"+
    "\14\0\33\25\13\0\2\25\3\0\1\25\6\0\2\25"+
    "\1\0\2\25\1\224\13\25\14\0\33\25\13\0\2\25"+
    "\3\0\1\25\6\0\2\25\1\0\3\25\1\225\12\25"+
    "\14\0\33\25\13\0\2\25\3\0\1\25\6\0\2\25"+
    "\1\0\3\25\1\226\12\25\14\0\33\25\13\0\2\25"+
    "\3\0\1\25\6\0\2\25\1\0\14\25\1\227\1\25"+
    "\14\0\33\25\51\0\1\55\4\0\1\55\72\0\1\230"+
    "\4\0\3\230\3\0\1\230\4\0\1\55\3\0\1\55"+
    "\1\0\1\231\3\0\5\230\1\0\1\230\2\0\1\230"+
    "\1\0\1\230\1\0\4\230\1\0\1\230\1\0\1\230"+
    "\1\0\2\230\2\0\1\230\54\0\1\55\1\0\1\55"+
    "\114\0\1\55\116\0\1\55\1\0\1\55\1\0\1\232"+
    "\4\0\1\233\1\234\1\235\1\0\1\236\1\237\3\0"+
    "\1\240\2\0\1\241\73\0\1\242\1\243\115\0\1\55"+
    "\1\0\1\55\117\0\1\55\117\0\1\55\47\0\2\25"+
    "\3\0\1\25\6\0\2\25\1\0\16\25\14\0\3\25"+
    "\1\244\27\25\13\0\2\25\3\0\1\25\6\0\2\25"+
    "\1\0\16\25\14\0\7\25\1\245\1\25\1\246\21\25"+
    "\13\0\2\25\3\0\1\25\6\0\2\25\1\0\16\25"+
    "\14\0\2\25\1\247\6\25\1\250\10\25\1\222\10\25"+
    "\13\0\2\25\3\0\1\25\6\0\2\25\1\0\16\25"+
    "\14\0\3\25\1\250\2\25\1\251\24\25\13\0\2\25"+
    "\3\0\1\25\6\0\1\25\1\252\1\0\1\253\15\25"+
    "\14\0\23\25\1\250\3\25\1\254\3\25\13\0\2\25"+
    "\3\0\1\25\6\0\2\25\1\0\16\25\14\0\21\25"+
    "\1\255\11\25\13\0\2\25\3\0\1\25\6\0\2\25"+
    "\1\0\16\25\14\0\6\25\1\256\24\25\13\0\2\25"+
    "\3\0\1\25\6\0\2\25\1\0\16\25\14\0\1\25"+
    "\1\250\31\25\13\0\2\25\3\0\1\25\6\0\2\25"+
    "\1\0\16\25\14\0\11\25\1\104\21\25\13\0\2\25"+
    "\3\0\1\25\6\0\2\25\1\0\16\25\14\0\7\25"+
    "\1\257\15\25\1\250\5\25\13\0\2\25\3\0\1\25"+
    "\6\0\2\25\1\0\16\25\14\0\3\25\1\260\10\25"+
    "\1\257\12\25\1\261\3\25\13\0\2\25\3\0\1\25"+
    "\6\0\2\25\1\0\16\25\14\0\6\25\1\250\2\25"+
    "\1\262\1\263\1\250\17\25\13\0\2\25\3\0\1\25"+
    "\6\0\2\25\1\0\16\25\14\0\3\25\1\264\2\25"+
    "\1\265\24\25\13\0\2\25\3\0\1\25\6\0\2\25"+
    "\1\0\16\25\14\0\21\25\1\266\4\25\1\267\4\25"+
    "\13\0\2\25\3\0\1\25\6\0\2\25\1\0\1\270"+
    "\15\25\14\0\11\25\1\271\11\25\1\270\1\272\6\25"+
    "\13\0\2\25\3\0\1\25\6\0\2\25\1\0\16\25"+
    "\14\0\5\25\1\273\25\25\13\0\2\25\3\0\1\25"+
    "\6\0\2\25\1\0\16\25\14\0\3\25\1\274\3\25"+
    "\1\275\3\25\1\276\2\25\1\277\3\25\1\300\10\25"+
    "\13\0\2\25\3\0\1\25\6\0\2\25\1\0\16\25"+
    "\14\0\3\25\1\301\2\25\1\250\1\302\3\25\1\250"+
    "\17\25\7\0\2\117\1\120\116\117\1\120\70\117\1\303"+
    "\23\117\4\0\2\122\3\0\1\122\6\0\2\122\1\0"+
    "\16\122\14\0\33\122\13\0\2\122\3\0\1\122\6\0"+
    "\1\304\1\122\1\0\16\122\14\0\33\122\13\0\1\122"+
    "\1\305\3\0\1\305\6\0\2\122\1\0\16\122\14\0"+
    "\10\122\1\305\22\122\13\0\1\122\1\306\3\0\1\306"+
    "\6\0\2\122\1\0\16\122\14\0\3\122\1\307\4\122"+
    "\1\306\22\122\13\0\2\122\3\0\1\122\6\0\2\122"+
    "\1\0\3\122\1\310\12\122\14\0\33\122\13\0\2\122"+
    "\3\0\1\122\6\0\2\122\1\0\2\122\1\311\13\122"+
    "\14\0\33\122\13\0\2\122\3\0\1\122\6\0\2\122"+
    "\1\0\3\122\1\312\12\122\14\0\33\122\13\0\2\122"+
    "\3\0\1\122\6\0\2\122\1\0\3\122\1\313\12\122"+
    "\14\0\33\122\13\0\2\122\3\0\1\122\6\0\2\122"+
    "\1\0\14\122\1\314\1\122\14\0\33\122\54\0\1\55"+
    "\1\0\1\55\1\0\1\232\51\0\2\122\3\0\1\122"+
    "\6\0\2\122\1\0\16\122\14\0\3\122\1\315\27\122"+
    "\13\0\2\122\3\0\1\122\6\0\2\122\1\0\16\122"+
    "\14\0\7\122\1\316\1\122\1\317\21\122\13\0\2\122"+
    "\3\0\1\122\6\0\2\122\1\0\16\122\14\0\2\122"+
    "\1\320\6\122\1\321\10\122\1\307\10\122\13\0\2\122"+
    "\3\0\1\122\6\0\2\122\1\0\16\122\14\0\3\122"+
    "\1\321\2\122\1\322\24\122\13\0\2\122\3\0\1\122"+
    "\6\0\1\122\1\323\1\0\1\324\15\122\14\0\23\122"+
    "\1\321\3\122\1\325\3\122\13\0\2\122\3\0\1\122"+
    "\6\0\2\122\1\0\16\122\14\0\21\122\1\326\11\122"+
    "\13\0\2\122\3\0\1\122\6\0\2\122\1\0\16\122"+
    "\14\0\6\122\1\327\24\122\13\0\2\122\3\0\1\122"+
    "\6\0\2\122\1\0\16\122\14\0\1\122\1\321\31\122"+
    "\13\0\2\122\3\0\1\122\6\0\2\122\1\0\16\122"+
    "\14\0\11\122\1\154\21\122\13\0\2\122\3\0\1\122"+
    "\6\0\2\122\1\0\16\122\14\0\7\122\1\330\15\122"+
    "\1\321\5\122\13\0\2\122\3\0\1\122\6\0\2\122"+
    "\1\0\16\122\14\0\3\122\1\331\10\122\1\330\12\122"+
    "\1\332\3\122\13\0\2\122\3\0\1\122\6\0\2\122"+
    "\1\0\16\122\14\0\6\122\1\321\2\122\1\333\1\334"+
    "\1\321\17\122\13\0\2\122\3\0\1\122\6\0\2\122"+
    "\1\0\16\122\14\0\3\122\1\335\2\122\1\336\24\122"+
    "\13\0\2\122\3\0\1\122\6\0\2\122\1\0\16\122"+
    "\14\0\21\122\1\337\4\122\1\340\4\122\13\0\2\122"+
    "\3\0\1\122\6\0\2\122\1\0\1\341\15\122\14\0"+
    "\11\122\1\342\11\122\1\341\1\343\6\122\13\0\2\122"+
    "\3\0\1\122\6\0\2\122\1\0\16\122\14\0\5\122"+
    "\1\344\25\122\13\0\2\122\3\0\1\122\6\0\2\122"+
    "\1\0\16\122\14\0\3\122\1\345\3\122\1\346\3\122"+
    "\1\347\2\122\1\350\3\122\1\351\10\122\13\0\2\122"+
    "\3\0\1\122\6\0\2\122\1\0\16\122\14\0\3\122"+
    "\1\352\2\122\1\321\1\353\3\122\1\321\17\122\13\0"+
    "\2\25\3\0\1\25\6\0\1\354\1\25\1\0\16\25"+
    "\14\0\33\25\10\0\3\161\115\0\1\162\114\0\1\166"+
    "\3\0\113\166\2\0\1\170\116\0\1\173\116\0\1\177"+
    "\121\0\1\355\3\0\1\355\6\0\1\356\44\0\1\355"+
    "\36\0\1\357\3\0\1\357\12\0\2\357\1\0\2\357"+
    "\1\0\1\357\3\0\1\357\17\0\1\357\2\0\1\357"+
    "\1\0\3\357\4\0\2\357\27\0\2\203\2\0\1\205"+
    "\1\203\6\0\2\203\1\0\16\203\14\0\33\203\13\0"+
    "\1\360\3\0\1\361\7\0\2\360\1\0\16\360\14\0"+
    "\10\360\1\0\22\360\17\0\1\362\113\0\1\206\3\0"+
    "\1\206\53\0\1\206\35\0\2\210\2\0\1\211\1\210"+
    "\6\0\2\210\1\0\16\210\14\0\33\210\17\0\1\363"+
    "\112\0\2\212\2\0\1\213\1\212\6\0\2\212\1\0"+
    "\16\212\14\0\33\212\17\0\1\364\112\0\2\214\2\0"+
    "\1\215\1\214\6\0\2\214\1\0\16\214\14\0\33\214"+
    "\17\0\1\365\112\0\2\25\3\0\1\25\6\0\2\25"+
    "\1\0\1\25\1\366\1\367\1\25\1\370\11\25\14\0"+
    "\30\25\1\371\1\372\1\373\13\0\1\25\1\217\3\0"+
    "\1\217\6\0\1\217\1\25\1\374\16\25\14\0\10\25"+
    "\1\217\22\25\31\0\1\55\74\0\4\375\1\25\1\221"+
    "\3\375\1\221\6\375\1\221\1\25\1\375\16\25\14\375"+
    "\10\25\1\221\22\25\7\375\4\0\2\25\3\0\1\25"+
    "\6\0\2\25\1\0\16\25\14\0\11\25\1\250\21\25"+
    "\13\0\2\25\3\0\1\25\6\0\2\25\1\0\4\25"+
    "\1\376\11\25\14\0\33\25\13\0\2\25\3\0\1\25"+
    "\6\0\2\25\1\0\10\25\1\377\5\25\14\0\33\25"+
    "\13\0\2\25\3\0\1\25\6\0\2\25\1\0\11\25"+
    "\1\u0100\4\25\14\0\33\25\13\0\2\25\3\0\1\25"+
    "\6\0\2\25\1\0\11\25\1\u0101\4\25\14\0\33\25"+
    "\13\0\2\25\3\0\1\25\6\0\2\25\1\0\2\25"+
    "\1\u0102\13\25\14\0\33\25\7\0\4\u0103\2\0\3\u0103"+
    "\1\0\6\u0103\2\0\1\u0103\16\0\14\u0103\33\0\7\u0103"+
    "\60\0\1\u0104\116\0\1\u0105\57\0\1\u0106\160\0\1\u0107"+
    "\131\0\1\u0108\110\0\1\u0109\111\0\1\u010a\1\u010b\103\0"+
    "\1\55\50\0\1\u010c\1\u010d\10\0\1\u010e\1\u010f\1\u0110"+
    "\2\u010d\1\0\16\u010d\14\0\10\u010d\1\0\22\u010d\13\0"+
    "\2\25\3\0\1\25\6\0\2\25\1\0\16\25\14\0"+
    "\11\25\1\u0111\21\25\13\0\2\25\3\0\1\25\6\0"+
    "\2\25\1\0\16\25\14\0\16\25\1\u0112\14\25\13\0"+
    "\2\25\3\0\1\25\6\0\2\25\1\0\16\25\14\0"+
    "\12\25\1\u0113\20\25\13\0\2\25\3\0\1\25\6\0"+
    "\2\25\1\0\16\25\14\0\6\25\1\u0114\24\25\13\0"+
    "\2\25\3\0\1\25\6\0\2\25\1\0\16\25\14\0"+
    "\1\25\1\u0115\31\25\13\0\2\25\3\0\1\25\6\0"+
    "\2\25\1\0\16\25\14\0\7\25\1\u0116\23\25\13\0"+
    "\2\25\3\0\1\25\6\0\2\25\1\0\16\25\14\0"+
    "\12\25\1\u0117\20\25\13\0\2\25\3\0\1\25\6\0"+
    "\2\25\1\0\16\25\14\0\26\25\1\u0118\4\25\13\0"+
    "\2\25\3\0\1\25\6\0\2\25\1\0\16\25\14\0"+
    "\4\25\1\250\26\25\13\0\2\25\3\0\1\25\6\0"+
    "\2\25\1\0\16\25\14\0\1\25\1\u0119\2\25\1\u011a"+
    "\16\25\1\u011b\7\25\13\0\2\25\3\0\1\25\6\0"+
    "\2\25\1\0\16\25\14\0\2\25\1\250\30\25\13\0"+
    "\2\25\3\0\1\25\6\0\2\25\1\0\16\25\14\0"+
    "\21\25\1\u011c\11\25\13\0\2\25\3\0\1\25\6\0"+
    "\2\25\1\0\16\25\14\0\3\25\1\u011d\27\25\13\0"+
    "\2\25\3\0\1\25\6\0\2\25\1\0\16\25\14\0"+
    "\6\25\1\257\24\25\13\0\2\25\3\0\1\25\6\0"+
    "\1\25\1\247\1\0\16\25\14\0\33\25\13\0\2\25"+
    "\3\0\1\25\6\0\2\25\1\0\16\25\14\0\13\25"+
    "\1\250\17\25\13\0\2\25\3\0\1\25\6\0\2\25"+
    "\1\0\1\u011e\15\25\14\0\33\25\13\0\2\25\3\0"+
    "\1\25\6\0\2\25\1\0\16\25\14\0\4\25\1\u011f"+
    "\6\25\1\u0120\13\25\1\u0121\3\25\13\0\2\25\3\0"+
    "\1\25\6\0\2\25\1\0\16\25\14\0\6\25\1\250"+
    "\24\25\13\0\2\25\3\0\1\25\6\0\2\25\1\0"+
    "\16\25\14\0\12\25\1\u0122\20\25\13\0\2\25\3\0"+
    "\1\25\6\0\2\25\1\0\16\25\14\0\11\25\1\u011e"+
    "\21\25\13\0\2\25\3\0\1\25\6\0\2\25\1\0"+
    "\16\25\14\0\25\25\1\250\5\25\13\0\2\25\3\0"+
    "\1\25\6\0\2\25\1\0\16\25\14\0\7\25\1\u0123"+
    "\23\25\13\0\2\25\3\0\1\25\6\0\2\25\1\0"+
    "\16\25\14\0\7\25\1\u0124\23\25\13\0\2\25\3\0"+
    "\1\25\6\0\2\25\1\0\16\25\14\0\15\25\1\250"+
    "\15\25\13\0\2\25\3\0\1\25\6\0\2\25\1\0"+
    "\16\25\14\0\16\25\1\252\14\25\13\0\2\25\3\0"+
    "\1\25\6\0\2\25\1\0\16\25\14\0\26\25\1\u011e"+
    "\4\25\7\0\2\117\1\120\74\117\1\u0125\17\117\4\0"+
    "\2\122\3\0\1\122\6\0\2\122\1\0\1\122\1\u0126"+
    "\14\122\14\0\30\122\1\u0127\1\u0128\1\u0129\13\0\1\122"+
    "\1\305\3\0\1\305\6\0\1\305\1\122\1\374\16\122"+
    "\14\0\10\122\1\305\22\122\7\0\4\375\1\122\1\306"+
    "\3\375\1\306\6\375\1\306\1\122\1\375\16\122\14\375"+
    "\10\122\1\306\22\122\7\375\4\0\2\122\3\0\1\122"+
    "\6\0\2\122\1\0\16\122\14\0\11\122\1\321\21\122"+
    "\13\0\2\122\3\0\1\122\6\0\2\122\1\0\4\122"+
    "\1\u012a\11\122\14\0\33\122\13\0\2\122\3\0\1\122"+
    "\6\0\2\122\1\0\10\122\1\u012b\5\122\14\0\33\122"+
    "\13\0\2\122\3\0\1\122\6\0\2\122\1\0\11\122"+
    "\1\u012c\4\122\14\0\33\122\13\0\2\122\3\0\1\122"+
    "\6\0\2\122\1\0\11\122\1\u012d\4\122\14\0\33\122"+
    "\13\0\2\122\3\0\1\122\6\0\2\122\1\0\2\122"+
    "\1\u012e\13\122\14\0\33\122\13\0\2\122\3\0\1\122"+
    "\6\0\2\122\1\0\16\122\14\0\11\122\1\u012f\21\122"+
    "\13\0\2\122\3\0\1\122\6\0\2\122\1\0\16\122"+
    "\14\0\16\122\1\u0130\14\122\13\0\2\122\3\0\1\122"+
    "\6\0\2\122\1\0\16\122\14\0\12\122\1\u0131\20\122"+
    "\13\0\2\122\3\0\1\122\6\0\2\122\1\0\16\122"+
    "\14\0\6\122\1\u0132\24\122\13\0\2\122\3\0\1\122"+
    "\6\0\2\122\1\0\16\122\14\0\1\122\1\u0133\31\122"+
    "\13\0\2\122\3\0\1\122\6\0\2\122\1\0\16\122"+
    "\14\0\7\122\1\u0134\23\122\13\0\2\122\3\0\1\122"+
    "\6\0\2\122\1\0\16\122\14\0\12\122\1\u0135\20\122"+
    "\13\0\2\122\3\0\1\122\6\0\2\122\1\0\16\122"+
    "\14\0\26\122\1\u0136\4\122\13\0\2\122\3\0\1\122"+
    "\6\0\2\122\1\0\16\122\14\0\4\122\1\321\26\122"+
    "\13\0\2\122\3\0\1\122\6\0\2\122\1\0\16\122"+
    "\14\0\1\122\1\u0137\2\122\1\u0138\16\122\1\u0139\7\122"+
    "\13\0\2\122\3\0\1\122\6\0\2\122\1\0\16\122"+
    "\14\0\2\122\1\321\30\122\13\0\2\122\3\0\1\122"+
    "\6\0\2\122\1\0\16\122\14\0\21\122\1\u013a\11\122"+
    "\13\0\2\122\3\0\1\122\6\0\2\122\1\0\16\122"+
    "\14\0\3\122\1\u013b\27\122\13\0\2\122\3\0\1\122"+
    "\6\0\2\122\1\0\16\122\14\0\6\122\1\330\24\122"+
    "\13\0\2\122\3\0\1\122\6\0\1\122\1\320\1\0"+
    "\16\122\14\0\33\122\13\0\2\122\3\0\1\122\6\0"+
    "\2\122\1\0\16\122\14\0\13\122\1\321\17\122\13\0"+
    "\2\122\3\0\1\122\6\0\2\122\1\0\1\u013c\15\122"+
    "\14\0\33\122\13\0\2\122\3\0\1\122\6\0\2\122"+
    "\1\0\16\122\14\0\4\122\1\u013d\6\122\1\u013e\13\122"+
    "\1\u013f\3\122\13\0\2\122\3\0\1\122\6\0\2\122"+
    "\1\0\16\122\14\0\6\122\1\321\24\122\13\0\2\122"+
    "\3\0\1\122\6\0\2\122\1\0\16\122\14\0\12\122"+
    "\1\u0140\20\122\13\0\2\122\3\0\1\122\6\0\2\122"+
    "\1\0\16\122\14\0\11\122\1\u013c\21\122\13\0\2\122"+
    "\3\0\1\122\6\0\2\122\1\0\16\122\14\0\25\122"+
    "\1\321\5\122\13\0\2\122\3\0\1\122\6\0\2\122"+
    "\1\0\16\122\14\0\7\122\1\u0141\23\122\13\0\2\122"+
    "\3\0\1\122\6\0\2\122\1\0\16\122\14\0\7\122"+
    "\1\u0142\23\122\13\0\2\122\3\0\1\122\6\0\2\122"+
    "\1\0\16\122\14\0\15\122\1\321\15\122\13\0\2\122"+
    "\3\0\1\122\6\0\2\122\1\0\16\122\14\0\16\122"+
    "\1\323\14\122\13\0\2\122\3\0\1\122\6\0\2\122"+
    "\1\0\16\122\14\0\26\122\1\u013c\4\122\13\0\2\25"+
    "\3\0\1\25\6\0\2\25\1\0\1\25\1\366\14\25"+
    "\14\0\30\25\1\371\1\372\1\373\14\0\1\355\3\0"+
    "\1\355\6\0\1\355\1\0\1\374\42\0\1\355\36\0"+
    "\1\356\3\0\1\356\6\0\1\356\44\0\1\356\35\0"+
    "\2\360\2\0\1\361\1\360\6\0\2\360\1\0\16\360"+
    "\14\0\33\360\17\0\1\u0143\112\0\1\203\13\0\2\203"+
    "\1\0\16\203\14\0\10\203\1\0\22\203\13\0\1\210"+
    "\13\0\2\210\1\0\16\210\14\0\10\210\1\0\22\210"+
    "\13\0\1\212\13\0\2\212\1\0\16\212\14\0\10\212"+
    "\1\0\22\212\13\0\1\214\13\0\2\214\1\0\16\214"+
    "\14\0\10\214\1\0\22\214\13\0\2\25\3\0\1\25"+
    "\6\0\2\25\1\0\11\25\1\u0144\4\25\14\0\33\25"+
    "\13\0\2\25\3\0\1\25\6\0\2\25\1\0\3\25"+
    "\1\u0145\12\25\14\0\33\25\13\0\2\25\3\0\1\25"+
    "\6\0\2\25\1\0\5\25\1\u0146\10\25\14\0\33\25"+
    "\13\0\2\25\3\0\1\25\6\0\2\25\1\0\11\25"+
    "\1\u0147\4\25\14\0\33\25\13\0\2\25\3\0\1\25"+
    "\6\0\2\25\1\0\5\25\1\u0148\10\25\14\0\33\25"+
    "\13\0\2\25\3\0\1\25\6\0\2\25\1\0\12\25"+
    "\1\u0149\3\25\14\0\33\25\14\0\1\u014a\3\0\1\u014a"+
    "\53\0\1\u014a\31\0\4\375\1\0\14\375\1\0\1\375"+
    "\16\0\14\375\10\0\1\375\22\0\7\375\4\0\2\25"+
    "\3\0\1\25\6\0\2\25\1\0\11\25\1\u014b\4\25"+
    "\14\0\33\25\13\0\2\25\3\0\1\25\6\0\2\25"+
    "\1\0\6\25\1\376\7\25\14\0\33\25\13\0\2\25"+
    "\3\0\1\25\6\0\2\25\1\0\6\25\1\u014c\7\25"+
    "\14\0\33\25\13\0\2\25\3\0\1\25\6\0\2\25"+
    "\1\0\13\25\1\u014d\2\25\14\0\33\25\75\0\1\u014e"+
    "\111\0\1\u014e\120\0\1\u0104\117\0\1\u014f\113\0\1\u014e"+
    "\11\0\1\u0150\106\0\1\u0151\130\0\1\u0152\114\0\1\u0153"+
    "\27\0\2\u010d\3\0\1\u010d\6\0\2\u010d\1\0\16\u010d"+
    "\14\0\33\u010d\7\0\1\u0154\3\0\113\u0154\1\u0155\3\0"+
    "\113\u0155\1\u0156\3\0\113\u0156\4\0\2\25\3\0\1\25"+
    "\6\0\2\25\1\0\16\25\14\0\6\25\1\u0157\24\25"+
    "\13\0\2\25\3\0\1\25\6\0\2\25\1\0\16\25"+
    "\14\0\17\25\1\u0158\13\25\13\0\2\25\3\0\1\25"+
    "\6\0\2\25\1\0\16\25\14\0\21\25\1\u011e\11\25"+
    "\13\0\2\25\3\0\1\25\6\0\2\25\1\0\16\25"+
    "\14\0\21\25\1\250\11\25\13\0\2\25\3\0\1\25"+
    "\6\0\2\25\1\0\16\25\14\0\12\25\1\u0159\20\25"+
    "\13\0\2\25\3\0\1\25\6\0\2\25\1\0\16\25"+
    "\14\0\27\25\1\250\3\25\13\0\2\25\3\0\1\25"+
    "\6\0\2\25\1\0\16\25\14\0\26\25\1\u015a\4\25"+
    "\13\0\2\25\3\0\1\25\6\0\2\25\1\0\16\25"+
    "\14\0\6\25\1\250\3\25\1\73\20\25\13\0\2\25"+
    "\3\0\1\25\6\0\2\25\1\0\16\25\14\0\3\25"+
    "\1\250\27\25\13\0\2\25\3\0\1\25\6\0\2\25"+
    "\1\0\16\25\14\0\22\25\1\u015b\10\25\13\0\2\25"+
    "\3\0\1\25\6\0\2\25\1\0\16\25\14\0\13\25"+
    "\1\u015c\17\25\13\0\2\25\3\0\1\25\6\0\2\25"+
    "\1\0\16\25\14\0\26\25\1\267\4\25\13\0\2\25"+
    "\3\0\1\25\6\0\2\25\1\0\16\25\14\0\6\25"+
    "\1\73\24\25\13\0\2\25\3\0\1\25\6\0\2\25"+
    "\1\0\16\25\14\0\12\25\1\u0116\20\25\13\0\2\25"+
    "\3\0\1\25\6\0\2\25\1\0\16\25\14\0\6\25"+
    "\1\u015d\24\25\13\0\2\25\3\0\1\25\6\0\2\25"+
    "\1\0\16\25\14\0\27\25\1\267\3\25\13\0\2\25"+
    "\3\0\1\25\6\0\2\25\1\0\16\25\14\0\13\25"+
    "\1\267\17\25\13\0\2\25\3\0\1\25\6\0\2\25"+
    "\1\0\16\25\14\0\27\25\1\u015e\3\25\7\0\2\117"+
    "\1\120\65\117\1\u015f\26\117\4\0\2\122\3\0\1\122"+
    "\6\0\2\122\1\0\11\122\1\u0160\4\122\14\0\33\122"+
    "\13\0\2\122\3\0\1\122\6\0\2\122\1\0\11\122"+
    "\1\u0161\4\122\14\0\33\122\13\0\2\122\3\0\1\122"+
    "\6\0\2\122\1\0\5\122\1\u0162\10\122\14\0\33\122"+
    "\13\0\2\122\3\0\1\122\6\0\2\122\1\0\12\122"+
    "\1\u0163\3\122\14\0\33\122\13\0\2\122\3\0\1\122"+
    "\6\0\2\122\1\0\11\122\1\u0164\4\122\14\0\33\122"+
    "\13\0\2\122\3\0\1\122\6\0\2\122\1\0\6\122"+
    "\1\u012a\7\122\14\0\33\122\13\0\2\122\3\0\1\122"+
    "\6\0\2\122\1\0\6\122\1\u0165\7\122\14\0\33\122"+
    "\13\0\2\122\3\0\1\122\6\0\2\122\1\0\13\122"+
    "\1\u0166\2\122\14\0\33\122\13\0\2\122\3\0\1\122"+
    "\6\0\2\122\1\0\16\122\14\0\6\122\1\u0167\24\122"+
    "\13\0\2\122\3\0\1\122\6\0\2\122\1\0\16\122"+
    "\14\0\17\122\1\u0168\13\122\13\0\2\122\3\0\1\122"+
    "\6\0\2\122\1\0\16\122\14\0\21\122\1\u013c\11\122"+
    "\13\0\2\122\3\0\1\122\6\0\2\122\1\0\16\122"+
    "\14\0\21\122\1\321\11\122\13\0\2\122\3\0\1\122"+
    "\6\0\2\122\1\0\16\122\14\0\12\122\1\u0169\20\122"+
    "\13\0\2\122\3\0\1\122\6\0\2\122\1\0\16\122"+
    "\14\0\27\122\1\321\3\122\13\0\2\122\3\0\1\122"+
    "\6\0\2\122\1\0\16\122\14\0\26\122\1\u016a\4\122"+
    "\13\0\2\122\3\0\1\122\6\0\2\122\1\0\16\122"+
    "\14\0\6\122\1\321\3\122\1\143\20\122\13\0\2\122"+
    "\3\0\1\122\6\0\2\122\1\0\16\122\14\0\3\122"+
    "\1\321\27\122\13\0\2\122\3\0\1\122\6\0\2\122"+
    "\1\0\16\122\14\0\22\122\1\u016b\10\122\13\0\2\122"+
    "\3\0\1\122\6\0\2\122\1\0\16\122\14\0\13\122"+
    "\1\u016c\17\122\13\0\2\122\3\0\1\122\6\0\2\122"+
    "\1\0\16\122\14\0\26\122\1\340\4\122\13\0\2\122"+
    "\3\0\1\122\6\0\2\122\1\0\16\122\14\0\6\122"+
    "\1\143\24\122\13\0\2\122\3\0\1\122\6\0\2\122"+
    "\1\0\16\122\14\0\12\122\1\u0134\20\122\13\0\2\122"+
    "\3\0\1\122\6\0\2\122\1\0\16\122\14\0\6\122"+
    "\1\u016d\24\122\13\0\2\122\3\0\1\122\6\0\2\122"+
    "\1\0\16\122\14\0\27\122\1\340\3\122\13\0\2\122"+
    "\3\0\1\122\6\0\2\122\1\0\16\122\14\0\13\122"+
    "\1\340\17\122\13\0\2\122\3\0\1\122\6\0\2\122"+
    "\1\0\16\122\14\0\27\122\1\u016e\3\122\13\0\1\360"+
    "\13\0\2\360\1\0\16\360\14\0\10\360\1\0\22\360"+
    "\13\0\2\25\3\0\1\25\6\0\2\25\1\0\16\25"+
    "\14\0\30\25\1\u016f\2\25\13\0\2\25\3\0\1\25"+
    "\6\0\2\25\1\0\4\25\1\u0170\11\25\14\0\33\25"+
    "\13\0\2\25\3\0\1\25\6\0\2\25\1\0\6\25"+
    "\1\u0171\7\25\14\0\33\25\13\0\2\25\3\0\1\25"+
    "\6\0\2\25\1\0\3\25\1\u016f\12\25\14\0\33\25"+
    "\13\0\2\25\3\0\1\25\6\0\2\25\1\0\13\25"+
    "\1\u0172\2\25\14\0\33\25\13\0\2\25\3\0\1\25"+
    "\6\0\2\25\1\0\7\25\1\u0173\6\25\14\0\33\25"+
    "\14\0\1\u014a\3\0\1\u014a\6\0\1\u014a\1\0\1\374"+
    "\42\0\1\u014a\35\0\2\25\3\0\1\25\6\0\2\25"+
    "\1\0\3\25\1\376\12\25\14\0\33\25\13\0\2\25"+
    "\3\0\1\25\6\0\2\25\1\0\13\25\1\47\2\25"+
    "\14\0\33\25\13\0\2\25\3\0\1\25\6\0\2\25"+
    "\1\0\15\25\1\376\14\0\33\25\7\0\2\u014e\1\u0174"+
    "\114\u014e\61\0\1\u0175\115\0\1\u0176\127\0\1\u014e\114\0"+
    "\1\u0177\123\0\1\u014e\22\0\1\u0154\3\0\11\u0154\1\u0178"+
    "\101\u0154\1\u0155\3\0\12\u0155\1\u0179\100\u0155\1\u0156\3\0"+
    "\13\u0156\1\u017a\77\u0156\4\0\2\25\3\0\1\25\6\0"+
    "\2\25\1\0\16\25\14\0\7\25\1\u017b\23\25\13\0"+
    "\2\25\3\0\1\25\6\0\2\25\1\0\16\25\14\0"+
    "\7\25\1\u017c\23\25\13\0\2\25\3\0\1\25\6\0"+
    "\2\25\1\0\16\25\14\0\21\25\1\u017d\11\25\13\0"+
    "\2\25\3\0\1\25\6\0\2\25\1\0\16\25\14\0"+
    "\13\25\1\u017e\17\25\13\0\2\25\3\0\1\25\6\0"+
    "\2\25\1\0\16\25\14\0\12\25\1\u017f\20\25\13\0"+
    "\2\25\3\0\1\25\6\0\2\25\1\0\16\25\14\0"+
    "\12\25\1\u0180\20\25\13\0\2\25\3\0\1\25\6\0"+
    "\2\25\1\0\16\25\14\0\26\25\1\u0181\4\25\13\0"+
    "\2\25\3\0\1\25\6\0\2\25\1\0\16\25\14\0"+
    "\7\25\1\u0182\23\25\7\0\2\u015f\1\u0183\114\u015f\4\0"+
    "\2\122\3\0\1\122\6\0\2\122\1\0\16\122\14\0"+
    "\30\122\1\u0184\2\122\13\0\2\122\3\0\1\122\6\0"+
    "\2\122\1\0\3\122\1\u0184\12\122\14\0\33\122\13\0"+
    "\2\122\3\0\1\122\6\0\2\122\1\0\13\122\1\u0185"+
    "\2\122\14\0\33\122\13\0\2\122\3\0\1\122\6\0"+
    "\2\122\1\0\7\122\1\u0186\6\122\14\0\33\122\13\0"+
    "\2\122\3\0\1\122\6\0\2\122\1\0\3\122\1\u012a"+
    "\12\122\14\0\33\122\13\0\2\122\3\0\1\122\6\0"+
    "\2\122\1\0\13\122\1\132\2\122\14\0\33\122\13\0"+
    "\2\122\3\0\1\122\6\0\2\122\1\0\15\122\1\u012a"+
    "\14\0\33\122\13\0\2\122\3\0\1\122\6\0\2\122"+
    "\1\0\16\122\14\0\7\122\1\u0187\23\122\13\0\2\122"+
    "\3\0\1\122\6\0\2\122\1\0\16\122\14\0\7\122"+
    "\1\u0188\23\122\13\0\2\122\3\0\1\122\6\0\2\122"+
    "\1\0\16\122\14\0\21\122\1\u0189\11\122\13\0\2\122"+
    "\3\0\1\122\6\0\2\122\1\0\16\122\14\0\13\122"+
    "\1\u018a\17\122\13\0\2\122\3\0\1\122\6\0\2\122"+
    "\1\0\16\122\14\0\12\122\1\u018b\20\122\13\0\2\122"+
    "\3\0\1\122\6\0\2\122\1\0\16\122\14\0\12\122"+
    "\1\u018c\20\122\13\0\2\122\3\0\1\122\6\0\2\122"+
    "\1\0\16\122\14\0\26\122\1\u018d\4\122\13\0\2\122"+
    "\3\0\1\122\6\0\2\122\1\0\16\122\14\0\7\122"+
    "\1\u018e\23\122\13\0\2\25\3\0\1\25\6\0\2\25"+
    "\1\0\2\25\1\u0173\13\25\14\0\33\25\13\0\2\25"+
    "\3\0\1\25\6\0\1\u018f\1\25\1\0\16\25\14\0"+
    "\33\25\13\0\2\25\3\0\1\25\6\0\2\25\1\0"+
    "\5\25\1\u0170\10\25\14\0\33\25\13\0\2\25\3\0"+
    "\1\25\6\0\2\25\1\0\15\25\1\u0190\14\0\33\25"+
    "\13\0\2\25\3\0\1\25\6\0\1\u0191\1\25\1\0"+
    "\16\25\14\0\33\25\74\0\1\u014e\112\0\1\u0192\133\0"+
    "\1\u014e\24\0\2\25\3\0\1\25\6\0\2\25\1\0"+
    "\16\25\14\0\16\25\1\u0193\14\25\13\0\2\25\3\0"+
    "\1\25\6\0\2\25\1\0\16\25\14\0\20\25\1\267"+
    "\12\25\13\0\2\25\3\0\1\25\6\0\2\25\1\0"+
    "\16\25\14\0\6\25\1\u0194\24\25\13\0\2\25\3\0"+
    "\1\25\6\0\2\25\1\0\16\25\14\0\26\25\1\u0119"+
    "\4\25\13\0\2\25\3\0\1\25\6\0\2\25\1\0"+
    "\16\25\14\0\11\25\1\267\21\25\13\0\2\25\3\0"+
    "\1\25\6\0\2\25\1\0\16\25\14\0\21\25\1\u0195"+
    "\11\25\13\0\2\25\3\0\1\25\6\0\2\25\1\0"+
    "\16\25\14\0\26\25\1\250\4\25\13\0\2\25\3\0"+
    "\1\25\6\0\2\25\1\0\16\25\14\0\11\25\1\u0119"+
    "\21\25\13\0\2\122\3\0\1\122\6\0\2\122\1\0"+
    "\2\122\1\u0186\13\122\14\0\33\122\13\0\2\122\3\0"+
    "\1\122\6\0\2\122\1\0\15\122\1\u0196\14\0\33\122"+
    "\13\0\2\122\3\0\1\122\6\0\1\u0197\1\122\1\0"+
    "\16\122\14\0\33\122\13\0\2\122\3\0\1\122\6\0"+
    "\2\122\1\0\16\122\14\0\16\122\1\u0198\14\122\13\0"+
    "\2\122\3\0\1\122\6\0\2\122\1\0\16\122\14\0"+
    "\20\122\1\340\12\122\13\0\2\122\3\0\1\122\6\0"+
    "\2\122\1\0\16\122\14\0\6\122\1\u0199\24\122\13\0"+
    "\2\122\3\0\1\122\6\0\2\122\1\0\16\122\14\0"+
    "\26\122\1\u0137\4\122\13\0\2\122\3\0\1\122\6\0"+
    "\2\122\1\0\16\122\14\0\11\122\1\340\21\122\13\0"+
    "\2\122\3\0\1\122\6\0\2\122\1\0\16\122\14\0"+
    "\21\122\1\u019a\11\122\13\0\2\122\3\0\1\122\6\0"+
    "\2\122\1\0\16\122\14\0\26\122\1\321\4\122\13\0"+
    "\2\122\3\0\1\122\6\0\2\122\1\0\16\122\14\0"+
    "\11\122\1\u0137\21\122\13\0\2\25\3\0\1\25\6\0"+
    "\1\u019b\1\25\1\0\16\25\14\0\33\25\13\0\2\25"+
    "\3\0\1\25\6\0\2\25\1\0\5\25\1\u019c\10\25"+
    "\14\0\33\25\13\0\2\25\3\0\1\25\6\0\1\u019d"+
    "\1\25\1\0\16\25\14\0\33\25\76\0\1\u019e\33\0"+
    "\2\25\3\0\1\25\6\0\2\25\1\0\16\25\14\0"+
    "\5\25\1\250\25\25\13\0\2\25\3\0\1\25\6\0"+
    "\2\25\1\0\16\25\14\0\4\25\1\u0119\26\25\13\0"+
    "\2\25\3\0\1\25\6\0\2\25\1\0\16\25\14\0"+
    "\22\25\1\267\10\25\13\0\2\122\3\0\1\122\6\0"+
    "\2\122\1\0\5\122\1\u019f\10\122\14\0\33\122\13\0"+
    "\2\122\3\0\1\122\6\0\1\u01a0\1\122\1\0\16\122"+
    "\14\0\33\122\13\0\2\122\3\0\1\122\6\0\2\122"+
    "\1\0\16\122\14\0\5\122\1\321\25\122\13\0\2\122"+
    "\3\0\1\122\6\0\2\122\1\0\16\122\14\0\4\122"+
    "\1\u0137\26\122\13\0\2\122\3\0\1\122\6\0\2\122"+
    "\1\0\16\122\14\0\22\122\1\340\10\122\13\0\2\25"+
    "\3\0\1\25\6\0\2\25\1\0\10\25\1\u016f\5\25"+
    "\14\0\33\25\105\0\1\u01a1\24\0\2\122\3\0\1\122"+
    "\6\0\2\122\1\0\10\122\1\u0184\5\122\14\0\33\122"+
    "\104\0\1\u014e\21\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[28598];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\1\15\0\1\11\1\1\1\11\12\1\1\11"+
    "\11\1\1\11\4\1\1\11\5\1\1\11\23\1\10\11"+
    "\1\1\1\11\37\1\1\11\1\1\1\11\1\1\2\11"+
    "\1\1\2\11\1\1\2\11\1\1\3\11\1\1\2\0"+
    "\2\1\1\0\1\1\1\11\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\12\1\1\0\2\11\7\0\117\1\5\0"+
    "\6\1\1\0\6\1\1\11\11\0\1\1\3\0\62\1"+
    "\1\0\13\1\10\0\35\1\1\11\3\0\13\1\1\11"+
    "\16\1\1\0\13\1\1\0\2\1\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[417];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    public void setTokenStart(int position){zzCurrentPos = zzStartRead = position;}
    public void setTokenEnd(int position){zzMarkedPos = position;}
    public CharSequence getBuffer(){ return zzBuffer;}
    public char[] getBufferArray(){ return zzBufferArray;}
    public int getBufferEnd() {return zzEndRead;}
    public int getNextTokenStart(){ return zzMarkedPos;}
    public boolean isLastToken(){ return zzMarkedPos == zzEndRead; }
    public void setState(int newState){ zzLexicalState = newState; }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PerlLexerGenerated(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 194) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 48: 
          { return PERL_ARRAY;
          }
        case 64: break;
        case 14: 
          { return processStringOpener();
          }
        case 65: break;
        case 60: 
          { processPodOpener();break;
          }
        case 66: break;
        case 7: 
          { return PERL_NUMBER;
          }
        case 67: break;
        case 42: 
          { return parseRegex();
          }
        case 68: break;
        case 63: 
          { return PERL_TAG;
          }
        case 69: break;
        case 45: 
          { return PERL_SIGIL_SCALAR_INDEX;
          }
        case 70: break;
        case 32: 
          { return processOpenerWhiteSpace();
          }
        case 71: break;
        case 20: 
          { return processRegexOpener();
          }
        case 72: break;
        case 38: 
          { IElementType tokenType = processTransChar();
          if( tokenType != null )
                return tokenType;
          break;
          }
        case 73: break;
        case 62: 
          { processDataOpener(); break;
          }
        case 74: break;
        case 13: 
          { return PERL_OPERATOR;
          }
        case 75: break;
        case 35: 
          { IElementType type = processQuoteLikeListQuote();
            if( type == null ) // disallowed sharp
                break;
            return type;
          }
        case 76: break;
        case 5: 
          { return TokenType.WHITE_SPACE;
          }
        case 77: break;
        case 47: 
          { return PERL_HASH;
          }
        case 78: break;
        case 37: 
          { IElementType type = processTransQuote();
            if( type == null ) // disallowed sharp
                break;
            return type;
          }
        case 79: break;
        case 21: 
          { return processQuoteLikeStringOpener();
          }
        case 80: break;
        case 16: 
          { return PERL_COMMA;
          }
        case 81: break;
        case 54: 
          { return processQuoteLikeListOpener();
          }
        case 82: break;
        case 41: 
          { return PERL_REGEX_MODIFIER;
          }
        case 83: break;
        case 22: 
          { return processTransOpener();
          }
        case 84: break;
        case 1: 
          { if( isLastToken() )
            return endDataBlock();
        break;
          }
        case 85: break;
        case 10: 
          { return PERL_COLON;
          }
        case 86: break;
        case 15: 
          { return PERL_KEYWORD;
          }
        case 87: break;
        case 23: 
          { return processSemicolon();
          }
        case 88: break;
        case 49: 
          { return PERL_GLOB;
          }
        case 89: break;
        case 33: 
          { IElementType tokenType = processQuoteLikeChar();
          if( tokenType != null )
                return tokenType;
          break;
          }
        case 90: break;
        case 46: 
          { return PERL_DEPACKAGE;
          }
        case 91: break;
        case 4: 
          { IElementType tokenType = processNewLine();
    if( tokenType != null )
       return tokenType;
    break;
          }
        case 92: break;
        case 9: 
          { return PERL_COMMENT;
          }
        case 93: break;
        case 30: 
          { yybegin(YYINITIAL); return PERL_STRING_CONTENT;
          }
        case 94: break;
        case 58: 
          { return processMultilineOpener();
          }
        case 95: break;
        case 57: 
          { yypushback(1);return PERL_OPERATOR_FILETEST;
          }
        case 96: break;
        case 39: 
          { return processTransCloser();
          }
        case 97: break;
        case 50: 
          { return PERL_NUMBER_VERSION;
          }
        case 98: break;
        case 55: 
          { return PERL_SCALAR_INDEX;
          }
        case 99: break;
        case 28: 
          { return PERL_LPAREN;
          }
        case 100: break;
        case 11: 
          { return PERL_SIGIL_HASH;
          }
        case 101: break;
        case 3: 
          { return TokenType.BAD_CHARACTER;
          }
        case 102: break;
        case 44: 
          { return PERL_SCALAR;
          }
        case 103: break;
        case 2: 
          { if( isLastToken() )
        {
            endPodBlock();
        }
        break;
          }
        case 104: break;
        case 29: 
          { return PERL_RPAREN;
          }
        case 105: break;
        case 51: 
          { yypushback(yylength()-1);return PERL_OPERATOR;
          }
        case 106: break;
        case 8: 
          { return PERL_SIGIL_SCALAR;
          }
        case 107: break;
        case 12: 
          { return PERL_SIGIL_ARRAY;
          }
        case 108: break;
        case 43: 
          { IElementType nextTokenType = getParsedToken();
        if( nextTokenType == null )
            break;
        return nextTokenType;
          }
        case 109: break;
        case 56: 
          { return PERL_BLOCK_NAME;
          }
        case 110: break;
        case 31: 
          { IElementType type = processQuoteLikeQuote();
            if( type == null ) // disallowed sharp
                break;
            return type;
          }
        case 111: break;
        case 59: 
          { return PERL_OPERATOR_UNARY;
          }
        case 112: break;
        case 19: 
          { // regexp or div
    IElementType tokenType = processDiv();
    if( tokenType == null )
        break;
    return tokenType;
          }
        case 113: break;
        case 53: 
          { return PERL_ARROW_COMMA;
          }
        case 114: break;
        case 52: 
          { return PERL_DEREFERENCE;
          }
        case 115: break;
        case 24: 
          { return PERL_LBRACE;
          }
        case 116: break;
        case 18: 
          { return PERL_RANGLE;
          }
        case 117: break;
        case 25: 
          { return PERL_RBRACE;
          }
        case 118: break;
        case 17: 
          { return PERL_LANGLE;
          }
        case 119: break;
        case 36: 
          { IElementType tokenType = processQuoteLikeWord();
          if( tokenType != null )
                return tokenType;
          break;
          }
        case 120: break;
        case 6: 
          { return PERL_BAREWORD;
          }
        case 121: break;
        case 34: 
          { popState(); return PERL_QUOTE;
          }
        case 122: break;
        case 61: 
          { return endPodBlock();
          }
        case 123: break;
        case 40: 
          { popState(); yypushback(1); break;
          }
        case 124: break;
        case 27: 
          { return PERL_RBRACK;
          }
        case 125: break;
        case 26: 
          { return PERL_LBRACK;
          }
        case 126: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
