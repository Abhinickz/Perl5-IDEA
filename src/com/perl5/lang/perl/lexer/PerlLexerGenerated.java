/* The following code was generated by JFlex 1.4.3 on 10.05.15 20:45 */

package com.perl5.lang.perl.lexer;

/*
    http://jflex.de/manual.html
    http://www2.cs.tum.edu/projects/cup

*/

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import org.jetbrains.annotations.NotNull;
import com.perl5.lang.perl.util.PerlFunctionUtil;
import com.perl5.lang.perl.util.PerlScalarUtil;
import com.perl5.lang.perl.util.PerlHashUtil;
import com.perl5.lang.perl.util.PerlGlobUtil;
import com.perl5.lang.perl.util.PerlArrayUtil;
import com.perl5.lang.perl.util.PerlPackageUtil;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10.05.15 20:45 from the specification file
 * <tt>C:/Repository/Perl5-IDEA/src/com/perl5/lang/perl/lexer/Perl.flex</tt>
 */
public abstract class PerlLexerGenerated implements PerlLexerBase {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int LEX_POD = 4;
  public static final int LEX_MULTILINE = 12;
  public static final int LEX_TRANS_MODIFIERS = 34;
  public static final int LEX_QUOTE_LIKE_LIST_OPENER = 22;
  public static final int LEX_CODE = 8;
  public static final int LEX_TRANS_OPENER = 28;
  public static final int LEX_MULTILINE_WAITING = 10;
  public static final int LEX_BAREWORD_STRING = 6;
  public static final int LEX_QUOTE_LIKE_CHARS = 18;
  public static final int LEX_QUOTE_LIKE_WORDS = 24;
  public static final int LEX_TRANS_CLOSER = 32;
  public static final int LEX_REGEX_ITEMS = 38;
  public static final int LEX_TRANS_CHARS = 30;
  public static final int LEX_REGEX_OPENER = 36;
  public static final int LEX_QUOTE_LIKE_OPENER = 16;
  public static final int LEX_QUOTE_LIKE_CLOSER = 20;
  public static final int LEX_EOF = 2;
  public static final int YYINITIAL = 0;
  public static final int LEX_MULTILINE_TOKEN = 14;
  public static final int LEX_QUOTE_LIKE_LIST_CLOSER = 26;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  0,  0,  4,  4,  5,  5,  6,  6, 
     7,  7,  8,  8,  9,  9, 10, 10, 11, 11,  9,  9, 12, 12, 13, 13, 
    14, 14, 15, 15, 16, 16, 17, 17
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\35\1\7"+
    "\1\12\1\74\1\41\1\44\1\10\1\112\1\113\1\34\1\33\1\32"+
    "\1\6\1\15\1\47\1\5\1\60\1\60\1\60\1\60\3\75\1\106"+
    "\1\75\1\114\1\115\1\42\1\40\1\43\1\50\1\116\1\21\1\23"+
    "\1\27\1\20\1\16\1\105\1\24\1\30\1\25\1\4\1\31\1\103"+
    "\1\102\1\17\1\104\1\111\1\4\1\77\1\100\1\22\1\26\1\110"+
    "\1\76\1\107\1\101\1\4\1\117\1\37\1\120\1\46\1\13\1\11"+
    "\1\57\1\65\1\66\1\54\1\56\1\72\1\70\1\55\1\62\1\4"+
    "\1\67\1\126\1\64\1\71\1\53\1\52\1\121\1\61\1\125\1\63"+
    "\1\73\1\14\1\122\1\123\1\124\1\51\1\127\1\45\1\130\1\36"+
    "\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\0\1\3\1\4\13\0\2\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\11"+
    "\1\10\1\5\5\10\1\15\6\12\1\16\1\17\1\20"+
    "\2\12\1\21\10\10\1\22\5\10\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\10\1\34"+
    "\1\35\1\22\1\10\1\36\1\37\1\1\3\2\1\40"+
    "\1\11\6\40\1\12\10\40\1\22\5\40\1\33\1\40"+
    "\1\34\1\35\1\22\1\40\1\11\2\3\1\41\1\42"+
    "\1\43\2\44\1\45\1\46\1\47\1\50\2\51\1\52"+
    "\2\53\1\54\1\55\2\56\1\0\2\57\1\60\1\14"+
    "\2\11\1\0\1\61\1\12\5\10\1\62\1\63\7\0"+
    "\2\64\1\0\2\12\3\10\1\34\13\10\2\34\3\10"+
    "\5\65\1\66\2\67\1\0\1\22\1\33\1\70\10\10"+
    "\1\2\2\11\1\61\10\40\1\34\13\40\2\34\3\40"+
    "\1\22\1\33\1\70\10\40\3\11\1\71\6\10\1\0"+
    "\1\72\4\10\13\0\1\73\3\0\10\10\1\74\3\10"+
    "\1\34\3\10\2\0\2\65\1\0\4\65\1\0\3\10"+
    "\1\2\4\40\1\72\14\40\1\74\3\40\1\34\6\40"+
    "\6\10\1\61\3\10\1\0\1\75\11\0\7\10\13\0"+
    "\1\10\1\76\17\40\5\10\1\75\3\0\1\73\7\10"+
    "\11\0\1\10\1\76\13\40\3\10\1\0\3\10\11\0"+
    "\5\40\1\77\1\100\1\10\11\0\1\100\1\40\61\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[509];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\131\0\262\0\u010b\0\u0164\0\u01bd\0\u0216\0\u026f"+
    "\0\u02c8\0\u0321\0\u037a\0\u03d3\0\u042c\0\u0485\0\u04de\0\u0537"+
    "\0\u0590\0\u05e9\0\u0642\0\u069b\0\u0642\0\u06f4\0\u074d\0\u07a6"+
    "\0\u07ff\0\u0642\0\u0858\0\u08b1\0\u090a\0\u0963\0\u09bc\0\u0a15"+
    "\0\u0a6e\0\u0ac7\0\u0b20\0\u0642\0\u0b79\0\u0bd2\0\u0c2b\0\u0c84"+
    "\0\u0642\0\u0cdd\0\u0d36\0\u0d8f\0\u0de8\0\u0e41\0\u0e9a\0\u0642"+
    "\0\u0ef3\0\u0f4c\0\u0fa5\0\u0ffe\0\u1057\0\u10b0\0\u1109\0\u1162"+
    "\0\u11bb\0\u1214\0\u126d\0\u12c6\0\u131f\0\u1378\0\u13d1\0\u0642"+
    "\0\u0642\0\u142a\0\u0642\0\u1483\0\u0642\0\u0642\0\u14dc\0\u1535"+
    "\0\u158e\0\u074d\0\u15e7\0\u1640\0\u0642\0\u0642\0\u0642\0\u1699"+
    "\0\u0642\0\u16f2\0\u174b\0\u17a4\0\u17fd\0\u1856\0\u18af\0\u1908"+
    "\0\u1961\0\u19ba\0\u1a13\0\u1a6c\0\u1ac5\0\u1b1e\0\u1b77\0\u1bd0"+
    "\0\u1c29\0\u1c82\0\u1cdb\0\u1d34\0\u1d8d\0\u1de6\0\u1e3f\0\u1e98"+
    "\0\u1ef1\0\u1f4a\0\u1fa3\0\u1ffc\0\u174b\0\u2055\0\u20ae\0\u2107"+
    "\0\u2160\0\u21b9\0\u0642\0\u0642\0\u2212\0\u0642\0\u226b\0\u0642"+
    "\0\u0642\0\u22c4\0\u0642\0\u0642\0\u231d\0\u0642\0\u0642\0\u2376"+
    "\0\u0642\0\u0642\0\u0642\0\u23cf\0\u2428\0\u2481\0\u24da\0\u0642"+
    "\0\u0642\0\u2533\0\u258c\0\u25e5\0\u263e\0\u2697\0\u26f0\0\u2749"+
    "\0\u27a2\0\u27fb\0\u2854\0\u28ad\0\u0642\0\u2906\0\u295f\0\u29b8"+
    "\0\u2a11\0\u2a6a\0\u2ac3\0\u2b1c\0\u2b75\0\u0642\0\u2bce\0\u2c27"+
    "\0\u2c80\0\u2cd9\0\u2d32\0\u2d8b\0\u074d\0\u2de4\0\u2e3d\0\u2e96"+
    "\0\u2eef\0\u2f48\0\u2fa1\0\u2ffa\0\u3053\0\u30ac\0\u3105\0\u315e"+
    "\0\u31b7\0\u3210\0\u3269\0\u32c2\0\u331b\0\u3374\0\u0642\0\u33cd"+
    "\0\u3426\0\u347f\0\u0642\0\u34d8\0\u0642\0\u3531\0\u074d\0\u074d"+
    "\0\u074d\0\u358a\0\u35e3\0\u363c\0\u3695\0\u36ee\0\u3747\0\u37a0"+
    "\0\u37f9\0\u3852\0\u38ab\0\u3904\0\u395d\0\u39b6\0\u3a0f\0\u3a68"+
    "\0\u3ac1\0\u3b1a\0\u3b73\0\u3bcc\0\u3c25\0\u174b\0\u3c7e\0\u3cd7"+
    "\0\u3d30\0\u3d89\0\u3de2\0\u3e3b\0\u3e94\0\u3eed\0\u3f46\0\u3f9f"+
    "\0\u3ff8\0\u4051\0\u40aa\0\u4103\0\u415c\0\u41b5\0\u174b\0\u174b"+
    "\0\u174b\0\u420e\0\u4267\0\u42c0\0\u4319\0\u4372\0\u43cb\0\u4424"+
    "\0\u447d\0\u44d6\0\u452f\0\u25e5\0\u0642\0\u4588\0\u45e1\0\u463a"+
    "\0\u4693\0\u46ec\0\u4745\0\u479e\0\u074d\0\u47f7\0\u4850\0\u48a9"+
    "\0\u4902\0\u495b\0\u49b4\0\u4a0d\0\u4a66\0\u4abf\0\u4b18\0\u4b71"+
    "\0\u4bca\0\u4c23\0\u4c7c\0\u2c80\0\u4cd5\0\u4d2e\0\u4d87\0\u4de0"+
    "\0\u4e39\0\u4e92\0\u4eeb\0\u4f44\0\u4f9d\0\u4ff6\0\u504f\0\u50a8"+
    "\0\u074d\0\u5101\0\u515a\0\u31b7\0\u51b3\0\u520c\0\u5265\0\u52be"+
    "\0\u5317\0\u33cd\0\u5370\0\u53c9\0\u5422\0\u547b\0\u54d4\0\u552d"+
    "\0\u5586\0\u55df\0\u5638\0\u5691\0\u56ea\0\u5743\0\u579c\0\u57f5"+
    "\0\u584e\0\u58a7\0\u174b\0\u5900\0\u5959\0\u59b2\0\u5a0b\0\u5a64"+
    "\0\u5abd\0\u5b16\0\u5b6f\0\u5bc8\0\u5c21\0\u5c7a\0\u5cd3\0\u174b"+
    "\0\u5d2c\0\u5d85\0\u4051\0\u5dde\0\u5e37\0\u5e90\0\u5ee9\0\u5f42"+
    "\0\u5f9b\0\u5ff4\0\u604d\0\u60a6\0\u60ff\0\u6158\0\u61b1\0\u620a"+
    "\0\u6263\0\u62bc\0\u6315\0\u636e\0\u63c7\0\u6420\0\u6479\0\u64d2"+
    "\0\u652b\0\u6584\0\u65dd\0\u6636\0\u668f\0\u66e8\0\u6741\0\u679a"+
    "\0\u67f3\0\u684c\0\u68a5\0\u68fe\0\u6957\0\u69b0\0\u6a09\0\u6a62"+
    "\0\u6abb\0\u6b14\0\u6b6d\0\u6bc6\0\u6c1f\0\u6c78\0\u6cd1\0\u6d2a"+
    "\0\u6d83\0\u6ddc\0\u6e35\0\u6e8e\0\u6ee7\0\u6f40\0\u6f99\0\u6ff2"+
    "\0\u704b\0\u70a4\0\u70fd\0\u7156\0\u71af\0\u7208\0\u7261\0\u72ba"+
    "\0\u7313\0\u736c\0\u73c5\0\u741e\0\u7477\0\u74d0\0\u7529\0\u0642"+
    "\0\u7582\0\u75db\0\u7634\0\u0642\0\u768d\0\u76e6\0\u773f\0\u7798"+
    "\0\u77f1\0\u784a\0\u78a3\0\u78fc\0\u7955\0\u79ae\0\u7a07\0\u7a60"+
    "\0\u7ab9\0\u7b12\0\u7b6b\0\u7bc4\0\u7c1d\0\u0642\0\u7c76\0\u7ccf"+
    "\0\u7d28\0\u7d81\0\u7dda\0\u7e33\0\u7e8c\0\u7ee5\0\u7f3e\0\u7f97"+
    "\0\u7ff0\0\u8049\0\u80a2\0\u80fb\0\u8154\0\u81ad\0\u8206\0\u825f"+
    "\0\u82b8\0\u8311\0\u836a\0\u83c3\0\u841c\0\u8475\0\u84ce\0\u8527"+
    "\0\u8580\0\u85d9\0\u8632\0\u868b\0\u86e4\0\u873d\0\u074d\0\u074d"+
    "\0\u8796\0\u87ef\0\u8848\0\u88a1\0\u88fa\0\u8953\0\u89ac\0\u8a05"+
    "\0\u8a5e\0\u8ab7\0\u174b\0\u8b10\0\u8b69\0\u8bc2\0\u8c1b\0\u8c74"+
    "\0\u8ccd\0\u8d26\0\u8d7f\0\u8dd8\0\u8e31\0\u8e8a\0\u8ee3\0\u8f3c"+
    "\0\u8f95\0\u8fee\0\u9047\0\u90a0\0\u90f9\0\u9152\0\u91ab\0\u9204"+
    "\0\u925d\0\u92b6\0\u930f\0\u9368\0\u93c1\0\u941a\0\u9473\0\u94cc"+
    "\0\u9525\0\u957e\0\u95d7\0\u9630\0\u9689\0\u96e2\0\u973b\0\u9794"+
    "\0\u97ed\0\u9846\0\u989f\0\u98f8\0\u9951\0\u99aa\0\u9a03\0\u9a5c"+
    "\0\u9ab5\0\u9b0e\0\u9b67\0\u9bc0\0\u9c19";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[509];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\3\32"+
    "\1\33\1\34\1\35\1\36\1\37\4\27\1\40\1\27"+
    "\1\41\1\42\1\43\2\27\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\51\1\60\1\51\1\27\1\61\1\62\1\63\1\27"+
    "\1\64\1\65\1\30\1\66\1\67\1\70\1\71\1\27"+
    "\1\72\1\27\1\73\1\74\1\75\1\76\1\77\1\30"+
    "\10\27\1\30\3\27\1\100\1\101\1\102\1\103\1\104"+
    "\1\105\1\106\1\107\1\110\1\111\1\112\1\113\1\114"+
    "\1\115\1\116\2\2\1\117\126\2\2\120\1\121\35\120"+
    "\1\122\70\120\1\23\1\24\1\25\1\26\1\123\1\30"+
    "\1\31\3\32\1\33\1\124\1\125\1\36\1\126\4\123"+
    "\1\127\1\123\1\130\1\131\1\132\2\123\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\133\1\53\1\54\1\55"+
    "\1\56\1\57\1\51\1\60\1\51\1\123\1\134\1\135"+
    "\1\136\1\123\1\137\1\140\1\30\1\141\1\142\1\143"+
    "\1\144\1\123\1\145\1\123\1\146\1\147\1\150\1\151"+
    "\1\77\1\30\10\123\1\30\3\123\1\100\1\101\1\102"+
    "\1\103\1\104\1\105\1\106\1\152\1\153\1\154\1\155"+
    "\1\156\1\157\1\115\1\116\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\3\32\1\33\1\160\1\35\1\36"+
    "\1\37\4\27\1\40\1\27\1\41\1\42\1\43\2\27"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\133\1\53"+
    "\1\54\1\55\1\56\1\57\1\51\1\60\1\51\1\27"+
    "\1\61\1\62\1\63\1\27\1\64\1\65\1\30\1\66"+
    "\1\67\1\70\1\71\1\27\1\72\1\27\1\73\1\74"+
    "\1\75\1\76\1\77\1\30\10\27\1\30\3\27\1\100"+
    "\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110"+
    "\1\111\1\112\1\113\1\114\1\115\1\116\1\161\1\162"+
    "\1\163\126\161\2\7\1\0\126\7\1\164\3\165\125\164"+
    "\1\166\1\167\127\166\2\170\1\0\126\170\1\171\3\165"+
    "\125\171\1\172\3\165\125\172\1\173\3\165\125\173\1\174"+
    "\1\175\127\174\2\176\1\0\126\176\1\177\1\200\52\177"+
    "\1\201\4\177\1\201\4\177\1\201\36\177\1\201\3\177"+
    "\1\202\3\165\125\202\1\203\1\204\127\203\133\0\1\25"+
    "\131\0\1\26\131\0\2\27\5\0\2\27\1\0\14\27"+
    "\17\0\23\27\1\0\15\27\7\0\6\27\7\0\1\30"+
    "\5\0\1\30\1\0\1\205\42\0\1\30\14\0\1\30"+
    "\10\0\1\30\26\0\1\206\1\0\1\51\4\0\2\206"+
    "\1\0\3\206\3\207\3\206\1\207\2\206\6\0\1\51"+
    "\2\0\1\210\5\0\4\207\1\206\1\207\1\206\1\0"+
    "\1\207\1\206\1\207\1\206\4\207\1\206\2\207\2\0"+
    "\3\207\1\206\1\207\1\206\1\207\1\206\1\0\1\207"+
    "\2\206\7\0\1\206\2\207\1\206\2\207\2\0\2\33"+
    "\1\211\126\33\4\0\1\27\1\212\5\0\1\213\1\27"+
    "\1\214\14\27\17\0\7\27\1\212\13\27\1\0\1\212"+
    "\10\27\1\212\3\27\7\0\6\27\6\0\1\27\1\215"+
    "\5\0\2\27\1\0\14\27\17\0\7\27\1\215\13\27"+
    "\1\0\1\215\10\27\1\215\3\27\7\0\6\27\17\0"+
    "\1\216\117\0\2\27\5\0\2\27\1\0\1\27\1\217"+
    "\12\27\17\0\23\27\1\0\15\27\7\0\6\27\6\0"+
    "\2\27\5\0\2\27\1\0\1\220\13\27\17\0\23\27"+
    "\1\0\15\27\7\0\6\27\6\0\2\27\5\0\2\27"+
    "\1\0\1\27\1\221\12\27\17\0\23\27\1\0\15\27"+
    "\7\0\6\27\6\0\2\27\5\0\2\27\1\0\1\27"+
    "\1\222\12\27\17\0\23\27\1\0\15\27\7\0\6\27"+
    "\6\0\2\27\5\0\2\27\1\0\12\27\1\223\1\27"+
    "\17\0\23\27\1\0\15\27\7\0\6\27\35\0\1\51"+
    "\4\0\1\51\74\0\1\224\6\0\2\224\1\0\14\224"+
    "\2\0\1\51\3\0\1\51\10\0\7\224\1\0\13\224"+
    "\2\0\10\224\1\0\3\224\7\0\6\224\40\0\1\51"+
    "\1\0\1\51\126\0\1\51\130\0\1\51\1\0\1\51"+
    "\2\0\1\225\6\0\1\226\1\227\1\0\1\230\1\231"+
    "\3\0\1\232\2\0\1\233\4\0\1\234\42\0\1\235"+
    "\1\0\1\236\4\0\2\235\1\0\14\235\1\0\1\236"+
    "\1\0\1\236\10\0\1\237\2\0\7\235\1\0\13\235"+
    "\2\0\10\235\1\0\3\235\7\0\6\235\42\0\1\240"+
    "\1\0\1\241\126\0\1\51\2\0\1\51\131\0\1\51"+
    "\131\0\1\51\67\0\2\27\5\0\2\27\1\0\14\27"+
    "\17\0\6\27\1\242\1\27\1\243\12\27\1\0\15\27"+
    "\7\0\6\27\6\0\2\27\5\0\2\27\1\0\14\27"+
    "\17\0\1\27\1\244\6\27\1\245\11\27\1\246\1\0"+
    "\15\27\7\0\6\27\6\0\2\27\5\0\2\27\1\0"+
    "\14\27\17\0\2\27\1\245\2\27\1\247\15\27\1\0"+
    "\15\27\7\0\6\27\6\0\2\27\5\0\1\27\1\250"+
    "\1\0\14\27\17\0\23\27\1\0\15\27\7\0\1\245"+
    "\1\27\1\251\2\27\1\252\6\0\2\27\5\0\2\27"+
    "\1\0\14\27\17\0\20\27\1\253\2\27\1\0\15\27"+
    "\7\0\6\27\6\0\2\27\5\0\2\27\1\0\14\27"+
    "\17\0\5\27\1\254\15\27\1\0\15\27\7\0\6\27"+
    "\6\0\2\27\5\0\2\27\1\0\14\27\17\0\21\27"+
    "\1\245\1\27\1\0\15\27\7\0\6\27\6\0\2\27"+
    "\5\0\2\27\1\0\14\27\17\0\10\27\1\112\12\27"+
    "\1\0\15\27\7\0\6\27\6\0\2\27\5\0\2\27"+
    "\1\0\14\27\17\0\6\27\1\255\14\27\1\0\15\27"+
    "\7\0\3\27\1\245\2\27\6\0\2\27\5\0\2\27"+
    "\1\0\14\27\17\0\2\27\1\256\10\27\1\255\7\27"+
    "\1\0\15\27\7\0\6\27\6\0\2\27\5\0\2\27"+
    "\1\0\14\27\17\0\5\27\1\245\2\27\1\257\1\260"+
    "\1\245\10\27\1\0\15\27\7\0\6\27\6\0\2\27"+
    "\5\0\2\27\1\0\14\27\17\0\2\27\1\261\2\27"+
    "\1\262\15\27\1\0\15\27\7\0\6\27\6\0\2\27"+
    "\5\0\2\27\1\0\14\27\17\0\2\27\1\263\20\27"+
    "\1\0\15\27\7\0\6\27\6\0\2\27\5\0\2\27"+
    "\1\0\14\27\17\0\20\27\1\264\2\27\1\0\15\27"+
    "\7\0\4\27\1\265\1\27\6\0\1\266\5\267\1\270"+
    "\2\266\1\267\14\266\5\267\1\0\6\267\1\271\2\267"+
    "\7\266\1\272\13\266\1\270\1\272\10\266\1\272\3\266"+
    "\7\267\6\266\116\0\1\273\20\0\1\274\1\0\1\275"+
    "\4\0\2\274\1\0\14\274\1\0\1\275\1\0\1\275"+
    "\10\0\1\276\2\0\7\274\1\0\13\274\2\0\10\274"+
    "\1\0\3\274\7\0\6\274\6\0\2\27\5\0\2\27"+
    "\1\0\14\27\17\0\10\27\1\277\12\27\1\0\15\27"+
    "\7\0\1\300\1\301\1\300\3\27\6\0\2\27\5\0"+
    "\2\27\1\0\14\27\17\0\4\27\1\302\16\27\1\0"+
    "\15\27\7\0\6\27\6\0\2\27\5\0\2\27\1\0"+
    "\14\27\17\0\2\27\1\246\20\27\1\0\15\27\7\0"+
    "\6\27\6\0\2\27\5\0\2\27\1\0\14\27\17\0"+
    "\2\27\1\303\3\27\1\304\3\27\1\305\2\27\1\306"+
    "\4\27\1\307\1\0\15\27\7\0\6\27\6\0\2\27"+
    "\5\0\2\27\1\0\14\27\17\0\2\27\1\310\2\27"+
    "\1\245\1\311\3\27\1\245\10\27\1\0\15\27\7\0"+
    "\6\27\2\0\2\120\1\121\130\120\1\121\63\120\1\312"+
    "\42\120\4\0\2\123\5\0\2\123\1\0\14\123\17\0"+
    "\23\123\1\0\15\123\7\0\6\123\6\0\1\123\1\313"+
    "\5\0\1\314\1\123\1\214\14\123\17\0\7\123\1\313"+
    "\13\123\1\0\1\313\10\123\1\313\3\123\7\0\6\123"+
    "\6\0\1\123\1\315\5\0\2\123\1\0\14\123\17\0"+
    "\7\123\1\315\13\123\1\0\1\315\10\123\1\315\3\123"+
    "\7\0\6\123\6\0\2\123\5\0\2\123\1\0\1\123"+
    "\1\316\12\123\17\0\23\123\1\0\15\123\7\0\6\123"+
    "\6\0\2\123\5\0\2\123\1\0\1\317\13\123\17\0"+
    "\23\123\1\0\15\123\7\0\6\123\6\0\2\123\5\0"+
    "\2\123\1\0\1\123\1\320\12\123\17\0\23\123\1\0"+
    "\15\123\7\0\6\123\6\0\2\123\5\0\2\123\1\0"+
    "\1\123\1\321\12\123\17\0\23\123\1\0\15\123\7\0"+
    "\6\123\6\0\2\123\5\0\2\123\1\0\12\123\1\322"+
    "\1\123\17\0\23\123\1\0\15\123\7\0\6\123\40\0"+
    "\1\51\1\0\1\51\2\0\1\225\71\0\2\123\5\0"+
    "\2\123\1\0\14\123\17\0\6\123\1\323\1\123\1\324"+
    "\12\123\1\0\15\123\7\0\6\123\6\0\2\123\5\0"+
    "\2\123\1\0\14\123\17\0\1\123\1\325\6\123\1\326"+
    "\11\123\1\327\1\0\15\123\7\0\6\123\6\0\2\123"+
    "\5\0\2\123\1\0\14\123\17\0\2\123\1\326\2\123"+
    "\1\330\15\123\1\0\15\123\7\0\6\123\6\0\2\123"+
    "\5\0\1\123\1\331\1\0\14\123\17\0\23\123\1\0"+
    "\15\123\7\0\1\326\1\123\1\332\2\123\1\333\6\0"+
    "\2\123\5\0\2\123\1\0\14\123\17\0\20\123\1\334"+
    "\2\123\1\0\15\123\7\0\6\123\6\0\2\123\5\0"+
    "\2\123\1\0\14\123\17\0\5\123\1\335\15\123\1\0"+
    "\15\123\7\0\6\123\6\0\2\123\5\0\2\123\1\0"+
    "\14\123\17\0\21\123\1\326\1\123\1\0\15\123\7\0"+
    "\6\123\6\0\2\123\5\0\2\123\1\0\14\123\17\0"+
    "\10\123\1\155\12\123\1\0\15\123\7\0\6\123\6\0"+
    "\2\123\5\0\2\123\1\0\14\123\17\0\6\123\1\336"+
    "\14\123\1\0\15\123\7\0\3\123\1\326\2\123\6\0"+
    "\2\123\5\0\2\123\1\0\14\123\17\0\2\123\1\337"+
    "\10\123\1\336\7\123\1\0\15\123\7\0\6\123\6\0"+
    "\2\123\5\0\2\123\1\0\14\123\17\0\5\123\1\326"+
    "\2\123\1\340\1\341\1\326\10\123\1\0\15\123\7\0"+
    "\6\123\6\0\2\123\5\0\2\123\1\0\14\123\17\0"+
    "\2\123\1\342\2\123\1\343\15\123\1\0\15\123\7\0"+
    "\6\123\6\0\2\123\5\0\2\123\1\0\14\123\17\0"+
    "\2\123\1\344\20\123\1\0\15\123\7\0\6\123\6\0"+
    "\2\123\5\0\2\123\1\0\14\123\17\0\20\123\1\345"+
    "\2\123\1\0\15\123\7\0\4\123\1\346\1\123\6\0"+
    "\2\123\5\0\2\123\1\0\14\123\17\0\10\123\1\347"+
    "\12\123\1\0\15\123\7\0\1\350\1\351\1\350\3\123"+
    "\6\0\2\123\5\0\2\123\1\0\14\123\17\0\4\123"+
    "\1\352\16\123\1\0\15\123\7\0\6\123\6\0\2\123"+
    "\5\0\2\123\1\0\14\123\17\0\2\123\1\327\20\123"+
    "\1\0\15\123\7\0\6\123\6\0\2\123\5\0\2\123"+
    "\1\0\14\123\17\0\2\123\1\353\3\123\1\354\3\123"+
    "\1\355\2\123\1\356\4\123\1\357\1\0\15\123\7\0"+
    "\6\123\6\0\2\123\5\0\2\123\1\0\14\123\17\0"+
    "\2\123\1\360\2\123\1\326\1\361\3\123\1\326\10\123"+
    "\1\0\15\123\7\0\6\123\6\0\1\27\1\212\5\0"+
    "\1\362\1\27\1\214\14\27\17\0\7\27\1\212\13\27"+
    "\1\0\1\212\10\27\1\212\3\27\7\0\6\27\2\0"+
    "\2\161\1\0\130\161\1\163\126\161\1\0\3\165\127\0"+
    "\1\166\126\0\1\172\3\0\125\172\2\0\1\174\130\0"+
    "\1\177\130\0\1\203\133\0\1\363\5\0\1\364\44\0"+
    "\1\363\14\0\1\363\10\0\1\363\26\0\2\206\5\0"+
    "\2\206\1\0\14\206\17\0\23\206\1\0\15\206\7\0"+
    "\6\206\2\0\4\365\2\206\5\365\2\206\1\365\14\206"+
    "\17\365\23\206\1\365\15\206\7\365\6\206\2\365\4\0"+
    "\1\27\1\212\5\0\1\212\1\27\1\214\14\27\17\0"+
    "\7\27\1\212\13\27\1\0\1\212\10\27\1\212\3\27"+
    "\7\0\6\27\6\0\1\27\1\212\5\0\1\212\1\27"+
    "\1\214\1\366\1\27\1\367\11\27\17\0\7\27\1\212"+
    "\13\27\1\0\1\212\2\27\1\370\2\27\1\371\1\27"+
    "\1\372\1\212\2\27\1\373\7\0\6\27\7\0\1\364"+
    "\5\0\1\364\44\0\1\364\14\0\1\364\10\0\1\364"+
    "\26\0\1\27\1\215\5\0\1\215\1\27\1\374\14\27"+
    "\17\0\7\27\1\215\13\27\1\0\1\215\10\27\1\215"+
    "\3\27\7\0\6\27\17\0\1\51\117\0\2\27\5\0"+
    "\2\27\1\0\2\27\1\375\11\27\17\0\23\27\1\0"+
    "\15\27\7\0\6\27\6\0\2\27\5\0\2\27\1\0"+
    "\6\27\1\376\5\27\17\0\23\27\1\0\15\27\7\0"+
    "\6\27\6\0\2\27\5\0\2\27\1\0\7\27\1\377"+
    "\4\27\17\0\23\27\1\0\15\27\7\0\6\27\6\0"+
    "\2\27\5\0\2\27\1\0\7\27\1\u0100\4\27\17\0"+
    "\23\27\1\0\15\27\7\0\6\27\6\0\2\27\5\0"+
    "\2\27\1\0\1\u0101\13\27\17\0\23\27\1\0\15\27"+
    "\7\0\6\27\6\0\2\224\5\0\2\224\1\0\14\224"+
    "\17\0\23\224\1\0\15\224\2\0\1\u0102\4\0\6\224"+
    "\55\0\1\u0103\71\0\1\u0104\172\0\1\u0105\143\0\1\u0106"+
    "\122\0\1\u0107\123\0\1\u0108\1\u0109\124\0\1\u010a\61\0"+
    "\2\235\5\0\2\235\1\0\14\235\17\0\23\235\1\0"+
    "\15\235\2\0\1\u010b\4\0\6\235\32\0\1\236\143\0"+
    "\1\51\70\0\1\u010c\1\u010d\2\0\1\u010e\1\u010f\1\u0110"+
    "\1\0\2\u010d\1\0\14\u010d\17\0\7\u010d\1\0\13\u010d"+
    "\2\0\10\u010d\1\0\3\u010d\7\0\6\u010d\6\0\2\27"+
    "\5\0\2\27\1\0\14\27\17\0\15\27\1\u0111\5\27"+
    "\1\0\15\27\7\0\6\27\6\0\2\27\5\0\2\27"+
    "\1\0\14\27\17\0\11\27\1\u0112\11\27\1\0\15\27"+
    "\7\0\6\27\6\0\2\27\5\0\2\27\1\0\14\27"+
    "\17\0\5\27\1\u0113\15\27\1\0\15\27\7\0\6\27"+
    "\6\0\2\27\5\0\2\27\1\0\14\27\17\0\10\27"+
    "\1\245\12\27\1\0\15\27\7\0\6\27\6\0\2\27"+
    "\5\0\2\27\1\0\14\27\17\0\21\27\1\u0114\1\27"+
    "\1\0\15\27\7\0\6\27\6\0\2\27\5\0\2\27"+
    "\1\0\14\27\17\0\6\27\1\u0115\14\27\1\0\15\27"+
    "\7\0\6\27\6\0\2\27\5\0\2\27\1\0\14\27"+
    "\17\0\11\27\1\u0116\11\27\1\0\15\27\7\0\6\27"+
    "\6\0\2\27\5\0\2\27\1\0\14\27\17\0\23\27"+
    "\1\0\15\27\7\0\4\27\1\u0117\1\27\6\0\2\27"+
    "\5\0\2\27\1\0\14\27\17\0\3\27\1\245\17\27"+
    "\1\0\15\27\7\0\6\27\6\0\2\27\5\0\2\27"+
    "\1\0\14\27\17\0\3\27\1\u0118\15\27\1\u0119\1\27"+
    "\1\0\15\27\7\0\1\u011a\5\27\6\0\2\27\5\0"+
    "\2\27\1\0\14\27\17\0\1\27\1\245\21\27\1\0"+
    "\15\27\7\0\6\27\6\0\2\27\5\0\2\27\1\0"+
    "\14\27\17\0\20\27\1\u011b\2\27\1\0\15\27\7\0"+
    "\6\27\6\0\2\27\5\0\2\27\1\0\14\27\17\0"+
    "\5\27\1\255\15\27\1\0\15\27\7\0\6\27\6\0"+
    "\2\27\5\0\1\27\1\244\1\0\14\27\17\0\23\27"+
    "\1\0\15\27\7\0\6\27\6\0\2\27\5\0\2\27"+
    "\1\0\14\27\17\0\12\27\1\245\10\27\1\0\15\27"+
    "\7\0\6\27\6\0\2\27\5\0\2\27\1\0\14\27"+
    "\17\0\23\27\1\0\15\27\7\0\2\27\1\u011c\3\27"+
    "\6\0\2\27\5\0\2\27\1\0\14\27\17\0\10\27"+
    "\1\u011d\12\27\1\0\15\27\7\0\6\27\6\0\2\27"+
    "\5\0\2\27\1\0\14\27\17\0\3\27\1\u011e\6\27"+
    "\1\u011f\10\27\1\0\15\27\7\0\5\27\1\u0120\6\0"+
    "\2\27\5\0\2\27\1\0\14\27\17\0\5\27\1\245"+
    "\15\27\1\0\15\27\7\0\6\27\6\0\2\266\5\0"+
    "\2\266\1\0\14\266\17\0\23\266\1\0\15\266\2\0"+
    "\1\u0121\4\0\6\266\6\0\1\266\6\0\2\266\1\0"+
    "\14\266\17\0\7\266\1\0\13\266\1\u0122\1\0\10\266"+
    "\1\0\3\266\7\0\6\266\20\0\1\u0123\3\267\1\u0124"+
    "\2\0\1\267\1\u0125\1\u0126\1\267\45\0\1\u0127\1\u0128"+
    "\1\267\1\0\2\267\1\u0129\1\267\1\0\3\267\24\0"+
    "\1\272\52\0\1\272\14\0\1\272\10\0\1\272\26\0"+
    "\2\274\5\0\2\274\1\0\14\274\17\0\23\274\1\0"+
    "\15\274\2\0\1\u012a\4\0\6\274\32\0\1\275\104\0"+
    "\2\27\5\0\2\27\1\0\14\27\17\0\11\27\1\u012b"+
    "\11\27\1\0\15\27\7\0\6\27\6\0\2\27\5\0"+
    "\2\27\1\0\14\27\17\0\10\27\1\u011c\12\27\1\0"+
    "\15\27\7\0\6\27\6\0\2\27\5\0\2\27\1\0"+
    "\14\27\17\0\23\27\1\0\15\27\7\0\3\27\1\245"+
    "\2\27\6\0\2\27\5\0\2\27\1\0\14\27\17\0"+
    "\6\27\1\u012c\14\27\1\0\15\27\7\0\6\27\6\0"+
    "\2\27\5\0\2\27\1\0\14\27\17\0\6\27\1\u012d"+
    "\14\27\1\0\15\27\7\0\6\27\6\0\2\27\5\0"+
    "\2\27\1\0\14\27\17\0\14\27\1\245\6\27\1\0"+
    "\15\27\7\0\6\27\6\0\2\27\5\0\2\27\1\0"+
    "\14\27\17\0\15\27\1\250\5\27\1\0\15\27\7\0"+
    "\6\27\6\0\2\27\5\0\2\27\1\0\14\27\17\0"+
    "\23\27\1\0\15\27\7\0\4\27\1\u011c\1\27\2\0"+
    "\2\120\1\121\70\120\1\u012e\35\120\4\0\1\123\1\313"+
    "\5\0\1\313\1\123\1\214\14\123\17\0\7\123\1\313"+
    "\13\123\1\0\1\313\10\123\1\313\3\123\7\0\6\123"+
    "\6\0\1\123\1\313\5\0\1\313\1\123\1\214\14\123"+
    "\17\0\7\123\1\313\13\123\1\0\1\313\2\123\1\u012f"+
    "\2\123\1\u0130\1\123\1\u0131\1\313\2\123\1\u0132\7\0"+
    "\6\123\6\0\1\123\1\315\5\0\1\315\1\123\1\374"+
    "\14\123\17\0\7\123\1\315\13\123\1\0\1\315\10\123"+
    "\1\315\3\123\7\0\6\123\6\0\2\123\5\0\2\123"+
    "\1\0\2\123\1\u0133\11\123\17\0\23\123\1\0\15\123"+
    "\7\0\6\123\6\0\2\123\5\0\2\123\1\0\6\123"+
    "\1\u0134\5\123\17\0\23\123\1\0\15\123\7\0\6\123"+
    "\6\0\2\123\5\0\2\123\1\0\7\123\1\u0135\4\123"+
    "\17\0\23\123\1\0\15\123\7\0\6\123\6\0\2\123"+
    "\5\0\2\123\1\0\7\123\1\u0136\4\123\17\0\23\123"+
    "\1\0\15\123\7\0\6\123\6\0\2\123\5\0\2\123"+
    "\1\0\1\u0137\13\123\17\0\23\123\1\0\15\123\7\0"+
    "\6\123\6\0\2\123\5\0\2\123\1\0\14\123\17\0"+
    "\15\123\1\u0138\5\123\1\0\15\123\7\0\6\123\6\0"+
    "\2\123\5\0\2\123\1\0\14\123\17\0\11\123\1\u0139"+
    "\11\123\1\0\15\123\7\0\6\123\6\0\2\123\5\0"+
    "\2\123\1\0\14\123\17\0\5\123\1\u013a\15\123\1\0"+
    "\15\123\7\0\6\123\6\0\2\123\5\0\2\123\1\0"+
    "\14\123\17\0\10\123\1\326\12\123\1\0\15\123\7\0"+
    "\6\123\6\0\2\123\5\0\2\123\1\0\14\123\17\0"+
    "\21\123\1\u013b\1\123\1\0\15\123\7\0\6\123\6\0"+
    "\2\123\5\0\2\123\1\0\14\123\17\0\6\123\1\u013c"+
    "\14\123\1\0\15\123\7\0\6\123\6\0\2\123\5\0"+
    "\2\123\1\0\14\123\17\0\11\123\1\u013d\11\123\1\0"+
    "\15\123\7\0\6\123\6\0\2\123\5\0\2\123\1\0"+
    "\14\123\17\0\23\123\1\0\15\123\7\0\4\123\1\u013e"+
    "\1\123\6\0\2\123\5\0\2\123\1\0\14\123\17\0"+
    "\3\123\1\326\17\123\1\0\15\123\7\0\6\123\6\0"+
    "\2\123\5\0\2\123\1\0\14\123\17\0\3\123\1\u013f"+
    "\15\123\1\u0140\1\123\1\0\15\123\7\0\1\u0141\5\123"+
    "\6\0\2\123\5\0\2\123\1\0\14\123\17\0\1\123"+
    "\1\326\21\123\1\0\15\123\7\0\6\123\6\0\2\123"+
    "\5\0\2\123\1\0\14\123\17\0\20\123\1\u0142\2\123"+
    "\1\0\15\123\7\0\6\123\6\0\2\123\5\0\2\123"+
    "\1\0\14\123\17\0\5\123\1\336\15\123\1\0\15\123"+
    "\7\0\6\123\6\0\2\123\5\0\1\123\1\325\1\0"+
    "\14\123\17\0\23\123\1\0\15\123\7\0\6\123\6\0"+
    "\2\123\5\0\2\123\1\0\14\123\17\0\12\123\1\326"+
    "\10\123\1\0\15\123\7\0\6\123\6\0\2\123\5\0"+
    "\2\123\1\0\14\123\17\0\23\123\1\0\15\123\7\0"+
    "\2\123\1\u0143\3\123\6\0\2\123\5\0\2\123\1\0"+
    "\14\123\17\0\10\123\1\u0144\12\123\1\0\15\123\7\0"+
    "\6\123\6\0\2\123\5\0\2\123\1\0\14\123\17\0"+
    "\3\123\1\u0145\6\123\1\u0146\10\123\1\0\15\123\7\0"+
    "\5\123\1\u0147\6\0\2\123\5\0\2\123\1\0\14\123"+
    "\17\0\5\123\1\326\15\123\1\0\15\123\7\0\6\123"+
    "\6\0\2\123\5\0\2\123\1\0\14\123\17\0\11\123"+
    "\1\u0148\11\123\1\0\15\123\7\0\6\123\6\0\2\123"+
    "\5\0\2\123\1\0\14\123\17\0\10\123\1\u0143\12\123"+
    "\1\0\15\123\7\0\6\123\6\0\2\123\5\0\2\123"+
    "\1\0\14\123\17\0\23\123\1\0\15\123\7\0\3\123"+
    "\1\326\2\123\6\0\2\123\5\0\2\123\1\0\14\123"+
    "\17\0\6\123\1\u0149\14\123\1\0\15\123\7\0\6\123"+
    "\6\0\2\123\5\0\2\123\1\0\14\123\17\0\6\123"+
    "\1\u014a\14\123\1\0\15\123\7\0\6\123\6\0\2\123"+
    "\5\0\2\123\1\0\14\123\17\0\14\123\1\326\6\123"+
    "\1\0\15\123\7\0\6\123\6\0\2\123\5\0\2\123"+
    "\1\0\14\123\17\0\15\123\1\331\5\123\1\0\15\123"+
    "\7\0\6\123\6\0\2\123\5\0\2\123\1\0\14\123"+
    "\17\0\23\123\1\0\15\123\7\0\4\123\1\u0143\1\123"+
    "\6\0\1\27\1\212\5\0\1\212\1\27\1\214\14\27"+
    "\17\0\7\27\1\212\13\27\1\0\1\212\2\27\1\370"+
    "\2\27\1\371\1\27\1\372\1\212\2\27\1\373\7\0"+
    "\6\27\7\0\1\363\5\0\1\363\1\0\1\374\42\0"+
    "\1\363\14\0\1\363\10\0\1\363\26\0\2\27\5\0"+
    "\2\27\1\0\1\27\1\u014b\12\27\17\0\23\27\1\0"+
    "\15\27\7\0\6\27\6\0\2\27\5\0\2\27\1\0"+
    "\3\27\1\u014c\10\27\17\0\23\27\1\0\15\27\7\0"+
    "\6\27\6\0\2\27\5\0\2\27\1\0\10\27\1\u014d"+
    "\3\27\17\0\23\27\1\0\15\27\7\0\6\27\6\0"+
    "\2\27\5\0\2\27\1\0\7\27\1\u014e\4\27\17\0"+
    "\23\27\1\0\15\27\7\0\6\27\6\0\2\27\5\0"+
    "\2\27\1\0\7\27\1\u014f\4\27\17\0\23\27\1\0"+
    "\15\27\7\0\6\27\6\0\2\27\5\0\2\27\1\0"+
    "\3\27\1\u0150\10\27\17\0\23\27\1\0\15\27\7\0"+
    "\6\27\7\0\1\u0151\52\0\1\u0151\14\0\1\u0151\10\0"+
    "\1\u0151\26\0\2\27\5\0\2\27\1\0\7\27\1\u0152"+
    "\4\27\17\0\23\27\1\0\15\27\7\0\6\27\6\0"+
    "\2\27\5\0\2\27\1\0\4\27\1\375\7\27\17\0"+
    "\23\27\1\0\15\27\7\0\6\27\6\0\2\27\5\0"+
    "\2\27\1\0\4\27\1\u0153\7\27\17\0\23\27\1\0"+
    "\15\27\7\0\6\27\6\0\2\27\5\0\2\27\1\0"+
    "\11\27\1\u0154\2\27\17\0\23\27\1\0\15\27\7\0"+
    "\6\27\116\0\1\u0155\70\0\1\u0156\132\0\1\u010a\131\0"+
    "\1\u0157\125\0\1\u0156\11\0\1\u0158\120\0\1\u0159\142\0"+
    "\1\u015a\126\0\1\u015b\123\0\1\u0156\163\0\1\u015c\20\0"+
    "\2\u010d\5\0\2\u010d\1\0\14\u010d\17\0\23\u010d\1\0"+
    "\15\u010d\7\0\6\u010d\6\0\1\u015d\6\0\2\u015d\1\0"+
    "\14\u015d\17\0\7\u015d\1\0\13\u015d\2\0\10\u015d\1\0"+
    "\3\u015d\7\0\6\u015d\6\0\1\u015e\6\0\2\u015e\1\0"+
    "\14\u015e\17\0\7\u015e\1\0\13\u015e\2\0\10\u015e\1\0"+
    "\3\u015e\7\0\6\u015e\6\0\1\u015f\6\0\2\u015f\1\0"+
    "\14\u015f\17\0\7\u015f\1\0\13\u015f\2\0\10\u015f\1\0"+
    "\3\u015f\7\0\6\u015f\6\0\2\27\5\0\2\27\1\0"+
    "\14\27\17\0\16\27\1\u0160\4\27\1\0\15\27\7\0"+
    "\6\27\6\0\2\27\5\0\2\27\1\0\14\27\17\0"+
    "\20\27\1\u011c\2\27\1\0\15\27\7\0\6\27\6\0"+
    "\2\27\5\0\2\27\1\0\14\27\17\0\20\27\1\245"+
    "\2\27\1\0\15\27\7\0\6\27\6\0\2\27\5\0"+
    "\2\27\1\0\14\27\17\0\11\27\1\u0161\11\27\1\0"+
    "\15\27\7\0\6\27\6\0\2\27\5\0\2\27\1\0"+
    "\14\27\17\0\23\27\1\0\15\27\7\0\5\27\1\245"+
    "\6\0\2\27\5\0\2\27\1\0\14\27\17\0\23\27"+
    "\1\0\15\27\7\0\4\27\1\u0162\1\27\6\0\2\27"+
    "\5\0\2\27\1\0\14\27\17\0\5\27\1\245\3\27"+
    "\1\67\11\27\1\0\15\27\7\0\6\27\6\0\2\27"+
    "\5\0\2\27\1\0\14\27\17\0\2\27\1\245\20\27"+
    "\1\0\15\27\7\0\6\27\6\0\2\27\5\0\2\27"+
    "\1\0\14\27\17\0\22\27\1\u0163\1\0\15\27\7\0"+
    "\6\27\6\0\2\27\5\0\2\27\1\0\14\27\17\0"+
    "\12\27\1\u0164\10\27\1\0\15\27\7\0\6\27\6\0"+
    "\2\27\5\0\2\27\1\0\14\27\17\0\5\27\1\u0165"+
    "\15\27\1\0\15\27\7\0\6\27\6\0\2\27\5\0"+
    "\2\27\1\0\14\27\17\0\5\27\1\67\15\27\1\0"+
    "\15\27\7\0\6\27\6\0\2\27\5\0\2\27\1\0"+
    "\14\27\17\0\11\27\1\u0115\11\27\1\0\15\27\7\0"+
    "\6\27\6\0\2\27\5\0\2\27\1\0\14\27\17\0"+
    "\5\27\1\u0166\15\27\1\0\15\27\7\0\6\27\116\0"+
    "\1\u0167\33\0\1\u0168\132\0\1\u0169\126\0\1\u016a\2\0"+
    "\1\u016b\136\0\1\u016c\121\0\1\u016d\3\0\1\u016e\121\0"+
    "\1\u016f\223\0\1\u0170\133\0\1\u0171\20\0\2\27\5\0"+
    "\2\27\1\0\14\27\17\0\23\27\1\0\15\27\7\0"+
    "\5\27\1\265\6\0\2\27\5\0\2\27\1\0\14\27"+
    "\17\0\12\27\1\265\10\27\1\0\15\27\7\0\6\27"+
    "\6\0\2\27\5\0\2\27\1\0\14\27\17\0\23\27"+
    "\1\0\15\27\7\0\5\27\1\u0172\2\0\2\120\1\121"+
    "\60\120\1\u0173\45\120\4\0\2\123\5\0\2\123\1\0"+
    "\10\123\1\u0174\3\123\17\0\23\123\1\0\15\123\7\0"+
    "\6\123\6\0\2\123\5\0\2\123\1\0\7\123\1\u0175"+
    "\4\123\17\0\23\123\1\0\15\123\7\0\6\123\6\0"+
    "\2\123\5\0\2\123\1\0\7\123\1\u0176\4\123\17\0"+
    "\23\123\1\0\15\123\7\0\6\123\6\0\2\123\5\0"+
    "\2\123\1\0\3\123\1\u0177\10\123\17\0\23\123\1\0"+
    "\15\123\7\0\6\123\6\0\2\123\5\0\2\123\1\0"+
    "\7\123\1\u0178\4\123\17\0\23\123\1\0\15\123\7\0"+
    "\6\123\6\0\2\123\5\0\2\123\1\0\4\123\1\u0133"+
    "\7\123\17\0\23\123\1\0\15\123\7\0\6\123\6\0"+
    "\2\123\5\0\2\123\1\0\4\123\1\u0179\7\123\17\0"+
    "\23\123\1\0\15\123\7\0\6\123\6\0\2\123\5\0"+
    "\2\123\1\0\11\123\1\u017a\2\123\17\0\23\123\1\0"+
    "\15\123\7\0\6\123\6\0\2\123\5\0\2\123\1\0"+
    "\14\123\17\0\16\123\1\u017b\4\123\1\0\15\123\7\0"+
    "\6\123\6\0\2\123\5\0\2\123\1\0\14\123\17\0"+
    "\20\123\1\u0143\2\123\1\0\15\123\7\0\6\123\6\0"+
    "\2\123\5\0\2\123\1\0\14\123\17\0\20\123\1\326"+
    "\2\123\1\0\15\123\7\0\6\123\6\0\2\123\5\0"+
    "\2\123\1\0\14\123\17\0\11\123\1\u017c\11\123\1\0"+
    "\15\123\7\0\6\123\6\0\2\123\5\0\2\123\1\0"+
    "\14\123\17\0\23\123\1\0\15\123\7\0\5\123\1\326"+
    "\6\0\2\123\5\0\2\123\1\0\14\123\17\0\23\123"+
    "\1\0\15\123\7\0\4\123\1\u017d\1\123\6\0\2\123"+
    "\5\0\2\123\1\0\14\123\17\0\5\123\1\326\3\123"+
    "\1\142\11\123\1\0\15\123\7\0\6\123\6\0\2\123"+
    "\5\0\2\123\1\0\14\123\17\0\2\123\1\326\20\123"+
    "\1\0\15\123\7\0\6\123\6\0\2\123\5\0\2\123"+
    "\1\0\14\123\17\0\22\123\1\u017e\1\0\15\123\7\0"+
    "\6\123\6\0\2\123\5\0\2\123\1\0\14\123\17\0"+
    "\12\123\1\u017f\10\123\1\0\15\123\7\0\6\123\6\0"+
    "\2\123\5\0\2\123\1\0\14\123\17\0\5\123\1\u0180"+
    "\15\123\1\0\15\123\7\0\6\123\6\0\2\123\5\0"+
    "\2\123\1\0\14\123\17\0\5\123\1\142\15\123\1\0"+
    "\15\123\7\0\6\123\6\0\2\123\5\0\2\123\1\0"+
    "\14\123\17\0\11\123\1\u013c\11\123\1\0\15\123\7\0"+
    "\6\123\6\0\2\123\5\0\2\123\1\0\14\123\17\0"+
    "\5\123\1\u0181\15\123\1\0\15\123\7\0\6\123\6\0"+
    "\2\123\5\0\2\123\1\0\14\123\17\0\23\123\1\0"+
    "\15\123\7\0\5\123\1\346\6\0\2\123\5\0\2\123"+
    "\1\0\14\123\17\0\12\123\1\346\10\123\1\0\15\123"+
    "\7\0\6\123\6\0\2\123\5\0\2\123\1\0\14\123"+
    "\17\0\23\123\1\0\15\123\7\0\5\123\1\u0182\6\0"+
    "\2\27\5\0\2\27\1\0\2\27\1\u0183\11\27\17\0"+
    "\23\27\1\0\15\27\7\0\6\27\6\0\2\27\5\0"+
    "\2\27\1\0\4\27\1\u0184\7\27\17\0\23\27\1\0"+
    "\15\27\7\0\6\27\6\0\2\27\5\0\2\27\1\0"+
    "\5\27\1\u0185\6\27\17\0\23\27\1\0\15\27\7\0"+
    "\6\27\6\0\2\27\5\0\2\27\1\0\1\27\1\u0186"+
    "\12\27\17\0\23\27\1\0\15\27\7\0\6\27\6\0"+
    "\2\27\5\0\2\27\1\0\14\27\17\0\23\27\1\0"+
    "\6\27\1\u0186\6\27\7\0\6\27\6\0\2\27\5\0"+
    "\2\27\1\0\11\27\1\u0187\2\27\17\0\23\27\1\0"+
    "\15\27\7\0\6\27\7\0\1\u0151\5\0\1\u0151\1\0"+
    "\1\374\42\0\1\u0151\14\0\1\u0151\10\0\1\u0151\26\0"+
    "\2\27\5\0\2\27\1\0\1\27\1\375\12\27\17\0"+
    "\23\27\1\0\15\27\7\0\6\27\6\0\2\27\5\0"+
    "\2\27\1\0\11\27\1\43\2\27\17\0\23\27\1\0"+
    "\15\27\7\0\6\27\6\0\2\27\5\0\2\27\1\0"+
    "\13\27\1\375\17\0\23\27\1\0\15\27\7\0\6\27"+
    "\6\0\1\224\6\0\2\224\1\0\14\224\17\0\7\224"+
    "\1\0\13\224\2\0\10\224\1\0\3\224\7\0\6\224"+
    "\2\0\2\u0156\1\u0188\126\u0156\54\0\1\u0189\127\0\1\u018a"+
    "\141\0\1\u0156\126\0\1\u018b\135\0\1\u0156\45\0\1\235"+
    "\6\0\2\235\1\0\14\235\17\0\7\235\1\0\13\235"+
    "\2\0\10\235\1\0\3\235\7\0\6\235\6\0\2\u015d"+
    "\1\0\1\u018c\3\0\2\u015d\1\0\14\u015d\17\0\23\u015d"+
    "\1\0\15\u015d\7\0\6\u015d\6\0\2\u015e\2\0\1\u018c"+
    "\2\0\2\u015e\1\0\14\u015e\17\0\23\u015e\1\0\15\u015e"+
    "\7\0\6\u015e\6\0\2\u015f\3\0\1\u018c\1\0\2\u015f"+
    "\1\0\14\u015f\17\0\23\u015f\1\0\15\u015f\7\0\6\u015f"+
    "\6\0\2\27\5\0\2\27\1\0\14\27\17\0\6\27"+
    "\1\u018d\14\27\1\0\15\27\7\0\6\27\6\0\2\27"+
    "\5\0\2\27\1\0\14\27\17\0\20\27\1\u018e\2\27"+
    "\1\0\15\27\7\0\6\27\6\0\2\27\5\0\2\27"+
    "\1\0\14\27\17\0\12\27\1\u018f\10\27\1\0\15\27"+
    "\7\0\6\27\6\0\2\27\5\0\2\27\1\0\14\27"+
    "\17\0\11\27\1\u0190\11\27\1\0\15\27\7\0\6\27"+
    "\6\0\2\27\5\0\2\27\1\0\14\27\17\0\11\27"+
    "\1\u0191\11\27\1\0\15\27\7\0\6\27\6\0\2\27"+
    "\5\0\2\27\1\0\14\27\17\0\6\27\1\u0192\14\27"+
    "\1\0\15\27\7\0\6\27\6\0\2\27\5\0\2\27"+
    "\1\0\14\27\17\0\23\27\1\0\15\27\7\0\4\27"+
    "\1\u0193\1\27\6\0\1\266\6\0\2\266\1\0\14\266"+
    "\17\0\7\266\1\0\13\266\2\0\10\266\1\0\3\266"+
    "\7\0\6\266\31\0\1\u0194\126\0\1\u0195\130\0\1\u0196"+
    "\210\0\1\u0197\50\0\1\u0198\202\0\1\u0199\51\0\1\u019a"+
    "\123\0\1\u019b\133\0\1\u019c\116\0\1\274\6\0\2\274"+
    "\1\0\14\274\17\0\7\274\1\0\13\274\2\0\10\274"+
    "\1\0\3\274\7\0\6\274\6\0\2\27\5\0\2\27"+
    "\1\0\14\27\17\0\6\27\1\u019d\14\27\1\0\15\27"+
    "\7\0\6\27\2\0\2\u0173\1\u019e\126\u0173\4\0\2\123"+
    "\5\0\2\123\1\0\5\123\1\u019f\6\123\17\0\23\123"+
    "\1\0\15\123\7\0\6\123\6\0\2\123\5\0\2\123"+
    "\1\0\1\123\1\u01a0\12\123\17\0\23\123\1\0\15\123"+
    "\7\0\6\123\6\0\2\123\5\0\2\123\1\0\14\123"+
    "\17\0\23\123\1\0\6\123\1\u01a0\6\123\7\0\6\123"+
    "\6\0\2\123\5\0\2\123\1\0\11\123\1\u01a1\2\123"+
    "\17\0\23\123\1\0\15\123\7\0\6\123\6\0\2\123"+
    "\5\0\2\123\1\0\1\123\1\u0133\12\123\17\0\23\123"+
    "\1\0\15\123\7\0\6\123\6\0\2\123\5\0\2\123"+
    "\1\0\11\123\1\132\2\123\17\0\23\123\1\0\15\123"+
    "\7\0\6\123\6\0\2\123\5\0\2\123\1\0\13\123"+
    "\1\u0133\17\0\23\123\1\0\15\123\7\0\6\123\6\0"+
    "\2\123\5\0\2\123\1\0\14\123\17\0\6\123\1\u01a2"+
    "\14\123\1\0\15\123\7\0\6\123\6\0\2\123\5\0"+
    "\2\123\1\0\14\123\17\0\20\123\1\u01a3\2\123\1\0"+
    "\15\123\7\0\6\123\6\0\2\123\5\0\2\123\1\0"+
    "\14\123\17\0\12\123\1\u01a4\10\123\1\0\15\123\7\0"+
    "\6\123\6\0\2\123\5\0\2\123\1\0\14\123\17\0"+
    "\11\123\1\u01a5\11\123\1\0\15\123\7\0\6\123\6\0"+
    "\2\123\5\0\2\123\1\0\14\123\17\0\11\123\1\u01a6"+
    "\11\123\1\0\15\123\7\0\6\123\6\0\2\123\5\0"+
    "\2\123\1\0\14\123\17\0\6\123\1\u01a7\14\123\1\0"+
    "\15\123\7\0\6\123\6\0\2\123\5\0\2\123\1\0"+
    "\14\123\17\0\23\123\1\0\15\123\7\0\4\123\1\u01a8"+
    "\1\123\6\0\2\123\5\0\2\123\1\0\14\123\17\0"+
    "\6\123\1\u01a9\14\123\1\0\15\123\7\0\6\123\6\0"+
    "\2\27\5\0\1\u01aa\1\27\1\0\14\27\17\0\23\27"+
    "\1\0\15\27\7\0\6\27\6\0\2\27\5\0\2\27"+
    "\1\0\3\27\1\u0183\10\27\17\0\23\27\1\0\15\27"+
    "\7\0\6\27\6\0\2\27\5\0\1\u01ab\1\27\1\0"+
    "\14\27\17\0\23\27\1\0\15\27\7\0\6\27\6\0"+
    "\2\27\5\0\2\27\1\0\1\u0185\13\27\17\0\23\27"+
    "\1\0\15\27\7\0\6\27\6\0\2\27\5\0\2\27"+
    "\1\0\13\27\1\u01ac\17\0\23\27\1\0\15\27\7\0"+
    "\6\27\62\0\1\u0156\124\0\1\u01ad\145\0\1\u0156\43\0"+
    "\2\27\5\0\2\27\1\0\14\27\17\0\17\27\1\265"+
    "\3\27\1\0\15\27\7\0\6\27\6\0\2\27\5\0"+
    "\2\27\1\0\14\27\17\0\5\27\1\u01ae\15\27\1\0"+
    "\15\27\7\0\6\27\6\0\2\27\5\0\2\27\1\0"+
    "\14\27\17\0\23\27\1\0\15\27\7\0\4\27\1\u0119"+
    "\1\27\6\0\2\27\5\0\2\27\1\0\14\27\17\0"+
    "\10\27\1\265\12\27\1\0\15\27\7\0\6\27\6\0"+
    "\2\27\5\0\2\27\1\0\14\27\17\0\20\27\1\u01af"+
    "\2\27\1\0\15\27\7\0\6\27\6\0\2\27\5\0"+
    "\2\27\1\0\14\27\17\0\15\27\1\u01b0\5\27\1\0"+
    "\15\27\7\0\6\27\6\0\2\27\5\0\2\27\1\0"+
    "\14\27\17\0\23\27\1\0\15\27\7\0\4\27\1\245"+
    "\1\27\106\0\1\u01b1\43\0\1\u01b2\140\0\1\u01b3\207\0"+
    "\1\u01b4\125\0\1\u01b5\44\0\1\u01b6\127\0\1\u01b7\132\0"+
    "\1\u01b8\1\0\1\u01b9\125\0\1\267\115\0\2\27\5\0"+
    "\2\27\1\0\14\27\17\0\10\27\1\u0119\12\27\1\0"+
    "\15\27\7\0\6\27\6\0\2\123\5\0\1\u01ba\1\123"+
    "\1\0\14\123\17\0\23\123\1\0\15\123\7\0\6\123"+
    "\6\0\2\123\5\0\2\123\1\0\1\u019f\13\123\17\0"+
    "\23\123\1\0\15\123\7\0\6\123\6\0\2\123\5\0"+
    "\2\123\1\0\13\123\1\u01bb\17\0\23\123\1\0\15\123"+
    "\7\0\6\123\6\0\2\123\5\0\2\123\1\0\14\123"+
    "\17\0\17\123\1\346\3\123\1\0\15\123\7\0\6\123"+
    "\6\0\2\123\5\0\2\123\1\0\14\123\17\0\5\123"+
    "\1\u01bc\15\123\1\0\15\123\7\0\6\123\6\0\2\123"+
    "\5\0\2\123\1\0\14\123\17\0\23\123\1\0\15\123"+
    "\7\0\4\123\1\u0140\1\123\6\0\2\123\5\0\2\123"+
    "\1\0\14\123\17\0\10\123\1\346\12\123\1\0\15\123"+
    "\7\0\6\123\6\0\2\123\5\0\2\123\1\0\14\123"+
    "\17\0\20\123\1\u01bd\2\123\1\0\15\123\7\0\6\123"+
    "\6\0\2\123\5\0\2\123\1\0\14\123\17\0\15\123"+
    "\1\u01be\5\123\1\0\15\123\7\0\6\123\6\0\2\123"+
    "\5\0\2\123\1\0\14\123\17\0\23\123\1\0\15\123"+
    "\7\0\4\123\1\326\1\123\6\0\2\123\5\0\2\123"+
    "\1\0\14\123\17\0\10\123\1\u0140\12\123\1\0\15\123"+
    "\7\0\6\123\6\0\2\27\5\0\1\u01bf\1\27\1\0"+
    "\14\27\17\0\23\27\1\0\15\27\7\0\6\27\6\0"+
    "\2\27\5\0\1\u01c0\1\27\1\0\14\27\17\0\23\27"+
    "\1\0\15\27\7\0\6\27\6\0\2\27\5\0\2\27"+
    "\1\0\3\27\1\u01c1\10\27\17\0\23\27\1\0\15\27"+
    "\7\0\6\27\64\0\1\u01c2\52\0\2\27\5\0\2\27"+
    "\1\0\14\27\17\0\3\27\1\u0119\17\27\1\0\15\27"+
    "\7\0\6\27\6\0\2\27\5\0\2\27\1\0\14\27"+
    "\17\0\22\27\1\265\1\0\15\27\7\0\6\27\6\0"+
    "\2\27\5\0\2\27\1\0\14\27\17\0\4\27\1\245"+
    "\16\27\1\0\15\27\7\0\6\27\22\0\1\u01c3\132\0"+
    "\1\267\212\0\1\u01c4\127\0\1\u01c5\45\0\1\u01c6\135\0"+
    "\1\u01c7\116\0\1\u01c8\133\0\1\u01c9\211\0\1\u01ca\35\0"+
    "\2\123\5\0\1\u01cb\1\123\1\0\14\123\17\0\23\123"+
    "\1\0\15\123\7\0\6\123\6\0\2\123\5\0\2\123"+
    "\1\0\3\123\1\u01cc\10\123\17\0\23\123\1\0\15\123"+
    "\7\0\6\123\6\0\2\123\5\0\2\123\1\0\14\123"+
    "\17\0\3\123\1\u0140\17\123\1\0\15\123\7\0\6\123"+
    "\6\0\2\123\5\0\2\123\1\0\14\123\17\0\22\123"+
    "\1\346\1\0\15\123\7\0\6\123\6\0\2\123\5\0"+
    "\2\123\1\0\14\123\17\0\4\123\1\326\16\123\1\0"+
    "\15\123\7\0\6\123\6\0\2\27\5\0\2\27\1\0"+
    "\6\27\1\u0186\5\27\17\0\23\27\1\0\15\27\7\0"+
    "\6\27\73\0\1\u01cd\64\0\1\u01ce\123\0\1\u01cf\214\0"+
    "\1\u01d0\37\0\1\u01d1\134\0\1\u01d2\211\0\1\u01d3\53\0"+
    "\1\u01d4\132\0\1\u01d5\107\0\2\123\5\0\2\123\1\0"+
    "\6\123\1\u01a0\5\123\17\0\23\123\1\0\15\123\7\0"+
    "\6\123\72\0\1\u0156\57\0\1\u01d6\127\0\1\267\141\0"+
    "\1\u01d7\117\0\1\u01d8\136\0\1\u01d9\205\0\1\u01da\55\0"+
    "\1\u01db\120\0\1\u01dc\136\0\1\267\125\0\1\u01dd\206\0"+
    "\1\u01de\44\0\1\u01df\215\0\1\u01e0\54\0\1\u01e1\117\0"+
    "\1\u01e2\220\0\1\u01cf\124\0\1\u01e3\54\0\1\u01e4\127\0"+
    "\1\u01e5\121\0\1\u01e6\217\0\1\u01e7\132\0\1\u01e8\51\0"+
    "\1\u01e9\121\0\1\u01ea\217\0\1\u01eb\44\0\1\u01ec\206\0"+
    "\1\u01ed\53\0\1\u01ee\210\0\1\u01ef\131\0\1\u01f0\134\0"+
    "\1\u01f1\34\0\1\u01f2\215\0\1\267\43\0\1\u01f3\136\0"+
    "\1\u01f4\132\0\1\u01f5\124\0\1\u01f6\140\0\1\u01f7\125\0"+
    "\1\u01ee\132\0\1\u01f8\123\0\1\u01f9\130\0\1\u01fa\214\0"+
    "\1\267\45\0\1\u01fb\211\0\1\u01fc\52\0\1\u01fd\206\0"+
    "\1\u01ee\135\0\1\u01cf\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[40050];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\1\2\0\2\1\13\0\1\11\1\1\1\11"+
    "\4\1\1\11\11\1\1\11\4\1\1\11\6\1\1\11"+
    "\17\1\2\11\1\1\1\11\1\1\2\11\6\1\3\11"+
    "\1\1\1\11\41\1\2\11\1\1\1\11\1\1\2\11"+
    "\1\1\2\11\1\1\2\11\1\1\3\11\1\1\1\0"+
    "\2\1\2\11\2\1\1\0\10\1\1\11\7\0\1\1"+
    "\1\11\1\0\27\1\1\11\3\1\1\11\1\1\1\11"+
    "\1\0\66\1\1\11\6\1\1\0\5\1\13\0\1\1"+
    "\3\0\20\1\2\0\2\1\1\0\4\1\1\0\52\1"+
    "\1\0\1\1\11\0\7\1\13\0\26\1\1\11\3\0"+
    "\1\11\7\1\11\0\1\1\1\11\16\1\1\0\3\1"+
    "\11\0\10\1\11\0\2\1\61\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[509];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    public void setTokenStart(int position){zzCurrentPos = zzStartRead = position;}
    public void setTokenEnd(int position){zzMarkedPos = position;}
    public CharSequence getBuffer(){ return zzBuffer;}
    public char[] getBufferArray(){ return zzBufferArray;}
    public int getBufferEnd() {return zzEndRead;}
    public int getNextTokenStart(){ return zzMarkedPos;}
    public boolean isLastToken(){ return zzMarkedPos == zzEndRead; }
    public void setState(int newState){ zzLexicalState = newState; }



  public PerlLexerGenerated(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PerlLexerGenerated(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 202) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 55: 
          { return PERL_ARRAY;
          }
        case 65: break;
        case 11: 
          { return processStringOpener();
          }
        case 66: break;
        case 61: 
          { processPodOpener();break;
          }
        case 67: break;
        case 3: 
          { if( isMultilineEnd() || isLastToken())
        {
            return endMultiline();
        }
        break;
          }
        case 68: break;
        case 9: 
          { return PERL_NUMBER;
          }
        case 69: break;
        case 45: 
          { return parseRegex();
          }
        case 70: break;
        case 64: 
          { return PERL_TAG;
          }
        case 71: break;
        case 35: 
          { return processOpenerWhiteSpace();
          }
        case 72: break;
        case 18: 
          { return processRegexOpener();
          }
        case 73: break;
        case 41: 
          { IElementType tokenType = processTransChar();
          if( tokenType != null )
                return tokenType;
          break;
          }
        case 74: break;
        case 63: 
          { processDataOpener(); break;
          }
        case 75: break;
        case 38: 
          { IElementType type = processQuoteLikeListQuote();
            if( type == null ) // disallowed sharp
                break;
            return type;
          }
        case 76: break;
        case 10: 
          { return PERL_OPERATOR;
          }
        case 77: break;
        case 7: 
          { return TokenType.WHITE_SPACE;
          }
        case 78: break;
        case 52: 
          { return PERL_HASH;
          }
        case 79: break;
        case 40: 
          { IElementType type = processTransQuote();
            if( type == null ) // disallowed sharp
                break;
            return type;
          }
        case 80: break;
        case 27: 
          { return processQuoteLikeStringOpener();
          }
        case 81: break;
        case 13: 
          { return PERL_COMMA;
          }
        case 82: break;
        case 56: 
          { return processQuoteLikeListOpener();
          }
        case 83: break;
        case 44: 
          { return PERL_REGEX_MODIFIER;
          }
        case 84: break;
        case 29: 
          { return processTransOpener();
          }
        case 85: break;
        case 1: 
          { if( isLastToken() )
            return endDataBlock();
        break;
          }
        case 86: break;
        case 22: 
          { return PERL_COLON;
          }
        case 87: break;
        case 28: 
          { return PERL_KEYWORD;
          }
        case 88: break;
        case 23: 
          { return processSemicolon();
          }
        case 89: break;
        case 50: 
          { return PERL_GLOB;
          }
        case 90: break;
        case 36: 
          { IElementType tokenType = processQuoteLikeChar();
          if( tokenType != null )
                return tokenType;
          break;
          }
        case 91: break;
        case 54: 
          { return PERL_DEPACKAGE;
          }
        case 92: break;
        case 12: 
          { return PERL_COMMENT;
          }
        case 93: break;
        case 32: 
          { yybegin(YYINITIAL); return PERL_STRING_CONTENT;
          }
        case 94: break;
        case 33: 
          { if( isLastToken() )
        {
            return endMultiline();
        }
        break;
          }
        case 95: break;
        case 59: 
          { return processMultilineOpener();
          }
        case 96: break;
        case 57: 
          { yypushback(1);return PERL_OPERATOR_FILETEST;
          }
        case 97: break;
        case 42: 
          { return processTransCloser();
          }
        case 98: break;
        case 6: 
          { return processNewLine();
          }
        case 99: break;
        case 47: 
          { return PERL_STRING_CONTENT;
          }
        case 100: break;
        case 49: 
          { return PERL_NUMBER_VERSION;
          }
        case 101: break;
        case 20: 
          { return PERL_LPAREN;
          }
        case 102: break;
        case 14: 
          { return PERL_SIGIL_HASH;
          }
        case 103: break;
        case 5: 
          { return TokenType.BAD_CHARACTER;
          }
        case 104: break;
        case 53: 
          { return PERL_SCALAR;
          }
        case 105: break;
        case 2: 
          { if( isLastToken() )
        {
            endPodBlock();
        }
        break;
          }
        case 106: break;
        case 21: 
          { return PERL_RPAREN;
          }
        case 107: break;
        case 19: 
          { return PERL_SIGIL_SCALAR;
          }
        case 108: break;
        case 24: 
          { return PERL_SIGIL_ARRAY;
          }
        case 109: break;
        case 4: 
          { yybegin(YYINITIAL);return PERL_STRING_MULTILINE_END;
          }
        case 110: break;
        case 46: 
          { IElementType nextTokenType = getParsedToken();
        if( nextTokenType == null )
            break;
        return nextTokenType;
          }
        case 111: break;
        case 58: 
          { return PERL_BLOCK_NAME;
          }
        case 112: break;
        case 34: 
          { IElementType type = processQuoteLikeQuote();
            if( type == null ) // disallowed sharp
                break;
            return type;
          }
        case 113: break;
        case 60: 
          { return PERL_OPERATOR_UNARY;
          }
        case 114: break;
        case 17: 
          { // regexp or div
    IElementType tokenType = processDiv();
    if( tokenType == null )
        break;
    return tokenType;
          }
        case 115: break;
        case 51: 
          { return PERL_ARROW_COMMA;
          }
        case 116: break;
        case 48: 
          { return PERL_DEREFERENCE;
          }
        case 117: break;
        case 30: 
          { return PERL_LBRACE;
          }
        case 118: break;
        case 16: 
          { return PERL_RANGLE;
          }
        case 119: break;
        case 31: 
          { return PERL_RBRACE;
          }
        case 120: break;
        case 15: 
          { return PERL_LANGLE;
          }
        case 121: break;
        case 39: 
          { IElementType tokenType = processQuoteLikeWord();
          if( tokenType != null )
                return tokenType;
          break;
          }
        case 122: break;
        case 37: 
          { popState(); return PERL_QUOTE;
          }
        case 123: break;
        case 8: 
          { return PERL_BAREWORD;
          }
        case 124: break;
        case 62: 
          { return endPodBlock();
          }
        case 125: break;
        case 43: 
          { popState(); yypushback(1); break;
          }
        case 126: break;
        case 26: 
          { return PERL_RBRACK;
          }
        case 127: break;
        case 25: 
          { return PERL_LBRACK;
          }
        case 128: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
