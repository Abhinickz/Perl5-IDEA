/* The following code was generated by JFlex 1.4.3 on 05.05.15 22:39 */

package com.perl5.lang.perl.lexer;

/*
    http://jflex.de/manual.html
    http://www2.cs.tum.edu/projects/cup

*/

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import org.jetbrains.annotations.NotNull;
import com.perl5.lang.perl.util.PerlFunctionUtil;
import com.perl5.lang.perl.util.PerlScalarUtil;
import com.perl5.lang.perl.util.PerlHashUtil;
import com.perl5.lang.perl.util.PerlGlobUtil;
import com.perl5.lang.perl.util.PerlArrayUtil;
import com.perl5.lang.perl.util.PerlPackageUtil;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 05.05.15 22:39 from the specification file
 * <tt>C:/Repository/Perl5-IDEA/src/com/perl5/lang/perl/lexer/Perl.flex</tt>
 */
public abstract class PerlLexerGenerated implements PerlLexerBase {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int LEX_POD = 4;
  public static final int LEX_MULTILINE = 12;
  public static final int LEX_TRANS_MODIFIERS = 34;
  public static final int LEX_QUOTE_LIKE_LIST_OPENER = 22;
  public static final int LEX_CODE = 8;
  public static final int LEX_TRANS_OPENER = 28;
  public static final int LEX_MULTILINE_WAITING = 10;
  public static final int LEX_BAREWORD_STRING = 6;
  public static final int LEX_QUOTE_LIKE_CHARS = 18;
  public static final int LEX_QUOTE_LIKE_WORDS = 24;
  public static final int LEX_TRANS_CLOSER = 32;
  public static final int LEX_REGEX_ITEMS = 38;
  public static final int LEX_TRANS_CHARS = 30;
  public static final int LEX_REGEX_OPENER = 36;
  public static final int LEX_QUOTE_LIKE_OPENER = 16;
  public static final int LEX_QUOTE_LIKE_CLOSER = 20;
  public static final int LEX_EOF = 2;
  public static final int YYINITIAL = 0;
  public static final int LEX_MULTILINE_TOKEN = 14;
  public static final int LEX_QUOTE_LIKE_LIST_CLOSER = 26;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  0,  0,  4,  4,  5,  5,  6,  6, 
     7,  7,  8,  8,  9,  9, 10, 10, 11, 11,  9,  9, 12, 12, 13, 13, 
    14, 14, 15, 15, 16, 16, 17, 17
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\27\1\6"+
    "\1\11\1\71\1\33\1\35\1\7\1\115\1\116\1\26\1\25\1\22"+
    "\1\23\1\14\1\40\1\5\1\65\1\65\1\65\1\65\3\72\1\110"+
    "\1\72\1\42\1\117\1\34\1\32\1\24\1\41\1\120\1\20\1\77"+
    "\1\103\1\17\1\15\1\107\1\76\1\112\1\75\1\4\1\125\1\104"+
    "\1\102\1\16\1\106\1\114\1\4\1\74\1\100\1\21\1\105\1\113"+
    "\1\73\1\111\1\101\1\4\1\121\1\31\1\122\1\37\1\12\1\10"+
    "\1\46\1\66\1\56\1\47\1\52\1\53\1\60\1\64\1\54\1\4"+
    "\1\67\1\57\1\62\1\43\1\44\1\63\1\61\1\50\1\55\1\45"+
    "\1\70\1\13\1\123\1\51\1\124\1\4\1\126\1\36\1\127\1\30"+
    "\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\0\1\3\1\4\13\0\2\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\11\1\10"+
    "\1\5\1\14\10\15\1\16\3\15\1\17\1\15\10\10"+
    "\1\20\3\10\1\21\1\20\2\10\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\10\1\31\1\32\1\33"+
    "\1\1\3\2\1\34\1\11\1\34\1\15\6\34\1\10"+
    "\3\34\1\20\3\34\1\21\1\20\3\34\1\31\1\11"+
    "\2\3\1\35\1\36\1\37\2\40\1\41\1\42\1\43"+
    "\1\44\2\45\1\46\2\47\1\50\1\51\2\52\1\0"+
    "\1\13\2\11\1\0\1\53\1\15\1\54\1\55\7\0"+
    "\2\56\1\0\2\15\1\57\1\60\14\10\1\20\1\21"+
    "\1\61\3\10\5\62\2\63\1\0\1\10\1\2\2\11"+
    "\1\53\1\60\2\10\2\34\1\60\17\34\1\20\1\21"+
    "\1\61\4\34\3\11\6\10\14\0\1\64\3\0\4\10"+
    "\1\60\7\10\2\0\5\62\1\0\1\62\1\0\1\10"+
    "\1\2\13\34\1\60\11\34\6\10\1\53\1\0\1\65"+
    "\11\0\6\10\13\0\1\66\15\34\5\10\1\65\3\0"+
    "\1\64\5\10\11\0\1\66\12\34\3\10\1\0\2\10"+
    "\11\0\4\34\1\67\1\70\1\10\11\0\1\70\1\34"+
    "\61\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[438];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\130\0\260\0\u0108\0\u0160\0\u01b8\0\u0210\0\u0268"+
    "\0\u02c0\0\u0318\0\u0370\0\u03c8\0\u0420\0\u0478\0\u04d0\0\u0528"+
    "\0\u0580\0\u05d8\0\u0630\0\u0688\0\u0630\0\u06e0\0\u0738\0\u0790"+
    "\0\u0630\0\u07e8\0\u0840\0\u0898\0\u08f0\0\u0630\0\u0948\0\u09a0"+
    "\0\u09f8\0\u0a50\0\u0aa8\0\u0b00\0\u0630\0\u0b58\0\u0bb0\0\u0c08"+
    "\0\u0c60\0\u0cb8\0\u0630\0\u0d10\0\u0d68\0\u0dc0\0\u0e18\0\u0e70"+
    "\0\u0ec8\0\u0f20\0\u0f78\0\u0fd0\0\u1028\0\u1080\0\u10d8\0\u1130"+
    "\0\u1188\0\u11e0\0\u1238\0\u1290\0\u12e8\0\u0630\0\u0630\0\u0630"+
    "\0\u1340\0\u0630\0\u0630\0\u1398\0\u0738\0\u0630\0\u0630\0\u0630"+
    "\0\u13f0\0\u0630\0\u1448\0\u14a0\0\u14f8\0\u1550\0\u15a8\0\u1600"+
    "\0\u1658\0\u16b0\0\u1708\0\u1760\0\u17b8\0\u1810\0\u1868\0\u18c0"+
    "\0\u1918\0\u1970\0\u19c8\0\u1a20\0\u1a78\0\u1ad0\0\u1b28\0\u1b80"+
    "\0\u1bd8\0\u1c30\0\u14a0\0\u1c88\0\u1ce0\0\u1d38\0\u0630\0\u0630"+
    "\0\u1d90\0\u0630\0\u1de8\0\u0630\0\u0630\0\u1e40\0\u0630\0\u0630"+
    "\0\u1e98\0\u0630\0\u0630\0\u1ef0\0\u0630\0\u0630\0\u0630\0\u1f48"+
    "\0\u1fa0\0\u0630\0\u1ff8\0\u2050\0\u20a8\0\u2100\0\u2158\0\u21b0"+
    "\0\u0630\0\u2208\0\u2260\0\u22b8\0\u2310\0\u2368\0\u23c0\0\u2418"+
    "\0\u2470\0\u0630\0\u24c8\0\u2520\0\u2578\0\u0630\0\u0738\0\u25d0"+
    "\0\u2628\0\u2680\0\u26d8\0\u2730\0\u2788\0\u27e0\0\u2838\0\u2890"+
    "\0\u28e8\0\u2940\0\u2998\0\u0738\0\u0738\0\u0738\0\u29f0\0\u2a48"+
    "\0\u2aa0\0\u2af8\0\u0630\0\u2b50\0\u2ba8\0\u2c00\0\u2c58\0\u0630"+
    "\0\u2cb0\0\u2d08\0\u2d60\0\u2db8\0\u2e10\0\u2e68\0\u2ec0\0\u2f18"+
    "\0\u14a0\0\u2f70\0\u2fc8\0\u14a0\0\u3020\0\u3078\0\u30d0\0\u3128"+
    "\0\u3180\0\u31d8\0\u3230\0\u3288\0\u32e0\0\u3338\0\u3390\0\u33e8"+
    "\0\u3440\0\u3498\0\u34f0\0\u14a0\0\u14a0\0\u14a0\0\u3548\0\u35a0"+
    "\0\u35f8\0\u3650\0\u36a8\0\u3700\0\u20a8\0\u3758\0\u37b0\0\u3808"+
    "\0\u3860\0\u38b8\0\u3910\0\u3968\0\u39c0\0\u3a18\0\u3a70\0\u3ac8"+
    "\0\u3b20\0\u3b78\0\u3bd0\0\u3c28\0\u3c80\0\u3cd8\0\u2578\0\u3d30"+
    "\0\u3d88\0\u3de0\0\u3e38\0\u3e90\0\u3ee8\0\u3f40\0\u3f98\0\u3ff0"+
    "\0\u4048\0\u40a0\0\u40f8\0\u4150\0\u41a8\0\u4200\0\u4258\0\u42b0"+
    "\0\u2b50\0\u4308\0\u4360\0\u43b8\0\u4410\0\u4468\0\u44c0\0\u4518"+
    "\0\u4570\0\u45c8\0\u4620\0\u4678\0\u46d0\0\u4728\0\u4780\0\u47d8"+
    "\0\u4830\0\u4888\0\u48e0\0\u4938\0\u4990\0\u49e8\0\u4a40\0\u4a98"+
    "\0\u4af0\0\u4b48\0\u4ba0\0\u4bf8\0\u4c50\0\u4ca8\0\u4d00\0\u4d58"+
    "\0\u4db0\0\u4e08\0\u4e60\0\u4eb8\0\u4f10\0\u4f68\0\u4fc0\0\u5018"+
    "\0\u5070\0\u50c8\0\u5120\0\u5178\0\u51d0\0\u5228\0\u5280\0\u52d8"+
    "\0\u5330\0\u5388\0\u53e0\0\u5438\0\u5490\0\u54e8\0\u5540\0\u5598"+
    "\0\u55f0\0\u5648\0\u56a0\0\u56f8\0\u5750\0\u57a8\0\u5800\0\u5858"+
    "\0\u58b0\0\u5908\0\u5960\0\u59b8\0\u5a10\0\u5a68\0\u5ac0\0\u5b18"+
    "\0\u5b70\0\u5bc8\0\u5c20\0\u5c78\0\u5cd0\0\u5d28\0\u5d80\0\u5dd8"+
    "\0\u5e30\0\u5e88\0\u5ee0\0\u5f38\0\u5f90\0\u5fe8\0\u0630\0\u6040"+
    "\0\u6098\0\u60f0\0\u0630\0\u6148\0\u61a0\0\u61f8\0\u6250\0\u62a8"+
    "\0\u6300\0\u6358\0\u63b0\0\u6408\0\u6460\0\u64b8\0\u6510\0\u6568"+
    "\0\u65c0\0\u0630\0\u6618\0\u6670\0\u66c8\0\u6720\0\u6778\0\u67d0"+
    "\0\u6828\0\u6880\0\u68d8\0\u6930\0\u6988\0\u69e0\0\u6a38\0\u6a90"+
    "\0\u6ae8\0\u6b40\0\u6b98\0\u6bf0\0\u6c48\0\u6ca0\0\u6cf8\0\u6d50"+
    "\0\u6da8\0\u6e00\0\u6e58\0\u6eb0\0\u6f08\0\u6f60\0\u6fb8\0\u0738"+
    "\0\u0738\0\u7010\0\u7068\0\u70c0\0\u7118\0\u7170\0\u71c8\0\u7220"+
    "\0\u7278\0\u72d0\0\u7328\0\u14a0\0\u7380\0\u73d8\0\u7430\0\u7488"+
    "\0\u74e0\0\u7538\0\u7590\0\u75e8\0\u7640\0\u7698\0\u76f0\0\u7748"+
    "\0\u77a0\0\u77f8\0\u7850\0\u78a8\0\u7900\0\u7958\0\u79b0\0\u7a08"+
    "\0\u7a60\0\u7ab8\0\u7b10\0\u7b68\0\u7bc0\0\u7c18\0\u7c70\0\u7cc8"+
    "\0\u7d20\0\u7d78\0\u7dd0\0\u7e28\0\u7e80\0\u7ed8\0\u7f30\0\u7f88"+
    "\0\u7fe0\0\u8038\0\u8090\0\u80e8\0\u8140\0\u8198\0\u81f0\0\u8248"+
    "\0\u82a0\0\u82f8\0\u8350\0\u83a8\0\u8400\0\u8458";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[438];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\23\1\24\1\25\1\26\1\27\1\30\3\31\1\32"+
    "\1\33\1\34\1\35\5\27\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\45\1\53\1\45\1\54\1\55\1\56\1\57"+
    "\1\27\1\60\1\61\1\27\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\27\1\30"+
    "\2\27\1\74\1\75\1\30\15\27\1\30\4\27\1\76"+
    "\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\27"+
    "\1\106\1\107\2\2\1\110\125\2\2\111\1\112\27\111"+
    "\1\113\75\111\1\23\1\24\1\25\1\26\1\114\1\30"+
    "\3\31\1\32\1\115\1\116\1\35\5\114\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\117\1\47"+
    "\1\50\1\51\1\52\1\45\1\53\1\45\1\54\1\120"+
    "\1\121\1\122\1\123\1\124\1\125\1\126\1\127\1\130"+
    "\1\131\1\132\1\133\1\134\1\135\1\136\1\137\1\140"+
    "\1\114\1\30\2\114\1\141\1\75\1\30\15\114\1\30"+
    "\4\114\1\76\1\77\1\100\1\101\1\102\1\103\1\142"+
    "\1\143\1\114\1\106\1\107\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\3\31\1\32\1\144\1\34\1\35\5\27"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\117\1\47\1\50\1\51\1\52\1\45\1\53\1\45"+
    "\1\54\1\55\1\56\1\57\1\27\1\60\1\61\1\27"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\1\27\1\30\2\27\1\74\1\75\1\30"+
    "\15\27\1\30\4\27\1\76\1\77\1\100\1\101\1\102"+
    "\1\103\1\104\1\105\1\27\1\106\1\107\1\145\1\146"+
    "\1\147\125\145\2\7\1\0\125\7\1\150\3\151\124\150"+
    "\1\152\1\153\126\152\2\154\1\0\125\154\1\155\3\151"+
    "\124\155\1\156\3\151\124\156\1\157\3\151\124\157\1\160"+
    "\1\161\126\160\2\162\1\0\125\162\1\163\1\164\45\163"+
    "\2\165\4\163\2\165\51\163\1\166\3\151\124\166\1\167"+
    "\1\170\126\167\132\0\1\25\130\0\1\26\130\0\2\27"+
    "\4\0\2\27\1\0\5\27\21\0\26\27\1\0\23\27"+
    "\6\0\3\27\7\0\1\30\4\0\1\30\1\0\1\171"+
    "\50\0\1\30\4\0\1\30\15\0\1\30\17\0\2\32"+
    "\1\172\125\32\4\0\1\27\1\173\4\0\1\174\1\27"+
    "\1\175\5\27\21\0\22\27\1\173\3\27\1\0\1\173"+
    "\15\27\1\173\4\27\6\0\3\27\6\0\1\27\1\176"+
    "\4\0\2\27\1\0\5\27\21\0\22\27\1\176\3\27"+
    "\1\0\1\176\15\27\1\176\4\27\6\0\3\27\16\0"+
    "\1\177\136\0\2\45\5\0\1\45\121\0\1\45\5\0"+
    "\1\45\122\0\1\45\4\0\1\45\101\0\1\200\5\0"+
    "\2\200\1\0\5\200\4\0\1\45\3\0\1\45\10\0"+
    "\22\200\1\0\3\200\2\0\15\200\1\0\4\200\6\0"+
    "\3\200\32\0\1\45\1\0\1\45\125\0\1\45\123\0"+
    "\1\201\3\0\1\45\1\0\1\45\11\0\1\202\5\0"+
    "\1\203\1\204\1\205\6\0\1\206\1\207\1\0\1\210"+
    "\45\0\1\211\5\0\2\211\1\0\5\211\1\0\1\212"+
    "\1\0\1\212\1\0\1\212\7\0\1\213\3\0\22\211"+
    "\1\0\3\211\2\0\15\211\1\0\4\211\6\0\3\211"+
    "\34\0\1\214\1\0\1\215\130\0\1\45\130\0\1\45"+
    "\133\0\1\216\71\0\2\27\4\0\2\27\1\0\5\27"+
    "\21\0\1\27\1\217\5\27\1\220\16\27\1\0\23\27"+
    "\6\0\3\27\6\0\2\27\4\0\2\27\1\0\5\27"+
    "\21\0\25\27\1\221\1\0\23\27\6\0\3\27\6\0"+
    "\2\27\4\0\2\27\1\0\5\27\21\0\5\27\1\105"+
    "\20\27\1\0\23\27\6\0\3\27\6\0\2\27\4\0"+
    "\2\27\1\0\5\27\21\0\1\27\1\217\24\27\1\0"+
    "\23\27\6\0\3\27\6\0\2\27\4\0\2\27\1\0"+
    "\5\27\21\0\7\27\1\222\16\27\1\0\23\27\6\0"+
    "\3\27\6\0\2\27\4\0\1\27\1\223\1\0\5\27"+
    "\21\0\14\27\1\224\11\27\1\0\23\27\6\0\3\27"+
    "\6\0\2\27\4\0\2\27\1\0\5\27\21\0\1\27"+
    "\1\225\24\27\1\0\23\27\6\0\3\27\6\0\2\27"+
    "\4\0\2\27\1\0\5\27\21\0\10\27\1\217\15\27"+
    "\1\0\23\27\6\0\3\27\6\0\2\27\4\0\2\27"+
    "\1\0\5\27\21\0\2\27\1\226\22\27\1\227\1\0"+
    "\23\27\6\0\3\27\6\0\2\27\4\0\2\27\1\0"+
    "\5\27\21\0\1\27\1\230\24\27\1\0\23\27\6\0"+
    "\3\27\6\0\2\27\4\0\2\27\1\0\5\27\21\0"+
    "\1\27\1\231\1\27\1\232\22\27\1\0\23\27\6\0"+
    "\3\27\6\0\2\27\4\0\2\27\1\0\5\27\21\0"+
    "\11\27\1\233\14\27\1\0\23\27\6\0\3\27\6\0"+
    "\2\27\4\0\2\27\1\0\5\27\21\0\5\27\1\234"+
    "\1\235\7\27\1\235\7\27\1\0\23\27\6\0\1\236"+
    "\2\27\6\0\2\27\4\0\2\27\1\0\5\27\21\0"+
    "\26\27\1\0\23\27\6\0\1\27\1\217\1\27\6\0"+
    "\2\27\4\0\2\27\1\0\5\27\21\0\3\27\1\237"+
    "\22\27\1\0\23\27\6\0\3\27\6\0\2\27\4\0"+
    "\2\27\1\0\5\27\21\0\1\240\11\27\1\241\13\27"+
    "\1\0\23\27\6\0\3\27\6\0\1\242\4\243\1\244"+
    "\2\242\1\243\5\242\7\243\1\0\5\243\1\245\3\243"+
    "\22\242\1\246\3\242\1\244\1\246\15\242\1\246\4\242"+
    "\6\243\3\242\6\0\1\247\5\0\2\247\1\0\5\247"+
    "\1\0\1\250\1\0\1\250\1\0\1\250\7\0\1\251"+
    "\3\0\22\247\1\0\3\247\2\0\15\247\1\0\4\247"+
    "\6\0\3\247\6\0\2\27\4\0\2\27\1\0\5\27"+
    "\21\0\21\27\1\252\4\27\1\0\23\27\6\0\3\27"+
    "\2\0\2\111\1\112\127\111\1\112\53\111\1\253\51\111"+
    "\4\0\2\114\4\0\2\114\1\0\5\114\21\0\26\114"+
    "\1\0\23\114\6\0\3\114\6\0\1\114\1\254\4\0"+
    "\1\255\1\114\1\175\5\114\21\0\22\114\1\254\3\114"+
    "\1\0\1\254\15\114\1\254\4\114\6\0\3\114\6\0"+
    "\1\114\1\256\4\0\2\114\1\0\5\114\21\0\22\114"+
    "\1\256\3\114\1\0\1\256\15\114\1\256\4\114\6\0"+
    "\3\114\26\0\1\201\3\0\1\45\1\0\1\45\101\0"+
    "\2\114\4\0\2\114\1\0\5\114\21\0\1\114\1\257"+
    "\5\114\1\260\16\114\1\0\23\114\6\0\3\114\6\0"+
    "\2\114\4\0\2\114\1\0\5\114\21\0\5\114\1\261"+
    "\17\114\1\262\1\0\23\114\6\0\3\114\6\0\2\114"+
    "\4\0\2\114\1\0\5\114\21\0\5\114\1\143\20\114"+
    "\1\0\23\114\6\0\3\114\6\0\2\114\4\0\2\114"+
    "\1\0\5\114\21\0\1\263\25\114\1\0\23\114\6\0"+
    "\3\114\6\0\2\114\4\0\2\114\1\0\5\114\21\0"+
    "\1\114\1\264\5\114\1\265\16\114\1\0\23\114\6\0"+
    "\3\114\6\0\2\114\4\0\2\114\1\0\5\114\21\0"+
    "\7\114\1\266\16\114\1\0\23\114\6\0\3\114\6\0"+
    "\2\114\4\0\2\114\1\0\5\114\21\0\1\114\1\267"+
    "\24\114\1\0\23\114\6\0\3\114\6\0\2\114\4\0"+
    "\1\114\1\270\1\0\5\114\21\0\6\114\1\271\5\114"+
    "\1\272\1\114\1\261\7\114\1\0\23\114\6\0\3\114"+
    "\6\0\2\114\4\0\2\114\1\0\5\114\21\0\1\114"+
    "\1\273\24\114\1\0\23\114\6\0\3\114\6\0\2\114"+
    "\4\0\2\114\1\0\5\114\21\0\10\114\1\264\15\114"+
    "\1\0\23\114\6\0\3\114\6\0\2\114\4\0\2\114"+
    "\1\0\5\114\21\0\2\114\1\274\10\114\1\275\11\114"+
    "\1\276\1\0\23\114\6\0\3\114\6\0\2\114\4\0"+
    "\2\114\1\0\5\114\21\0\1\114\1\277\15\114\1\300"+
    "\6\114\1\0\23\114\6\0\3\114\6\0\2\114\4\0"+
    "\2\114\1\0\5\114\21\0\1\114\1\301\1\261\1\302"+
    "\3\114\1\261\16\114\1\0\23\114\6\0\3\114\6\0"+
    "\2\114\4\0\2\114\1\0\5\114\21\0\2\114\1\261"+
    "\4\114\1\261\1\114\1\303\14\114\1\0\23\114\6\0"+
    "\3\114\6\0\2\114\4\0\2\114\1\0\5\114\21\0"+
    "\5\114\1\304\1\305\7\114\1\305\7\114\1\0\23\114"+
    "\6\0\1\306\2\114\6\0\2\114\4\0\2\114\1\0"+
    "\5\114\21\0\26\114\1\0\23\114\6\0\1\114\1\264"+
    "\1\114\6\0\2\114\4\0\2\114\1\0\5\114\21\0"+
    "\3\114\1\307\22\114\1\0\23\114\6\0\3\114\6\0"+
    "\2\114\4\0\2\114\1\0\5\114\21\0\1\310\11\114"+
    "\1\311\13\114\1\0\23\114\6\0\3\114\6\0\2\114"+
    "\4\0\2\114\1\0\5\114\21\0\21\114\1\312\4\114"+
    "\1\0\23\114\6\0\3\114\6\0\1\27\1\173\4\0"+
    "\1\313\1\27\1\175\5\27\21\0\22\27\1\173\3\27"+
    "\1\0\1\173\15\27\1\173\4\27\6\0\3\27\2\0"+
    "\2\145\1\0\127\145\1\147\125\145\1\0\3\151\126\0"+
    "\1\152\125\0\1\156\3\0\124\156\2\0\1\160\127\0"+
    "\1\163\127\0\1\167\132\0\1\314\4\0\1\315\52\0"+
    "\1\314\4\0\1\314\15\0\1\314\23\0\1\27\1\173"+
    "\4\0\1\173\1\27\1\175\5\27\21\0\22\27\1\173"+
    "\3\27\1\0\1\173\15\27\1\173\4\27\6\0\3\27"+
    "\6\0\1\27\1\173\4\0\1\173\1\27\1\175\1\316"+
    "\1\27\1\317\2\27\21\0\22\27\1\173\3\27\1\0"+
    "\1\173\5\27\1\320\3\27\1\321\2\27\1\322\1\173"+
    "\3\27\1\323\6\0\3\27\7\0\1\315\4\0\1\315"+
    "\52\0\1\315\4\0\1\315\15\0\1\315\23\0\1\27"+
    "\1\176\4\0\1\176\1\27\1\324\5\27\21\0\22\27"+
    "\1\176\3\27\1\0\1\176\15\27\1\176\4\27\6\0"+
    "\3\27\16\0\1\45\117\0\2\200\4\0\2\200\1\0"+
    "\5\200\20\0\1\325\26\200\1\0\23\200\6\0\3\200"+
    "\15\0\1\326\157\0\1\327\130\0\1\330\130\0\1\331"+
    "\126\0\1\332\135\0\1\333\123\0\1\334\3\0\1\335"+
    "\61\0\2\211\4\0\2\211\1\0\5\211\20\0\1\336"+
    "\26\211\1\0\23\211\6\0\3\211\114\0\1\212\41\0"+
    "\1\45\106\0\1\337\1\340\1\0\1\341\1\342\1\343"+
    "\1\0\2\340\1\0\5\340\21\0\22\340\1\0\3\340"+
    "\2\0\15\340\1\0\4\340\6\0\3\340\6\0\2\27"+
    "\4\0\2\27\1\0\5\27\21\0\6\27\1\344\17\27"+
    "\1\0\23\27\6\0\3\27\6\0\2\27\4\0\2\27"+
    "\1\0\5\27\21\0\5\27\1\217\20\27\1\0\23\27"+
    "\6\0\3\27\6\0\2\27\4\0\2\27\1\0\5\27"+
    "\21\0\4\27\1\60\11\27\1\345\7\27\1\0\23\27"+
    "\6\0\3\27\6\0\2\27\4\0\2\27\1\0\5\27"+
    "\21\0\3\27\1\346\22\27\1\0\23\27\6\0\3\27"+
    "\6\0\2\27\4\0\2\27\1\0\5\27\21\0\12\27"+
    "\1\347\13\27\1\0\23\27\6\0\3\27\6\0\2\27"+
    "\4\0\2\27\1\0\5\27\21\0\5\27\1\350\20\27"+
    "\1\0\23\27\6\0\3\27\6\0\2\27\4\0\2\27"+
    "\1\0\5\27\21\0\3\27\1\351\22\27\1\0\23\27"+
    "\6\0\3\27\6\0\2\27\4\0\2\27\1\0\5\27"+
    "\21\0\23\27\1\217\2\27\1\0\23\27\6\0\3\27"+
    "\6\0\2\27\4\0\2\27\1\0\5\27\21\0\1\352"+
    "\25\27\1\0\23\27\6\0\3\27\6\0\2\27\4\0"+
    "\2\27\1\0\5\27\21\0\13\27\1\223\12\27\1\0"+
    "\23\27\6\0\3\27\6\0\2\27\4\0\2\27\1\0"+
    "\5\27\21\0\12\27\1\344\13\27\1\0\23\27\6\0"+
    "\3\27\6\0\2\27\4\0\1\27\1\353\1\0\5\27"+
    "\21\0\26\27\1\0\23\27\6\0\3\27\6\0\2\27"+
    "\4\0\2\27\1\0\5\27\21\0\13\27\1\354\12\27"+
    "\1\0\23\27\6\0\3\27\6\0\2\27\4\0\2\27"+
    "\1\0\5\27\21\0\2\27\1\355\1\27\1\356\7\27"+
    "\1\357\11\27\1\0\23\27\6\0\3\27\6\0\2\27"+
    "\4\0\2\27\1\0\5\27\21\0\7\27\1\217\16\27"+
    "\1\0\23\27\6\0\3\27\6\0\2\242\4\0\2\242"+
    "\1\0\5\242\20\0\1\360\26\242\1\0\23\242\6\0"+
    "\3\242\6\0\1\242\5\0\2\242\1\0\5\242\21\0"+
    "\22\242\1\0\3\242\1\361\1\0\15\242\1\0\4\242"+
    "\6\0\3\242\17\0\1\362\3\243\1\363\51\0\1\364"+
    "\1\365\1\243\2\0\1\243\1\0\1\243\1\366\1\243"+
    "\1\367\1\370\1\243\1\0\4\243\20\0\1\246\57\0"+
    "\1\246\4\0\1\246\15\0\1\246\23\0\2\247\4\0"+
    "\2\247\1\0\5\247\20\0\1\371\26\247\1\0\23\247"+
    "\6\0\3\247\114\0\1\250\21\0\2\27\4\0\2\27"+
    "\1\0\5\27\21\0\11\27\1\372\14\27\1\0\23\27"+
    "\6\0\3\27\2\0\2\111\1\112\65\111\1\373\37\111"+
    "\4\0\1\114\1\254\4\0\1\254\1\114\1\175\5\114"+
    "\21\0\22\114\1\254\3\114\1\0\1\254\15\114\1\254"+
    "\4\114\6\0\3\114\6\0\1\114\1\254\4\0\1\254"+
    "\1\114\1\175\5\114\21\0\22\114\1\254\3\114\1\0"+
    "\1\254\5\114\1\374\3\114\1\375\2\114\1\376\1\254"+
    "\3\114\1\377\6\0\3\114\6\0\1\114\1\256\4\0"+
    "\1\256\1\114\1\324\5\114\21\0\22\114\1\256\3\114"+
    "\1\0\1\256\15\114\1\256\4\114\6\0\3\114\6\0"+
    "\2\114\4\0\2\114\1\0\5\114\21\0\2\114\1\261"+
    "\23\114\1\0\23\114\6\0\3\114\6\0\2\114\4\0"+
    "\2\114\1\0\5\114\21\0\6\114\1\u0100\17\114\1\0"+
    "\23\114\6\0\3\114\6\0\2\114\4\0\2\114\1\0"+
    "\5\114\21\0\5\114\1\264\20\114\1\0\23\114\6\0"+
    "\3\114\6\0\2\114\4\0\2\114\1\0\5\114\21\0"+
    "\4\114\1\261\21\114\1\0\23\114\6\0\3\114\6\0"+
    "\2\114\4\0\2\114\1\0\5\114\21\0\10\114\1\u0101"+
    "\15\114\1\0\23\114\6\0\3\114\6\0\2\114\4\0"+
    "\2\114\1\0\5\114\21\0\4\114\1\u0102\3\114\1\261"+
    "\5\114\1\u0103\7\114\1\0\23\114\6\0\3\114\6\0"+
    "\2\114\4\0\2\114\1\0\5\114\21\0\5\114\1\261"+
    "\20\114\1\0\23\114\6\0\3\114\6\0\2\114\4\0"+
    "\2\114\1\0\5\114\21\0\3\114\1\u0104\22\114\1\0"+
    "\23\114\6\0\3\114\6\0\2\114\4\0\2\114\1\0"+
    "\5\114\21\0\11\114\1\u0105\14\114\1\0\23\114\6\0"+
    "\3\114\6\0\2\114\4\0\2\114\1\0\5\114\21\0"+
    "\12\114\1\u0106\13\114\1\0\23\114\6\0\3\114\6\0"+
    "\2\114\4\0\2\114\1\0\5\114\21\0\5\114\1\u0107"+
    "\20\114\1\0\23\114\6\0\3\114\6\0\2\114\4\0"+
    "\2\114\1\0\5\114\21\0\3\114\1\u0108\22\114\1\0"+
    "\23\114\6\0\3\114\6\0\2\114\4\0\2\114\1\0"+
    "\5\114\21\0\3\114\1\u0109\22\114\1\0\23\114\6\0"+
    "\3\114\6\0\2\114\4\0\2\114\1\0\5\114\21\0"+
    "\23\114\1\264\2\114\1\0\23\114\6\0\3\114\6\0"+
    "\2\114\4\0\2\114\1\0\5\114\21\0\1\u010a\25\114"+
    "\1\0\23\114\6\0\3\114\6\0\2\114\4\0\2\114"+
    "\1\0\5\114\21\0\20\114\1\261\5\114\1\0\23\114"+
    "\6\0\3\114\6\0\2\114\4\0\2\114\1\0\5\114"+
    "\21\0\13\114\1\270\12\114\1\0\23\114\6\0\3\114"+
    "\6\0\2\114\4\0\2\114\1\0\5\114\21\0\12\114"+
    "\1\u0100\13\114\1\0\23\114\6\0\3\114\6\0\2\114"+
    "\4\0\1\114\1\u010b\1\0\5\114\21\0\26\114\1\0"+
    "\23\114\6\0\3\114\6\0\2\114\4\0\2\114\1\0"+
    "\5\114\21\0\13\114\1\u010c\12\114\1\0\23\114\6\0"+
    "\3\114\6\0\2\114\4\0\2\114\1\0\5\114\21\0"+
    "\2\114\1\u010d\1\114\1\u010e\7\114\1\u010f\11\114\1\0"+
    "\23\114\6\0\3\114\6\0\2\114\4\0\2\114\1\0"+
    "\5\114\21\0\7\114\1\264\16\114\1\0\23\114\6\0"+
    "\3\114\6\0\2\114\4\0\2\114\1\0\5\114\21\0"+
    "\11\114\1\u0110\14\114\1\0\23\114\6\0\3\114\6\0"+
    "\1\27\1\173\4\0\1\173\1\27\1\175\5\27\21\0"+
    "\22\27\1\173\3\27\1\0\1\173\5\27\1\320\3\27"+
    "\1\321\2\27\1\322\1\173\3\27\1\323\6\0\3\27"+
    "\7\0\1\314\4\0\1\314\1\0\1\324\50\0\1\314"+
    "\4\0\1\314\15\0\1\314\23\0\2\27\4\0\2\27"+
    "\1\0\1\27\1\u0111\3\27\21\0\26\27\1\0\23\27"+
    "\6\0\3\27\6\0\2\27\4\0\2\27\1\0\3\27"+
    "\1\u0112\1\27\21\0\26\27\1\0\23\27\6\0\3\27"+
    "\6\0\2\27\4\0\2\27\1\0\5\27\21\0\26\27"+
    "\1\0\13\27\1\u0113\7\27\6\0\3\27\6\0\2\27"+
    "\4\0\2\27\1\0\5\27\21\0\26\27\1\0\3\27"+
    "\1\u0114\17\27\6\0\3\27\6\0\2\27\4\0\2\27"+
    "\1\0\5\27\21\0\26\27\1\0\3\27\1\u0115\17\27"+
    "\6\0\3\27\6\0\2\27\4\0\2\27\1\0\3\27"+
    "\1\u0116\1\27\21\0\26\27\1\0\23\27\6\0\3\27"+
    "\7\0\1\u0117\57\0\1\u0117\4\0\1\u0117\15\0\1\u0117"+
    "\61\0\1\u0118\137\0\1\330\124\0\1\u0119\6\0\1\u011a"+
    "\121\0\1\u0119\131\0\1\u011b\124\0\1\u0119\126\0\1\u011c"+
    "\137\0\1\u011d\131\0\1\u011e\111\0\1\u011f\71\0\2\340"+
    "\4\0\2\340\1\0\5\340\21\0\26\340\1\0\23\340"+
    "\6\0\3\340\6\0\1\u0120\5\0\2\u0120\1\0\5\u0120"+
    "\21\0\22\u0120\1\0\3\u0120\2\0\15\u0120\1\0\4\u0120"+
    "\6\0\3\u0120\6\0\1\u0121\5\0\2\u0121\1\0\5\u0121"+
    "\21\0\22\u0121\1\0\3\u0121\2\0\15\u0121\1\0\4\u0121"+
    "\6\0\3\u0121\6\0\1\u0122\5\0\2\u0122\1\0\5\u0122"+
    "\21\0\22\u0122\1\0\3\u0122\2\0\15\u0122\1\0\4\u0122"+
    "\6\0\3\u0122\6\0\2\27\4\0\2\27\1\0\5\27"+
    "\21\0\2\27\1\217\23\27\1\0\23\27\6\0\3\27"+
    "\6\0\2\27\4\0\2\27\1\0\5\27\21\0\25\27"+
    "\1\u0123\1\0\23\27\6\0\3\27\6\0\2\27\4\0"+
    "\2\27\1\0\5\27\21\0\14\27\1\217\11\27\1\0"+
    "\23\27\6\0\3\27\6\0\2\27\4\0\2\27\1\0"+
    "\5\27\21\0\7\27\1\217\1\27\1\64\14\27\1\0"+
    "\23\27\6\0\3\27\6\0\2\27\4\0\2\27\1\0"+
    "\5\27\21\0\7\27\1\u0124\16\27\1\0\23\27\6\0"+
    "\3\27\6\0\2\27\4\0\2\27\1\0\5\27\21\0"+
    "\2\27\1\241\23\27\1\0\23\27\6\0\3\27\6\0"+
    "\2\27\4\0\2\27\1\0\5\27\21\0\2\27\1\u0125"+
    "\23\27\1\0\23\27\6\0\3\27\6\0\2\27\4\0"+
    "\2\27\1\0\5\27\21\0\7\27\1\u0126\16\27\1\0"+
    "\23\27\6\0\3\27\6\0\2\27\4\0\2\27\1\0"+
    "\5\27\21\0\24\27\1\u0127\1\27\1\0\23\27\6\0"+
    "\3\27\6\0\2\27\4\0\2\27\1\0\5\27\21\0"+
    "\11\27\1\346\14\27\1\0\23\27\6\0\3\27\6\0"+
    "\2\27\4\0\2\27\1\0\5\27\21\0\7\27\1\64"+
    "\16\27\1\0\23\27\6\0\3\27\6\0\2\27\4\0"+
    "\2\27\1\0\5\27\21\0\7\27\1\u0128\16\27\1\0"+
    "\23\27\6\0\3\27\44\0\1\u0129\103\0\1\u012a\131\0"+
    "\1\u012b\127\0\1\u012c\54\0\1\u012d\47\0\1\u012e\224\0"+
    "\1\u012f\33\0\1\u0130\2\0\1\u0131\222\0\1\u0132\55\0"+
    "\1\u0133\71\0\2\27\4\0\2\27\1\0\5\27\21\0"+
    "\14\27\1\241\11\27\1\0\23\27\6\0\3\27\2\0"+
    "\2\111\1\112\42\111\1\u0134\62\111\4\0\2\114\4\0"+
    "\2\114\1\0\5\114\21\0\26\114\1\0\13\114\1\u0135"+
    "\7\114\6\0\3\114\6\0\2\114\4\0\2\114\1\0"+
    "\5\114\21\0\26\114\1\0\3\114\1\u0136\17\114\6\0"+
    "\3\114\6\0\2\114\4\0\2\114\1\0\5\114\21\0"+
    "\26\114\1\0\3\114\1\u0137\17\114\6\0\3\114\6\0"+
    "\2\114\4\0\2\114\1\0\3\114\1\u0138\1\114\21\0"+
    "\26\114\1\0\23\114\6\0\3\114\6\0\2\114\4\0"+
    "\2\114\1\0\5\114\21\0\2\114\1\264\23\114\1\0"+
    "\23\114\6\0\3\114\6\0\2\114\4\0\2\114\1\0"+
    "\5\114\21\0\11\114\1\u0139\14\114\1\0\23\114\6\0"+
    "\3\114\6\0\2\114\4\0\2\114\1\0\5\114\21\0"+
    "\1\114\1\264\24\114\1\0\23\114\6\0\3\114\6\0"+
    "\2\114\4\0\2\114\1\0\5\114\21\0\25\114\1\u013a"+
    "\1\0\23\114\6\0\3\114\6\0\2\114\4\0\2\114"+
    "\1\0\5\114\21\0\14\114\1\264\11\114\1\0\23\114"+
    "\6\0\3\114\6\0\2\114\4\0\2\114\1\0\5\114"+
    "\21\0\12\114\1\u013b\13\114\1\0\23\114\6\0\3\114"+
    "\6\0\2\114\4\0\2\114\1\0\5\114\21\0\7\114"+
    "\1\264\1\114\1\131\14\114\1\0\23\114\6\0\3\114"+
    "\6\0\2\114\4\0\2\114\1\0\5\114\21\0\7\114"+
    "\1\u013c\16\114\1\0\23\114\6\0\3\114\6\0\2\114"+
    "\4\0\2\114\1\0\5\114\21\0\2\114\1\311\23\114"+
    "\1\0\23\114\6\0\3\114\6\0\2\114\4\0\2\114"+
    "\1\0\5\114\21\0\14\114\1\u013d\11\114\1\0\23\114"+
    "\6\0\3\114\6\0\2\114\4\0\2\114\1\0\5\114"+
    "\21\0\2\114\1\u013e\23\114\1\0\23\114\6\0\3\114"+
    "\6\0\2\114\4\0\2\114\1\0\5\114\21\0\7\114"+
    "\1\u013f\16\114\1\0\23\114\6\0\3\114\6\0\2\114"+
    "\4\0\2\114\1\0\5\114\21\0\24\114\1\u0140\1\114"+
    "\1\0\23\114\6\0\3\114\6\0\2\114\4\0\2\114"+
    "\1\0\5\114\21\0\11\114\1\u0104\14\114\1\0\23\114"+
    "\6\0\3\114\6\0\2\114\4\0\2\114\1\0\5\114"+
    "\21\0\7\114\1\131\16\114\1\0\23\114\6\0\3\114"+
    "\6\0\2\114\4\0\2\114\1\0\5\114\21\0\7\114"+
    "\1\u0141\16\114\1\0\23\114\6\0\3\114\6\0\2\114"+
    "\4\0\2\114\1\0\5\114\21\0\14\114\1\311\11\114"+
    "\1\0\23\114\6\0\3\114\6\0\2\27\4\0\2\27"+
    "\1\0\2\27\1\u0142\2\27\21\0\26\27\1\0\23\27"+
    "\6\0\3\27\6\0\2\27\4\0\2\27\1\0\4\27"+
    "\1\u0143\21\0\26\27\1\0\23\27\6\0\3\27\6\0"+
    "\2\27\4\0\2\27\1\0\5\27\21\0\26\27\1\0"+
    "\5\27\1\u0144\15\27\6\0\3\27\6\0\2\27\4\0"+
    "\2\27\1\0\1\27\1\u0145\3\27\21\0\26\27\1\0"+
    "\23\27\6\0\3\27\6\0\2\27\4\0\2\27\1\0"+
    "\5\27\21\0\26\27\1\0\12\27\1\u0145\10\27\6\0"+
    "\3\27\6\0\2\27\4\0\2\27\1\0\5\27\21\0"+
    "\26\27\1\0\11\27\1\u0146\11\27\6\0\3\27\7\0"+
    "\1\u0117\4\0\1\u0117\1\0\1\324\50\0\1\u0117\4\0"+
    "\1\u0117\15\0\1\u0117\23\0\1\200\5\0\2\200\1\0"+
    "\5\200\21\0\22\200\1\0\3\200\2\0\15\200\1\0"+
    "\4\200\6\0\3\200\2\0\2\u0119\1\u0147\125\u0119\44\0"+
    "\1\u0148\145\0\1\u0119\114\0\1\u0149\147\0\1\u0119\114\0"+
    "\1\u014a\57\0\1\211\5\0\2\211\1\0\5\211\21\0"+
    "\22\211\1\0\3\211\2\0\15\211\1\0\4\211\6\0"+
    "\3\211\6\0\2\u0120\1\u014b\3\0\2\u0120\1\0\5\u0120"+
    "\21\0\26\u0120\1\0\23\u0120\6\0\3\u0120\6\0\2\u0121"+
    "\1\0\1\u014b\2\0\2\u0121\1\0\5\u0121\21\0\26\u0121"+
    "\1\0\23\u0121\6\0\3\u0121\6\0\2\u0122\2\0\1\u014b"+
    "\1\0\2\u0122\1\0\5\u0122\21\0\26\u0122\1\0\23\u0122"+
    "\6\0\3\u0122\6\0\2\27\4\0\2\27\1\0\5\27"+
    "\21\0\11\27\1\u014c\14\27\1\0\23\27\6\0\3\27"+
    "\6\0\2\27\4\0\2\27\1\0\5\27\21\0\3\27"+
    "\1\u014d\22\27\1\0\23\27\6\0\3\27\6\0\2\27"+
    "\4\0\2\27\1\0\5\27\21\0\11\27\1\u014e\14\27"+
    "\1\0\23\27\6\0\3\27\6\0\2\27\4\0\2\27"+
    "\1\0\5\27\21\0\1\217\25\27\1\0\23\27\6\0"+
    "\3\27\6\0\2\27\4\0\2\27\1\0\5\27\21\0"+
    "\3\27\1\u014f\22\27\1\0\23\27\6\0\3\27\6\0"+
    "\2\27\4\0\2\27\1\0\5\27\21\0\12\27\1\u0150"+
    "\13\27\1\0\23\27\6\0\3\27\6\0\1\242\5\0"+
    "\2\242\1\0\5\242\21\0\22\242\1\0\3\242\2\0"+
    "\15\242\1\0\4\242\6\0\3\242\105\0\1\u0151\121\0"+
    "\1\u0152\126\0\1\u0153\52\0\1\u0154\122\0\1\u0155\212\0"+
    "\1\u0156\127\0\1\u0157\141\0\1\u0158\35\0\1\u0159\116\0"+
    "\1\247\5\0\2\247\1\0\5\247\21\0\22\247\1\0"+
    "\3\247\2\0\15\247\1\0\4\247\6\0\3\247\2\0"+
    "\2\u0134\1\u015a\125\u0134\4\0\2\114\4\0\2\114\1\0"+
    "\5\114\21\0\26\114\1\0\5\114\1\u015b\15\114\6\0"+
    "\3\114\6\0\2\114\4\0\2\114\1\0\1\114\1\u015c"+
    "\3\114\21\0\26\114\1\0\23\114\6\0\3\114\6\0"+
    "\2\114\4\0\2\114\1\0\5\114\21\0\26\114\1\0"+
    "\12\114\1\u015c\10\114\6\0\3\114\6\0\2\114\4\0"+
    "\2\114\1\0\5\114\21\0\26\114\1\0\11\114\1\u015d"+
    "\11\114\6\0\3\114\6\0\2\114\4\0\2\114\1\0"+
    "\5\114\21\0\1\u015e\25\114\1\0\23\114\6\0\3\114"+
    "\6\0\2\114\4\0\2\114\1\0\5\114\21\0\11\114"+
    "\1\u015f\14\114\1\0\23\114\6\0\3\114\6\0\2\114"+
    "\4\0\2\114\1\0\5\114\21\0\2\114\1\u0160\23\114"+
    "\1\0\23\114\6\0\3\114\6\0\2\114\4\0\2\114"+
    "\1\0\5\114\21\0\3\114\1\u0161\22\114\1\0\23\114"+
    "\6\0\3\114\6\0\2\114\4\0\2\114\1\0\5\114"+
    "\21\0\3\114\1\267\22\114\1\0\23\114\6\0\3\114"+
    "\6\0\2\114\4\0\2\114\1\0\5\114\21\0\11\114"+
    "\1\u0162\14\114\1\0\23\114\6\0\3\114\6\0\2\114"+
    "\4\0\2\114\1\0\5\114\21\0\1\264\25\114\1\0"+
    "\23\114\6\0\3\114\6\0\2\114\4\0\2\114\1\0"+
    "\5\114\21\0\3\114\1\u0163\22\114\1\0\23\114\6\0"+
    "\3\114\6\0\2\114\4\0\2\114\1\0\5\114\21\0"+
    "\12\114\1\u0164\13\114\1\0\23\114\6\0\3\114\6\0"+
    "\2\27\4\0\1\u0165\1\27\1\0\5\27\21\0\26\27"+
    "\1\0\23\27\6\0\3\27\6\0\2\27\4\0\2\27"+
    "\1\0\3\27\1\u0142\1\27\21\0\26\27\1\0\23\27"+
    "\6\0\3\27\6\0\2\27\4\0\1\u0166\1\27\1\0"+
    "\5\27\21\0\26\27\1\0\23\27\6\0\3\27\6\0"+
    "\2\27\4\0\2\27\1\0\1\u0144\4\27\21\0\26\27"+
    "\1\0\23\27\6\0\3\27\6\0\2\27\4\0\2\27"+
    "\1\0\5\27\21\0\26\27\1\0\23\27\6\0\2\27"+
    "\1\u0167\51\0\1\u0168\145\0\1\u0119\105\0\1\u0119\70\0"+
    "\2\27\4\0\2\27\1\0\5\27\21\0\5\27\1\241"+
    "\20\27\1\0\23\27\6\0\3\27\6\0\2\27\4\0"+
    "\2\27\1\0\5\27\21\0\13\27\1\u0169\12\27\1\0"+
    "\23\27\6\0\3\27\6\0\2\27\4\0\2\27\1\0"+
    "\5\27\21\0\1\u016a\25\27\1\0\23\27\6\0\3\27"+
    "\6\0\2\27\4\0\2\27\1\0\5\27\21\0\15\27"+
    "\1\241\10\27\1\0\23\27\6\0\3\27\6\0\2\27"+
    "\4\0\2\27\1\0\5\27\21\0\12\27\1\217\13\27"+
    "\1\0\23\27\6\0\3\27\110\0\1\u016b\37\0\1\u016c"+
    "\127\0\1\u016d\126\0\1\u016e\131\0\1\u016f\1\0\1\u0170"+
    "\212\0\1\u0171\126\0\1\u0172\134\0\1\u0173\35\0\1\243"+
    "\115\0\2\114\4\0\1\u0174\1\114\1\0\5\114\21\0"+
    "\26\114\1\0\23\114\6\0\3\114\6\0\2\114\4\0"+
    "\2\114\1\0\1\u015b\4\114\21\0\26\114\1\0\23\114"+
    "\6\0\3\114\6\0\2\114\4\0\2\114\1\0\5\114"+
    "\21\0\26\114\1\0\23\114\6\0\2\114\1\u0175\6\0"+
    "\2\114\4\0\2\114\1\0\5\114\21\0\7\114\1\263"+
    "\16\114\1\0\23\114\6\0\3\114\6\0\2\114\4\0"+
    "\2\114\1\0\5\114\21\0\5\114\1\311\20\114\1\0"+
    "\23\114\6\0\3\114\6\0\2\114\4\0\2\114\1\0"+
    "\5\114\21\0\12\114\1\261\13\114\1\0\23\114\6\0"+
    "\3\114\6\0\2\114\4\0\2\114\1\0\5\114\21\0"+
    "\13\114\1\u0176\12\114\1\0\23\114\6\0\3\114\6\0"+
    "\2\114\4\0\2\114\1\0\5\114\21\0\1\u0177\25\114"+
    "\1\0\23\114\6\0\3\114\6\0\2\114\4\0\2\114"+
    "\1\0\5\114\21\0\15\114\1\311\10\114\1\0\23\114"+
    "\6\0\3\114\6\0\2\114\4\0\2\114\1\0\5\114"+
    "\21\0\12\114\1\264\13\114\1\0\23\114\6\0\3\114"+
    "\6\0\2\27\4\0\1\u0178\1\27\1\0\5\27\21\0"+
    "\26\27\1\0\23\27\6\0\3\27\6\0\2\27\4\0"+
    "\1\u0179\1\27\1\0\5\27\21\0\26\27\1\0\23\27"+
    "\6\0\3\27\6\0\2\27\4\0\2\27\1\0\3\27"+
    "\1\u017a\1\27\21\0\26\27\1\0\23\27\6\0\3\27"+
    "\56\0\1\u017b\57\0\2\27\4\0\2\27\1\0\5\27"+
    "\21\0\21\27\1\217\4\27\1\0\23\27\6\0\3\27"+
    "\6\0\2\27\4\0\2\27\1\0\5\27\21\0\25\27"+
    "\1\241\1\0\23\27\6\0\3\27\21\0\1\u017c\131\0"+
    "\1\243\203\0\1\u017d\44\0\1\u017e\132\0\1\u017f\206\0"+
    "\1\u0180\52\0\1\u0181\216\0\1\u0182\125\0\1\u0183\27\0"+
    "\2\114\4\0\1\u0184\1\114\1\0\5\114\21\0\26\114"+
    "\1\0\23\114\6\0\3\114\6\0\2\114\4\0\2\114"+
    "\1\0\3\114\1\u0185\1\114\21\0\26\114\1\0\23\114"+
    "\6\0\3\114\6\0\2\114\4\0\2\114\1\0\5\114"+
    "\21\0\21\114\1\264\4\114\1\0\23\114\6\0\3\114"+
    "\6\0\2\114\4\0\2\114\1\0\5\114\21\0\25\114"+
    "\1\311\1\0\23\114\6\0\3\114\6\0\2\27\4\0"+
    "\2\27\1\0\5\27\21\0\26\27\1\0\4\27\1\u0145"+
    "\16\27\6\0\3\27\45\0\1\u0186\161\0\1\u0187\50\0"+
    "\1\u0188\211\0\1\u0189\126\0\1\u018a\125\0\1\u018b\44\0"+
    "\1\u018c\134\0\1\u018d\216\0\1\u018e\25\0\2\114\4\0"+
    "\2\114\1\0\5\114\21\0\26\114\1\0\4\114\1\u015c"+
    "\16\114\6\0\3\114\62\0\1\u0119\65\0\1\u018f\207\0"+
    "\1\u0190\132\0\1\u0191\133\0\1\u0192\37\0\1\u0193\127\0"+
    "\1\u0194\127\0\1\243\215\0\1\u0195\122\0\1\243\43\0"+
    "\1\u0196\215\0\1\u0197\125\0\1\u0198\43\0\1\u0199\211\0"+
    "\1\u019a\53\0\1\u019b\206\0\1\u019c\51\0\1\u019d\120\0"+
    "\1\u019e\217\0\1\u019f\121\0\1\u01a0\137\0\1\u018d\120\0"+
    "\1\u01a1\47\0\1\u01a2\221\0\1\u01a3\40\0\1\u01a4\215\0"+
    "\1\u01a5\42\0\1\u01a6\210\0\1\u01a7\131\0\1\u01a8\134\0"+
    "\1\u01a9\112\0\1\u01aa\133\0\1\243\41\0\1\u01ab\135\0"+
    "\1\u01ac\206\0\1\u01ad\42\0\1\u01ae\220\0\1\u01af\122\0"+
    "\1\u01a6\136\0\1\u01b0\40\0\1\u01b1\131\0\1\u01b2\216\0"+
    "\1\243\40\0\1\u01b3\213\0\1\u01b4\44\0\1\u01b5\212\0"+
    "\1\u01a6\120\0\1\u01b6\145\0\1\u018d\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[33968];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\1\2\0\2\1\13\0\1\11\1\1\1\11"+
    "\3\1\1\11\4\1\1\11\6\1\1\11\5\1\1\11"+
    "\22\1\3\11\1\1\2\11\2\1\3\11\1\1\1\11"+
    "\34\1\2\11\1\1\1\11\1\1\2\11\1\1\2\11"+
    "\1\1\2\11\1\1\3\11\1\1\1\0\1\11\2\1"+
    "\1\0\3\1\1\11\7\0\1\1\1\11\1\0\2\1"+
    "\1\11\24\1\1\11\4\1\1\11\1\0\52\1\14\0"+
    "\1\1\3\0\14\1\2\0\5\1\1\0\1\1\1\0"+
    "\36\1\1\0\1\1\11\0\6\1\13\0\23\1\1\11"+
    "\3\0\1\11\5\1\11\0\1\11\15\1\1\0\2\1"+
    "\11\0\7\1\11\0\2\1\61\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[438];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    public void setTokenStart(int position){zzCurrentPos = zzStartRead = position;}
    public void setTokenEnd(int position){zzMarkedPos = position;}
    public CharSequence getBuffer(){ return zzBuffer;}
    public char[] getBufferArray(){ return zzBufferArray;}
    public int getBufferEnd() {return zzEndRead;}
    public int getNextTokenStart(){ return zzMarkedPos;}
    public boolean isLastToken(){ return zzMarkedPos == zzEndRead; }
    public void setState(int newState){ zzLexicalState = newState; }



  public PerlLexerGenerated(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PerlLexerGenerated(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 202) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 51: 
          { return PERL_ARRAY;
          }
        case 57: break;
        case 10: 
          { return processStringOpener();
          }
        case 58: break;
        case 53: 
          { processPodOpener();break;
          }
        case 59: break;
        case 3: 
          { if( isMultilineEnd() || isLastToken())
        {
            return endMultiline();
        }
        break;
          }
        case 60: break;
        case 9: 
          { return PERL_NUMBER;
          }
        case 61: break;
        case 41: 
          { return parseRegex();
          }
        case 62: break;
        case 56: 
          { return PERL_TAG;
          }
        case 63: break;
        case 31: 
          { return processOpenerWhiteSpace();
          }
        case 64: break;
        case 16: 
          { return processRegexOpener();
          }
        case 65: break;
        case 37: 
          { IElementType tokenType = processTransChar();
          if( tokenType != null )
                return tokenType;
          break;
          }
        case 66: break;
        case 55: 
          { processDataOpener(); break;
          }
        case 67: break;
        case 13: 
          { return PERL_OPERATOR;
          }
        case 68: break;
        case 34: 
          { IElementType type = processQuoteLikeListQuote();
            if( type == null ) // disallowed sharp
                break;
            return type;
          }
        case 69: break;
        case 7: 
          { return TokenType.WHITE_SPACE;
          }
        case 70: break;
        case 46: 
          { return PERL_HASH;
          }
        case 71: break;
        case 36: 
          { IElementType type = processTransQuote();
            if( type == null ) // disallowed sharp
                break;
            return type;
          }
        case 72: break;
        case 17: 
          { return processQuoteLikeStringOpener();
          }
        case 73: break;
        case 12: 
          { return PERL_COMMA;
          }
        case 74: break;
        case 49: 
          { return processQuoteLikeListOpener();
          }
        case 75: break;
        case 40: 
          { return PERL_REGEX_MODIFIER;
          }
        case 76: break;
        case 25: 
          { return processTransOpener();
          }
        case 77: break;
        case 1: 
          { if( isLastToken() )
            return endDataBlock();
        break;
          }
        case 78: break;
        case 48: 
          { return PERL_KEYWORD;
          }
        case 79: break;
        case 21: 
          { return processSemicolon();
          }
        case 80: break;
        case 44: 
          { return PERL_GLOB;
          }
        case 81: break;
        case 32: 
          { IElementType tokenType = processQuoteLikeChar();
          if( tokenType != null )
                return tokenType;
          break;
          }
        case 82: break;
        case 47: 
          { return PERL_DEPACKAGE;
          }
        case 83: break;
        case 11: 
          { return PERL_COMMENT;
          }
        case 84: break;
        case 28: 
          { yybegin(YYINITIAL); return PERL_STRING_CONTENT;
          }
        case 85: break;
        case 29: 
          { if( isLastToken() )
        {
            return endMultiline();
        }
        break;
          }
        case 86: break;
        case 52: 
          { return processMultilineOpener();
          }
        case 87: break;
        case 38: 
          { return processTransCloser();
          }
        case 88: break;
        case 6: 
          { return processNewLine();
          }
        case 89: break;
        case 43: 
          { return PERL_NUMBER_VERSION;
          }
        case 90: break;
        case 19: 
          { return PERL_LPAREN;
          }
        case 91: break;
        case 14: 
          { return PERL_SIGIL_HASH;
          }
        case 92: break;
        case 5: 
          { return TokenType.BAD_CHARACTER;
          }
        case 93: break;
        case 50: 
          { return PERL_SCALAR;
          }
        case 94: break;
        case 2: 
          { if( isLastToken() )
        {
            endPodBlock();
        }
        break;
          }
        case 95: break;
        case 20: 
          { return PERL_RPAREN;
          }
        case 96: break;
        case 18: 
          { return PERL_SIGIL_SCALAR;
          }
        case 97: break;
        case 22: 
          { return PERL_SIGIL_ARRAY;
          }
        case 98: break;
        case 4: 
          { yybegin(YYINITIAL);return PERL_STRING_MULTILINE_END;
          }
        case 99: break;
        case 42: 
          { IElementType nextTokenType = getParsedToken();
        if( nextTokenType == null )
            break;
        return nextTokenType;
          }
        case 100: break;
        case 30: 
          { IElementType type = processQuoteLikeQuote();
            if( type == null ) // disallowed sharp
                break;
            return type;
          }
        case 101: break;
        case 15: 
          { // regexp or div
    IElementType tokenType = processDiv();
    if( tokenType == null )
        break;
    return tokenType;
          }
        case 102: break;
        case 45: 
          { return PERL_ARROW_COMMA;
          }
        case 103: break;
        case 26: 
          { return PERL_LBRACE;
          }
        case 104: break;
        case 27: 
          { return PERL_RBRACE;
          }
        case 105: break;
        case 8: 
          { return PERL_BAREWORD;
          }
        case 106: break;
        case 33: 
          { popState(); return PERL_QUOTE;
          }
        case 107: break;
        case 35: 
          { IElementType tokenType = processQuoteLikeWord();
          if( tokenType != null )
                return tokenType;
          break;
          }
        case 108: break;
        case 54: 
          { return endPodBlock();
          }
        case 109: break;
        case 39: 
          { popState(); yypushback(1); break;
          }
        case 110: break;
        case 24: 
          { return PERL_RBRACK;
          }
        case 111: break;
        case 23: 
          { return PERL_LBRACK;
          }
        case 112: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
