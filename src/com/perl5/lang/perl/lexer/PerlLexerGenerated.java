/* The following code was generated by JFlex 1.4.3 on 11.05.15 7:57 */

package com.perl5.lang.perl.lexer;

/*
    http://jflex.de/manual.html
    http://www2.cs.tum.edu/projects/cup

*/

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import org.jetbrains.annotations.NotNull;
import com.perl5.lang.perl.util.PerlFunctionUtil;
import com.perl5.lang.perl.util.PerlScalarUtil;
import com.perl5.lang.perl.util.PerlHashUtil;
import com.perl5.lang.perl.util.PerlGlobUtil;
import com.perl5.lang.perl.util.PerlArrayUtil;
import com.perl5.lang.perl.util.PerlPackageUtil;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11.05.15 7:57 from the specification file
 * <tt>C:/Repository/Perl5-IDEA/src/com/perl5/lang/perl/lexer/Perl.flex</tt>
 */
public abstract class PerlLexerGenerated implements PerlLexerBase {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int LEX_POD = 4;
  public static final int LEX_MULTILINE = 12;
  public static final int LEX_TRANS_MODIFIERS = 34;
  public static final int LEX_QUOTE_LIKE_LIST_OPENER = 22;
  public static final int LEX_CODE = 8;
  public static final int LEX_TRANS_OPENER = 28;
  public static final int LEX_MULTILINE_WAITING = 10;
  public static final int LEX_BAREWORD_STRING = 6;
  public static final int LEX_QUOTE_LIKE_CHARS = 18;
  public static final int LEX_QUOTE_LIKE_WORDS = 24;
  public static final int LEX_TRANS_CLOSER = 32;
  public static final int LEX_REGEX_ITEMS = 38;
  public static final int LEX_TRANS_CHARS = 30;
  public static final int LEX_REGEX_OPENER = 36;
  public static final int LEX_QUOTE_LIKE_OPENER = 16;
  public static final int LEX_QUOTE_LIKE_CLOSER = 20;
  public static final int LEX_EOF = 2;
  public static final int YYINITIAL = 0;
  public static final int LEX_MULTILINE_TOKEN = 14;
  public static final int LEX_QUOTE_LIKE_LIST_CLOSER = 26;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  0,  0,  4,  4,  5,  5,  6,  6, 
     7,  7,  8,  8,  9,  9, 10, 10, 11, 11,  9,  9, 12, 12, 13, 13, 
    14, 14, 15, 15, 16, 16, 17, 17
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\35\1\7"+
    "\1\12\1\115\1\41\1\44\1\10\1\112\1\113\1\34\1\33\1\32"+
    "\1\6\1\15\1\46\1\5\1\56\1\56\1\56\1\56\5\5\1\105"+
    "\1\104\1\42\1\40\1\43\1\37\1\114\1\21\1\23\1\27\1\20"+
    "\1\16\1\100\1\24\1\30\1\25\1\4\1\31\1\101\1\47\1\17"+
    "\1\47\1\102\1\4\1\47\1\103\1\22\1\26\1\4\2\47\2\4"+
    "\1\110\1\37\1\111\1\37\1\13\1\11\1\55\1\63\1\64\1\52"+
    "\1\54\1\70\1\66\1\53\1\60\1\4\1\65\1\77\1\62\1\67"+
    "\1\51\1\50\1\72\1\57\1\76\1\61\1\71\1\14\1\73\1\74"+
    "\1\75\1\47\1\106\1\45\1\107\1\36\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\0\1\3\1\4\13\0\2\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\11"+
    "\1\10\1\5\5\10\1\15\6\12\1\16\1\17\1\20"+
    "\2\12\1\21\10\10\1\22\5\10\1\23\1\10\1\24"+
    "\1\25\1\22\1\10\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\1\3\2\1\40"+
    "\1\11\6\40\1\12\10\40\1\22\5\40\1\23\1\40"+
    "\1\24\1\25\1\22\1\40\1\11\2\3\1\41\1\42"+
    "\1\43\2\44\1\45\1\46\1\47\1\50\2\51\1\52"+
    "\2\53\1\54\1\55\2\56\1\0\2\57\1\60\1\14"+
    "\2\11\1\0\1\61\1\12\5\10\1\62\7\0\2\12"+
    "\3\10\1\24\14\10\2\24\3\10\1\22\1\23\1\63"+
    "\10\10\1\64\1\2\2\11\1\61\10\40\1\24\14\40"+
    "\2\24\3\40\1\22\1\23\1\63\10\40\3\11\1\65"+
    "\6\10\1\0\1\66\4\10\11\0\1\67\3\0\10\10"+
    "\1\70\4\10\1\24\6\10\1\2\4\40\1\66\14\40"+
    "\1\70\4\40\1\24\6\40\6\10\1\61\3\10\1\71"+
    "\10\0\10\10\1\72\17\40\5\10\1\71\3\0\1\67"+
    "\10\10\1\72\13\40\3\10\1\0\3\10\5\40\1\73"+
    "\1\10\1\74\1\0\1\40\1\74\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[402];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\116\0\234\0\352\0\u0138\0\u0186\0\u01d4\0\u0222"+
    "\0\u0270\0\u02be\0\u030c\0\u035a\0\u03a8\0\u03f6\0\u0444\0\u0492"+
    "\0\u04e0\0\u052e\0\u057c\0\u05ca\0\u057c\0\u0618\0\u0666\0\u06b4"+
    "\0\u0702\0\u057c\0\u0750\0\u079e\0\u07ec\0\u083a\0\u0888\0\u08d6"+
    "\0\u0924\0\u0972\0\u09c0\0\u057c\0\u0a0e\0\u0a5c\0\u0aaa\0\u0af8"+
    "\0\u057c\0\u0b46\0\u057c\0\u0b94\0\u0be2\0\u0c30\0\u0c7e\0\u057c"+
    "\0\u0ccc\0\u0d1a\0\u0d68\0\u0db6\0\u0e04\0\u0e52\0\u0ea0\0\u0eee"+
    "\0\u0f3c\0\u0f8a\0\u0fd8\0\u1026\0\u1074\0\u10c2\0\u1110\0\u115e"+
    "\0\u11ac\0\u0666\0\u11fa\0\u1248\0\u057c\0\u1296\0\u057c\0\u057c"+
    "\0\u057c\0\u057c\0\u057c\0\u057c\0\u057c\0\u057c\0\u057c\0\u12e4"+
    "\0\u057c\0\u1332\0\u1380\0\u13ce\0\u141c\0\u146a\0\u14b8\0\u1506"+
    "\0\u1554\0\u15a2\0\u15f0\0\u163e\0\u168c\0\u16da\0\u1728\0\u1776"+
    "\0\u17c4\0\u1812\0\u1860\0\u18ae\0\u18fc\0\u194a\0\u1998\0\u19e6"+
    "\0\u1a34\0\u1a82\0\u1ad0\0\u1b1e\0\u1380\0\u1b6c\0\u1bba\0\u1c08"+
    "\0\u1c56\0\u1ca4\0\u057c\0\u057c\0\u1cf2\0\u057c\0\u1d40\0\u057c"+
    "\0\u057c\0\u1d8e\0\u057c\0\u057c\0\u1ddc\0\u057c\0\u057c\0\u1e2a"+
    "\0\u057c\0\u057c\0\u057c\0\u1e78\0\u1ec6\0\u1f14\0\u1f62\0\u057c"+
    "\0\u057c\0\u1fb0\0\u1ffe\0\u204c\0\u209a\0\u20e8\0\u2136\0\u2184"+
    "\0\u21d2\0\u2220\0\u226e\0\u057c\0\u22bc\0\u230a\0\u2358\0\u23a6"+
    "\0\u23f4\0\u2442\0\u2490\0\u24de\0\u252c\0\u257a\0\u25c8\0\u2616"+
    "\0\u0666\0\u2664\0\u26b2\0\u2700\0\u274e\0\u279c\0\u27ea\0\u2838"+
    "\0\u2886\0\u28d4\0\u2922\0\u2970\0\u29be\0\u2a0c\0\u2a5a\0\u2aa8"+
    "\0\u2af6\0\u2b44\0\u0666\0\u0666\0\u0666\0\u2b92\0\u2be0\0\u2c2e"+
    "\0\u2c7c\0\u2cca\0\u2d18\0\u2d66\0\u2db4\0\u057c\0\u2e02\0\u2e50"+
    "\0\u2e9e\0\u2eec\0\u2f3a\0\u2f88\0\u2fd6\0\u3024\0\u3072\0\u30c0"+
    "\0\u310e\0\u315c\0\u1380\0\u31aa\0\u31f8\0\u3246\0\u3294\0\u32e2"+
    "\0\u3330\0\u337e\0\u33cc\0\u341a\0\u3468\0\u34b6\0\u3504\0\u3552"+
    "\0\u35a0\0\u35ee\0\u363c\0\u368a\0\u1380\0\u1380\0\u1380\0\u36d8"+
    "\0\u3726\0\u3774\0\u37c2\0\u3810\0\u385e\0\u38ac\0\u38fa\0\u3948"+
    "\0\u3996\0\u204c\0\u057c\0\u39e4\0\u3a32\0\u3a80\0\u3ace\0\u3b1c"+
    "\0\u3b6a\0\u3bb8\0\u0666\0\u3c06\0\u3c54\0\u3ca2\0\u3cf0\0\u3d3e"+
    "\0\u3d8c\0\u3dda\0\u3e28\0\u3e76\0\u3ec4\0\u3f12\0\u3f60\0\u252c"+
    "\0\u3fae\0\u3ffc\0\u404a\0\u4098\0\u40e6\0\u4134\0\u4182\0\u41d0"+
    "\0\u421e\0\u426c\0\u42ba\0\u4308\0\u0666\0\u4356\0\u43a4\0\u43f2"+
    "\0\u2a0c\0\u4440\0\u448e\0\u44dc\0\u452a\0\u4578\0\u45c6\0\u4614"+
    "\0\u4662\0\u46b0\0\u46fe\0\u474c\0\u479a\0\u1380\0\u47e8\0\u4836"+
    "\0\u4884\0\u48d2\0\u4920\0\u496e\0\u49bc\0\u4a0a\0\u4a58\0\u4aa6"+
    "\0\u4af4\0\u4b42\0\u1380\0\u4b90\0\u4bde\0\u4c2c\0\u3552\0\u4c7a"+
    "\0\u4cc8\0\u4d16\0\u4d64\0\u4db2\0\u4e00\0\u4e4e\0\u4e9c\0\u4eea"+
    "\0\u4f38\0\u4f86\0\u4fd4\0\u5022\0\u5070\0\u50be\0\u510c\0\u515a"+
    "\0\u51a8\0\u51f6\0\u5244\0\u5292\0\u52e0\0\u532e\0\u537c\0\u53ca"+
    "\0\u5418\0\u5466\0\u54b4\0\u5502\0\u5550\0\u559e\0\u55ec\0\u563a"+
    "\0\u5688\0\u56d6\0\u5724\0\u5772\0\u57c0\0\u580e\0\u585c\0\u58aa"+
    "\0\u58f8\0\u5946\0\u5994\0\u59e2\0\u5a30\0\u5a7e\0\u5acc\0\u5b1a"+
    "\0\u5b68\0\u5bb6\0\u5c04\0\u5c52\0\u5ca0\0\u5cee\0\u057c\0\u5d3c"+
    "\0\u5d8a\0\u5dd8\0\u057c\0\u5e26\0\u5e74\0\u5ec2\0\u5f10\0\u5f5e"+
    "\0\u5fac\0\u5ffa\0\u6048\0\u057c\0\u6096\0\u60e4\0\u6132\0\u6180"+
    "\0\u61ce\0\u621c\0\u626a\0\u62b8\0\u6306\0\u6354\0\u63a2\0\u63f0"+
    "\0\u643e\0\u648c\0\u64da\0\u6528\0\u6576\0\u65c4\0\u6612\0\u6660"+
    "\0\u66ae\0\u66fc\0\u674a\0\u0666\0\u6798\0\u0666\0\u67e6\0\u6834"+
    "\0\u1380\0\u6882";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[402];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\3\32"+
    "\1\33\1\34\1\35\1\36\1\37\4\27\1\40\1\27"+
    "\1\41\1\42\1\43\2\27\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\27\1\61\1\62\1\63\1\27\1\64\1\65"+
    "\1\30\1\66\1\67\1\70\1\71\1\27\1\72\1\27"+
    "\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102"+
    "\1\103\1\104\4\27\1\105\1\106\1\107\1\110\1\111"+
    "\1\112\1\113\1\114\1\115\1\116\2\2\1\117\113\2"+
    "\2\120\1\121\35\120\1\122\55\120\1\23\1\24\1\25"+
    "\1\26\1\123\1\30\1\31\3\32\1\33\1\124\1\125"+
    "\1\36\1\126\4\123\1\127\1\123\1\130\1\131\1\132"+
    "\2\123\1\44\1\45\1\46\1\47\1\50\1\51\1\133"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\123\1\134"+
    "\1\135\1\136\1\123\1\137\1\140\1\30\1\141\1\142"+
    "\1\143\1\144\1\123\1\145\1\123\1\146\1\147\1\150"+
    "\1\151\1\152\1\153\1\154\1\155\1\156\1\157\4\123"+
    "\1\105\1\106\1\107\1\110\1\111\1\112\1\113\1\114"+
    "\1\115\1\116\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\3\32\1\33\1\160\1\35\1\36\1\37\4\27"+
    "\1\40\1\27\1\41\1\42\1\43\2\27\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\133\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\27\1\61\1\62\1\63\1\27"+
    "\1\64\1\65\1\30\1\66\1\67\1\70\1\71\1\27"+
    "\1\72\1\27\1\73\1\74\1\75\1\76\1\77\1\100"+
    "\1\101\1\102\1\103\1\104\4\27\1\105\1\106\1\107"+
    "\1\110\1\111\1\112\1\113\1\114\1\115\1\116\1\161"+
    "\1\162\1\163\113\161\2\7\1\0\113\7\1\164\3\165"+
    "\112\164\1\166\1\167\114\166\2\170\1\0\113\170\1\171"+
    "\3\165\112\171\1\172\3\165\112\172\1\173\3\165\112\173"+
    "\1\174\1\175\114\174\2\176\1\0\113\176\1\177\1\200"+
    "\50\177\1\201\4\177\1\201\4\177\1\201\11\177\1\201"+
    "\17\177\1\202\3\165\112\202\1\203\1\204\114\203\120\0"+
    "\1\25\116\0\1\26\116\0\2\27\5\0\2\27\1\0"+
    "\14\27\15\0\35\27\17\0\1\30\5\0\1\30\1\0"+
    "\1\205\40\0\1\30\43\0\1\206\1\0\1\51\4\0"+
    "\2\206\1\0\3\206\3\207\3\206\1\207\2\206\6\0"+
    "\1\51\2\0\1\210\3\0\4\207\1\206\1\207\1\206"+
    "\1\0\1\207\1\206\1\207\1\206\4\207\1\206\2\207"+
    "\1\206\2\207\1\206\2\207\3\206\1\207\12\0\2\33"+
    "\1\211\113\33\4\0\1\27\1\212\5\0\1\213\1\27"+
    "\1\214\14\27\15\0\7\27\1\212\25\27\16\0\1\27"+
    "\1\215\5\0\2\27\1\0\14\27\15\0\7\27\1\215"+
    "\25\27\27\0\1\216\104\0\2\27\5\0\2\27\1\0"+
    "\1\27\1\217\12\27\15\0\35\27\16\0\2\27\5\0"+
    "\2\27\1\0\1\220\13\27\15\0\35\27\16\0\2\27"+
    "\5\0\2\27\1\0\1\27\1\221\12\27\15\0\35\27"+
    "\16\0\2\27\5\0\2\27\1\0\1\27\1\222\12\27"+
    "\15\0\35\27\16\0\2\27\5\0\2\27\1\0\12\27"+
    "\1\223\1\27\15\0\35\27\45\0\1\51\4\0\1\51"+
    "\111\0\1\51\3\0\1\51\113\0\1\51\1\0\1\51"+
    "\113\0\1\51\115\0\1\51\1\0\1\51\2\0\1\224"+
    "\4\0\1\225\1\226\1\0\1\227\1\230\3\0\1\231"+
    "\2\0\1\232\4\0\1\233\65\0\1\234\1\0\1\235"+
    "\113\0\1\51\2\0\1\51\116\0\1\51\116\0\1\51"+
    "\54\0\2\27\5\0\2\27\1\0\14\27\15\0\6\27"+
    "\1\236\1\27\1\237\24\27\16\0\2\27\5\0\2\27"+
    "\1\0\14\27\15\0\1\27\1\240\6\27\1\241\11\27"+
    "\1\242\12\27\16\0\2\27\5\0\2\27\1\0\14\27"+
    "\15\0\2\27\1\241\2\27\1\243\27\27\16\0\2\27"+
    "\5\0\1\27\1\244\1\0\14\27\15\0\23\27\1\241"+
    "\1\27\1\245\2\27\1\246\4\27\16\0\2\27\5\0"+
    "\2\27\1\0\14\27\15\0\20\27\1\247\14\27\16\0"+
    "\2\27\5\0\2\27\1\0\14\27\15\0\5\27\1\250"+
    "\27\27\16\0\2\27\5\0\2\27\1\0\14\27\15\0"+
    "\21\27\1\241\13\27\16\0\2\27\5\0\2\27\1\0"+
    "\14\27\15\0\10\27\1\102\24\27\16\0\2\27\5\0"+
    "\2\27\1\0\14\27\15\0\6\27\1\251\17\27\1\241"+
    "\6\27\16\0\2\27\5\0\2\27\1\0\14\27\15\0"+
    "\2\27\1\252\10\27\1\251\14\27\1\253\4\27\16\0"+
    "\2\27\5\0\2\27\1\0\14\27\15\0\5\27\1\241"+
    "\2\27\1\254\1\255\1\241\22\27\16\0\2\27\5\0"+
    "\2\27\1\0\14\27\15\0\2\27\1\256\2\27\1\257"+
    "\27\27\16\0\2\27\5\0\2\27\1\0\14\27\15\0"+
    "\2\27\1\260\32\27\16\0\2\27\5\0\2\27\1\0"+
    "\14\27\15\0\20\27\1\261\6\27\1\262\5\27\16\0"+
    "\2\27\5\0\2\27\1\0\14\27\15\0\10\27\1\263"+
    "\12\27\1\264\1\265\1\264\7\27\16\0\2\27\5\0"+
    "\2\27\1\0\14\27\15\0\4\27\1\266\30\27\16\0"+
    "\2\27\5\0\2\27\1\0\14\27\15\0\2\27\1\242"+
    "\32\27\16\0\2\27\5\0\2\27\1\0\14\27\15\0"+
    "\2\27\1\267\3\27\1\270\3\27\1\271\2\27\1\272"+
    "\4\27\1\273\12\27\16\0\2\27\5\0\2\27\1\0"+
    "\14\27\15\0\2\27\1\274\2\27\1\241\1\275\3\27"+
    "\1\241\22\27\117\0\1\276\10\0\2\120\1\121\115\120"+
    "\1\121\61\120\1\277\31\120\4\0\2\123\5\0\2\123"+
    "\1\0\14\123\15\0\35\123\16\0\1\123\1\300\5\0"+
    "\1\301\1\123\1\214\14\123\15\0\7\123\1\300\25\123"+
    "\16\0\1\123\1\302\5\0\2\123\1\0\14\123\15\0"+
    "\7\123\1\302\25\123\16\0\2\123\5\0\2\123\1\0"+
    "\1\123\1\303\12\123\15\0\35\123\16\0\2\123\5\0"+
    "\2\123\1\0\1\304\13\123\15\0\35\123\16\0\2\123"+
    "\5\0\2\123\1\0\1\123\1\305\12\123\15\0\35\123"+
    "\16\0\2\123\5\0\2\123\1\0\1\123\1\306\12\123"+
    "\15\0\35\123\16\0\2\123\5\0\2\123\1\0\12\123"+
    "\1\307\1\123\15\0\35\123\50\0\1\51\1\0\1\51"+
    "\2\0\1\224\56\0\2\123\5\0\2\123\1\0\14\123"+
    "\15\0\6\123\1\310\1\123\1\311\24\123\16\0\2\123"+
    "\5\0\2\123\1\0\14\123\15\0\1\123\1\312\6\123"+
    "\1\313\11\123\1\314\12\123\16\0\2\123\5\0\2\123"+
    "\1\0\14\123\15\0\2\123\1\313\2\123\1\315\27\123"+
    "\16\0\2\123\5\0\1\123\1\316\1\0\14\123\15\0"+
    "\23\123\1\313\1\123\1\317\2\123\1\320\4\123\16\0"+
    "\2\123\5\0\2\123\1\0\14\123\15\0\20\123\1\321"+
    "\14\123\16\0\2\123\5\0\2\123\1\0\14\123\15\0"+
    "\5\123\1\322\27\123\16\0\2\123\5\0\2\123\1\0"+
    "\14\123\15\0\21\123\1\313\13\123\16\0\2\123\5\0"+
    "\2\123\1\0\14\123\15\0\10\123\1\155\24\123\16\0"+
    "\2\123\5\0\2\123\1\0\14\123\15\0\6\123\1\323"+
    "\17\123\1\313\6\123\16\0\2\123\5\0\2\123\1\0"+
    "\14\123\15\0\2\123\1\324\10\123\1\323\14\123\1\325"+
    "\4\123\16\0\2\123\5\0\2\123\1\0\14\123\15\0"+
    "\5\123\1\313\2\123\1\326\1\327\1\313\22\123\16\0"+
    "\2\123\5\0\2\123\1\0\14\123\15\0\2\123\1\330"+
    "\2\123\1\331\27\123\16\0\2\123\5\0\2\123\1\0"+
    "\14\123\15\0\2\123\1\332\32\123\16\0\2\123\5\0"+
    "\2\123\1\0\14\123\15\0\20\123\1\333\6\123\1\334"+
    "\5\123\16\0\2\123\5\0\2\123\1\0\14\123\15\0"+
    "\10\123\1\335\12\123\1\336\1\337\1\336\7\123\16\0"+
    "\2\123\5\0\2\123\1\0\14\123\15\0\4\123\1\340"+
    "\30\123\16\0\2\123\5\0\2\123\1\0\14\123\15\0"+
    "\2\123\1\314\32\123\16\0\2\123\5\0\2\123\1\0"+
    "\14\123\15\0\2\123\1\341\3\123\1\342\3\123\1\343"+
    "\2\123\1\344\4\123\1\345\12\123\16\0\2\123\5\0"+
    "\2\123\1\0\14\123\15\0\2\123\1\346\2\123\1\313"+
    "\1\347\3\123\1\313\22\123\16\0\1\27\1\212\5\0"+
    "\1\350\1\27\1\214\14\27\15\0\7\27\1\212\25\27"+
    "\12\0\2\161\1\0\115\161\1\163\113\161\1\0\3\165"+
    "\114\0\1\166\113\0\1\172\3\0\112\172\2\0\1\174"+
    "\115\0\1\177\115\0\1\203\120\0\1\351\5\0\1\352"+
    "\42\0\1\351\43\0\2\206\5\0\2\206\1\0\14\206"+
    "\15\0\35\206\12\0\4\353\2\206\5\353\2\206\1\353"+
    "\14\206\15\353\35\206\12\353\4\0\1\27\1\212\5\0"+
    "\1\212\1\27\1\214\14\27\15\0\7\27\1\212\25\27"+
    "\16\0\1\27\1\212\5\0\1\212\1\27\1\214\1\354"+
    "\1\27\1\355\11\27\15\0\7\27\1\212\21\27\1\356"+
    "\1\357\1\360\1\361\17\0\1\352\5\0\1\352\42\0"+
    "\1\352\43\0\1\27\1\215\5\0\1\215\1\27\1\362"+
    "\14\27\15\0\7\27\1\215\25\27\27\0\1\51\104\0"+
    "\2\27\5\0\2\27\1\0\2\27\1\363\11\27\15\0"+
    "\35\27\16\0\2\27\5\0\2\27\1\0\6\27\1\364"+
    "\5\27\15\0\35\27\16\0\2\27\5\0\2\27\1\0"+
    "\7\27\1\365\4\27\15\0\35\27\16\0\2\27\5\0"+
    "\2\27\1\0\7\27\1\366\4\27\15\0\35\27\16\0"+
    "\2\27\5\0\2\27\1\0\1\367\13\27\15\0\35\27"+
    "\63\0\1\370\60\0\1\371\155\0\1\372\130\0\1\373"+
    "\107\0\1\374\110\0\1\375\1\376\111\0\1\377\107\0"+
    "\1\51\55\0\1\u0100\1\u0101\2\0\1\u0102\1\u0103\1\u0104"+
    "\1\0\2\u0101\1\0\14\u0101\15\0\7\u0101\1\0\25\u0101"+
    "\16\0\2\27\5\0\2\27\1\0\14\27\15\0\15\27"+
    "\1\u0105\17\27\16\0\2\27\5\0\2\27\1\0\14\27"+
    "\15\0\11\27\1\u0106\23\27\16\0\2\27\5\0\2\27"+
    "\1\0\14\27\15\0\5\27\1\u0107\27\27\16\0\2\27"+
    "\5\0\2\27\1\0\14\27\15\0\10\27\1\241\24\27"+
    "\16\0\2\27\5\0\2\27\1\0\14\27\15\0\21\27"+
    "\1\u0108\13\27\16\0\2\27\5\0\2\27\1\0\14\27"+
    "\15\0\6\27\1\u0109\26\27\16\0\2\27\5\0\2\27"+
    "\1\0\14\27\15\0\11\27\1\u010a\23\27\16\0\2\27"+
    "\5\0\2\27\1\0\14\27\15\0\27\27\1\u010b\5\27"+
    "\16\0\2\27\5\0\2\27\1\0\14\27\15\0\3\27"+
    "\1\241\31\27\16\0\2\27\5\0\2\27\1\0\14\27"+
    "\15\0\3\27\1\u010c\15\27\1\u010d\1\27\1\u010e\11\27"+
    "\16\0\2\27\5\0\2\27\1\0\14\27\15\0\1\27"+
    "\1\241\33\27\16\0\2\27\5\0\2\27\1\0\14\27"+
    "\15\0\20\27\1\u010f\14\27\16\0\2\27\5\0\2\27"+
    "\1\0\14\27\15\0\2\27\1\u0110\32\27\16\0\2\27"+
    "\5\0\2\27\1\0\14\27\15\0\5\27\1\251\27\27"+
    "\16\0\2\27\5\0\1\27\1\240\1\0\14\27\15\0"+
    "\35\27\16\0\2\27\5\0\2\27\1\0\14\27\15\0"+
    "\12\27\1\241\22\27\16\0\2\27\5\0\2\27\1\0"+
    "\14\27\15\0\25\27\1\u0111\7\27\16\0\2\27\5\0"+
    "\2\27\1\0\14\27\15\0\10\27\1\u0112\24\27\16\0"+
    "\2\27\5\0\2\27\1\0\14\27\15\0\3\27\1\u0113"+
    "\6\27\1\u0114\15\27\1\u0115\4\27\16\0\2\27\5\0"+
    "\2\27\1\0\14\27\15\0\5\27\1\241\27\27\16\0"+
    "\2\27\5\0\2\27\1\0\14\27\15\0\11\27\1\u0116"+
    "\23\27\16\0\2\27\5\0\2\27\1\0\14\27\15\0"+
    "\10\27\1\u0111\24\27\16\0\2\27\5\0\2\27\1\0"+
    "\14\27\15\0\26\27\1\241\6\27\16\0\2\27\5\0"+
    "\2\27\1\0\14\27\15\0\6\27\1\u0117\26\27\16\0"+
    "\2\27\5\0\2\27\1\0\14\27\15\0\6\27\1\u0118"+
    "\26\27\16\0\2\27\5\0\2\27\1\0\14\27\15\0"+
    "\14\27\1\241\20\27\16\0\2\27\5\0\2\27\1\0"+
    "\14\27\15\0\15\27\1\244\17\27\16\0\2\27\5\0"+
    "\2\27\1\0\14\27\15\0\27\27\1\u0111\5\27\12\0"+
    "\2\120\1\121\66\120\1\u0119\24\120\4\0\1\123\1\300"+
    "\5\0\1\300\1\123\1\214\14\123\15\0\7\123\1\300"+
    "\25\123\16\0\1\123\1\300\5\0\1\300\1\123\1\214"+
    "\14\123\15\0\7\123\1\300\21\123\1\u011a\1\u011b\1\u011c"+
    "\1\u011d\16\0\1\123\1\302\5\0\1\302\1\123\1\362"+
    "\14\123\15\0\7\123\1\302\25\123\16\0\2\123\5\0"+
    "\2\123\1\0\2\123\1\u011e\11\123\15\0\35\123\16\0"+
    "\2\123\5\0\2\123\1\0\6\123\1\u011f\5\123\15\0"+
    "\35\123\16\0\2\123\5\0\2\123\1\0\7\123\1\u0120"+
    "\4\123\15\0\35\123\16\0\2\123\5\0\2\123\1\0"+
    "\7\123\1\u0121\4\123\15\0\35\123\16\0\2\123\5\0"+
    "\2\123\1\0\1\u0122\13\123\15\0\35\123\16\0\2\123"+
    "\5\0\2\123\1\0\14\123\15\0\15\123\1\u0123\17\123"+
    "\16\0\2\123\5\0\2\123\1\0\14\123\15\0\11\123"+
    "\1\u0124\23\123\16\0\2\123\5\0\2\123\1\0\14\123"+
    "\15\0\5\123\1\u0125\27\123\16\0\2\123\5\0\2\123"+
    "\1\0\14\123\15\0\10\123\1\313\24\123\16\0\2\123"+
    "\5\0\2\123\1\0\14\123\15\0\21\123\1\u0126\13\123"+
    "\16\0\2\123\5\0\2\123\1\0\14\123\15\0\6\123"+
    "\1\u0127\26\123\16\0\2\123\5\0\2\123\1\0\14\123"+
    "\15\0\11\123\1\u0128\23\123\16\0\2\123\5\0\2\123"+
    "\1\0\14\123\15\0\27\123\1\u0129\5\123\16\0\2\123"+
    "\5\0\2\123\1\0\14\123\15\0\3\123\1\313\31\123"+
    "\16\0\2\123\5\0\2\123\1\0\14\123\15\0\3\123"+
    "\1\u012a\15\123\1\u012b\1\123\1\u012c\11\123\16\0\2\123"+
    "\5\0\2\123\1\0\14\123\15\0\1\123\1\313\33\123"+
    "\16\0\2\123\5\0\2\123\1\0\14\123\15\0\20\123"+
    "\1\u012d\14\123\16\0\2\123\5\0\2\123\1\0\14\123"+
    "\15\0\2\123\1\u012e\32\123\16\0\2\123\5\0\2\123"+
    "\1\0\14\123\15\0\5\123\1\323\27\123\16\0\2\123"+
    "\5\0\1\123\1\312\1\0\14\123\15\0\35\123\16\0"+
    "\2\123\5\0\2\123\1\0\14\123\15\0\12\123\1\313"+
    "\22\123\16\0\2\123\5\0\2\123\1\0\14\123\15\0"+
    "\25\123\1\u012f\7\123\16\0\2\123\5\0\2\123\1\0"+
    "\14\123\15\0\10\123\1\u0130\24\123\16\0\2\123\5\0"+
    "\2\123\1\0\14\123\15\0\3\123\1\u0131\6\123\1\u0132"+
    "\15\123\1\u0133\4\123\16\0\2\123\5\0\2\123\1\0"+
    "\14\123\15\0\5\123\1\313\27\123\16\0\2\123\5\0"+
    "\2\123\1\0\14\123\15\0\11\123\1\u0134\23\123\16\0"+
    "\2\123\5\0\2\123\1\0\14\123\15\0\10\123\1\u012f"+
    "\24\123\16\0\2\123\5\0\2\123\1\0\14\123\15\0"+
    "\26\123\1\313\6\123\16\0\2\123\5\0\2\123\1\0"+
    "\14\123\15\0\6\123\1\u0135\26\123\16\0\2\123\5\0"+
    "\2\123\1\0\14\123\15\0\6\123\1\u0136\26\123\16\0"+
    "\2\123\5\0\2\123\1\0\14\123\15\0\14\123\1\313"+
    "\20\123\16\0\2\123\5\0\2\123\1\0\14\123\15\0"+
    "\15\123\1\316\17\123\16\0\2\123\5\0\2\123\1\0"+
    "\14\123\15\0\27\123\1\u012f\5\123\16\0\1\27\1\212"+
    "\5\0\1\212\1\27\1\214\14\27\15\0\7\27\1\212"+
    "\21\27\1\356\1\357\1\360\1\361\17\0\1\351\5\0"+
    "\1\351\1\0\1\362\40\0\1\351\43\0\2\27\5\0"+
    "\2\27\1\0\1\27\1\u0137\12\27\15\0\35\27\16\0"+
    "\2\27\5\0\2\27\1\0\3\27\1\u0138\10\27\15\0"+
    "\35\27\16\0\2\27\5\0\2\27\1\0\7\27\1\u0139"+
    "\4\27\15\0\35\27\16\0\2\27\5\0\2\27\1\0"+
    "\7\27\1\u013a\4\27\15\0\35\27\16\0\2\27\5\0"+
    "\2\27\1\0\3\27\1\u013b\10\27\15\0\35\27\16\0"+
    "\2\27\5\0\2\27\1\0\10\27\1\u013c\3\27\15\0"+
    "\35\27\17\0\1\u013d\50\0\1\u013d\43\0\2\27\5\0"+
    "\2\27\1\0\7\27\1\u013e\4\27\15\0\35\27\16\0"+
    "\2\27\5\0\2\27\1\0\4\27\1\363\7\27\15\0"+
    "\35\27\16\0\2\27\5\0\2\27\1\0\4\27\1\u013f"+
    "\7\27\15\0\35\27\16\0\2\27\5\0\2\27\1\0"+
    "\11\27\1\u0140\2\27\15\0\35\27\64\0\1\u0141\117\0"+
    "\1\377\116\0\1\u0142\112\0\1\u0141\11\0\1\u0143\105\0"+
    "\1\u0144\127\0\1\u0145\113\0\1\u0146\110\0\1\u0141\42\0"+
    "\2\u0101\5\0\2\u0101\1\0\14\u0101\15\0\35\u0101\16\0"+
    "\1\u0147\6\0\2\u0147\1\0\14\u0147\15\0\7\u0147\1\0"+
    "\25\u0147\16\0\1\u0148\6\0\2\u0148\1\0\14\u0148\15\0"+
    "\7\u0148\1\0\25\u0148\16\0\1\u0149\6\0\2\u0149\1\0"+
    "\14\u0149\15\0\7\u0149\1\0\25\u0149\16\0\2\27\5\0"+
    "\2\27\1\0\14\27\15\0\16\27\1\u014a\16\27\16\0"+
    "\2\27\5\0\2\27\1\0\14\27\15\0\20\27\1\u0111"+
    "\14\27\16\0\2\27\5\0\2\27\1\0\14\27\15\0"+
    "\20\27\1\241\14\27\16\0\2\27\5\0\2\27\1\0"+
    "\14\27\15\0\11\27\1\u014b\23\27\16\0\2\27\5\0"+
    "\2\27\1\0\14\27\15\0\30\27\1\241\4\27\16\0"+
    "\2\27\5\0\2\27\1\0\14\27\15\0\27\27\1\u014c"+
    "\5\27\16\0\2\27\5\0\2\27\1\0\14\27\15\0"+
    "\5\27\1\241\3\27\1\67\23\27\16\0\2\27\5\0"+
    "\2\27\1\0\14\27\15\0\2\27\1\241\32\27\16\0"+
    "\2\27\5\0\2\27\1\0\14\27\15\0\22\27\1\u014d"+
    "\12\27\16\0\2\27\5\0\2\27\1\0\14\27\15\0"+
    "\12\27\1\u014e\22\27\16\0\2\27\5\0\2\27\1\0"+
    "\14\27\15\0\27\27\1\262\5\27\16\0\2\27\5\0"+
    "\2\27\1\0\14\27\15\0\5\27\1\u014f\27\27\16\0"+
    "\2\27\5\0\2\27\1\0\14\27\15\0\5\27\1\67"+
    "\27\27\16\0\2\27\5\0\2\27\1\0\14\27\15\0"+
    "\11\27\1\u0109\23\27\16\0\2\27\5\0\2\27\1\0"+
    "\14\27\15\0\5\27\1\u0150\27\27\16\0\2\27\5\0"+
    "\2\27\1\0\14\27\15\0\30\27\1\262\4\27\16\0"+
    "\2\27\5\0\2\27\1\0\14\27\15\0\12\27\1\262"+
    "\22\27\16\0\2\27\5\0\2\27\1\0\14\27\15\0"+
    "\30\27\1\u0151\4\27\12\0\2\120\1\121\56\120\1\u0152"+
    "\34\120\4\0\2\123\5\0\2\123\1\0\7\123\1\u0153"+
    "\4\123\15\0\35\123\16\0\2\123\5\0\2\123\1\0"+
    "\7\123\1\u0154\4\123\15\0\35\123\16\0\2\123\5\0"+
    "\2\123\1\0\3\123\1\u0155\10\123\15\0\35\123\16\0"+
    "\2\123\5\0\2\123\1\0\10\123\1\u0156\3\123\15\0"+
    "\35\123\16\0\2\123\5\0\2\123\1\0\7\123\1\u0157"+
    "\4\123\15\0\35\123\16\0\2\123\5\0\2\123\1\0"+
    "\4\123\1\u011e\7\123\15\0\35\123\16\0\2\123\5\0"+
    "\2\123\1\0\4\123\1\u0158\7\123\15\0\35\123\16\0"+
    "\2\123\5\0\2\123\1\0\11\123\1\u0159\2\123\15\0"+
    "\35\123\16\0\2\123\5\0\2\123\1\0\14\123\15\0"+
    "\16\123\1\u015a\16\123\16\0\2\123\5\0\2\123\1\0"+
    "\14\123\15\0\20\123\1\u012f\14\123\16\0\2\123\5\0"+
    "\2\123\1\0\14\123\15\0\20\123\1\313\14\123\16\0"+
    "\2\123\5\0\2\123\1\0\14\123\15\0\11\123\1\u015b"+
    "\23\123\16\0\2\123\5\0\2\123\1\0\14\123\15\0"+
    "\30\123\1\313\4\123\16\0\2\123\5\0\2\123\1\0"+
    "\14\123\15\0\27\123\1\u015c\5\123\16\0\2\123\5\0"+
    "\2\123\1\0\14\123\15\0\5\123\1\313\3\123\1\142"+
    "\23\123\16\0\2\123\5\0\2\123\1\0\14\123\15\0"+
    "\2\123\1\313\32\123\16\0\2\123\5\0\2\123\1\0"+
    "\14\123\15\0\22\123\1\u015d\12\123\16\0\2\123\5\0"+
    "\2\123\1\0\14\123\15\0\12\123\1\u015e\22\123\16\0"+
    "\2\123\5\0\2\123\1\0\14\123\15\0\27\123\1\334"+
    "\5\123\16\0\2\123\5\0\2\123\1\0\14\123\15\0"+
    "\5\123\1\u015f\27\123\16\0\2\123\5\0\2\123\1\0"+
    "\14\123\15\0\5\123\1\142\27\123\16\0\2\123\5\0"+
    "\2\123\1\0\14\123\15\0\11\123\1\u0127\23\123\16\0"+
    "\2\123\5\0\2\123\1\0\14\123\15\0\5\123\1\u0160"+
    "\27\123\16\0\2\123\5\0\2\123\1\0\14\123\15\0"+
    "\30\123\1\334\4\123\16\0\2\123\5\0\2\123\1\0"+
    "\14\123\15\0\12\123\1\334\22\123\16\0\2\123\5\0"+
    "\2\123\1\0\14\123\15\0\30\123\1\u0161\4\123\16\0"+
    "\2\27\5\0\2\27\1\0\2\27\1\u0162\11\27\15\0"+
    "\35\27\16\0\2\27\5\0\2\27\1\0\4\27\1\u0163"+
    "\7\27\15\0\35\27\16\0\2\27\5\0\2\27\1\0"+
    "\14\27\15\0\32\27\1\u0164\2\27\16\0\2\27\5\0"+
    "\2\27\1\0\1\27\1\u0164\12\27\15\0\35\27\16\0"+
    "\2\27\5\0\2\27\1\0\11\27\1\u0165\2\27\15\0"+
    "\35\27\16\0\2\27\5\0\2\27\1\0\5\27\1\u0166"+
    "\6\27\15\0\35\27\17\0\1\u013d\5\0\1\u013d\1\0"+
    "\1\362\40\0\1\u013d\43\0\2\27\5\0\2\27\1\0"+
    "\1\27\1\363\12\27\15\0\35\27\16\0\2\27\5\0"+
    "\2\27\1\0\11\27\1\43\2\27\15\0\35\27\16\0"+
    "\2\27\5\0\2\27\1\0\13\27\1\363\15\0\35\27"+
    "\12\0\2\u0141\1\u0167\113\u0141\52\0\1\u0168\114\0\1\u0169"+
    "\126\0\1\u0141\113\0\1\u016a\122\0\1\u0141\34\0\2\u0147"+
    "\1\0\1\u016b\3\0\2\u0147\1\0\14\u0147\15\0\35\u0147"+
    "\16\0\2\u0148\2\0\1\u016b\2\0\2\u0148\1\0\14\u0148"+
    "\15\0\35\u0148\16\0\2\u0149\3\0\1\u016b\1\0\2\u0149"+
    "\1\0\14\u0149\15\0\35\u0149\16\0\2\27\5\0\2\27"+
    "\1\0\14\27\15\0\6\27\1\u016c\26\27\16\0\2\27"+
    "\5\0\2\27\1\0\14\27\15\0\20\27\1\u016d\14\27"+
    "\16\0\2\27\5\0\2\27\1\0\14\27\15\0\12\27"+
    "\1\u016e\22\27\16\0\2\27\5\0\2\27\1\0\14\27"+
    "\15\0\11\27\1\u016f\23\27\16\0\2\27\5\0\2\27"+
    "\1\0\14\27\15\0\11\27\1\u0170\23\27\16\0\2\27"+
    "\5\0\2\27\1\0\14\27\15\0\6\27\1\u0171\26\27"+
    "\16\0\2\27\5\0\2\27\1\0\14\27\15\0\27\27"+
    "\1\u0172\5\27\16\0\2\27\5\0\2\27\1\0\14\27"+
    "\15\0\6\27\1\u0173\26\27\12\0\2\u0152\1\u0174\113\u0152"+
    "\4\0\2\123\5\0\2\123\1\0\14\123\15\0\32\123"+
    "\1\u0175\2\123\16\0\2\123\5\0\2\123\1\0\1\123"+
    "\1\u0175\12\123\15\0\35\123\16\0\2\123\5\0\2\123"+
    "\1\0\11\123\1\u0176\2\123\15\0\35\123\16\0\2\123"+
    "\5\0\2\123\1\0\5\123\1\u0177\6\123\15\0\35\123"+
    "\16\0\2\123\5\0\2\123\1\0\1\123\1\u011e\12\123"+
    "\15\0\35\123\16\0\2\123\5\0\2\123\1\0\11\123"+
    "\1\132\2\123\15\0\35\123\16\0\2\123\5\0\2\123"+
    "\1\0\13\123\1\u011e\15\0\35\123\16\0\2\123\5\0"+
    "\2\123\1\0\14\123\15\0\6\123\1\u0178\26\123\16\0"+
    "\2\123\5\0\2\123\1\0\14\123\15\0\20\123\1\u0179"+
    "\14\123\16\0\2\123\5\0\2\123\1\0\14\123\15\0"+
    "\12\123\1\u017a\22\123\16\0\2\123\5\0\2\123\1\0"+
    "\14\123\15\0\11\123\1\u017b\23\123\16\0\2\123\5\0"+
    "\2\123\1\0\14\123\15\0\11\123\1\u017c\23\123\16\0"+
    "\2\123\5\0\2\123\1\0\14\123\15\0\6\123\1\u017d"+
    "\26\123\16\0\2\123\5\0\2\123\1\0\14\123\15\0"+
    "\27\123\1\u017e\5\123\16\0\2\123\5\0\2\123\1\0"+
    "\14\123\15\0\6\123\1\u017f\26\123\16\0\2\27\5\0"+
    "\1\u0180\1\27\1\0\14\27\15\0\35\27\16\0\2\27"+
    "\5\0\2\27\1\0\3\27\1\u0162\10\27\15\0\35\27"+
    "\16\0\2\27\5\0\2\27\1\0\1\u0166\13\27\15\0"+
    "\35\27\16\0\2\27\5\0\2\27\1\0\13\27\1\u0181"+
    "\15\0\35\27\16\0\2\27\5\0\1\u0182\1\27\1\0"+
    "\14\27\15\0\35\27\70\0\1\u0141\111\0\1\u0183\132\0"+
    "\1\u0141\32\0\2\27\5\0\2\27\1\0\14\27\15\0"+
    "\17\27\1\262\15\27\16\0\2\27\5\0\2\27\1\0"+
    "\14\27\15\0\5\27\1\u0184\27\27\16\0\2\27\5\0"+
    "\2\27\1\0\14\27\15\0\27\27\1\u010d\5\27\16\0"+
    "\2\27\5\0\2\27\1\0\14\27\15\0\10\27\1\262"+
    "\24\27\16\0\2\27\5\0\2\27\1\0\14\27\15\0"+
    "\20\27\1\u0185\14\27\16\0\2\27\5\0\2\27\1\0"+
    "\14\27\15\0\15\27\1\u0186\17\27\16\0\2\27\5\0"+
    "\2\27\1\0\14\27\15\0\27\27\1\241\5\27\16\0"+
    "\2\27\5\0\2\27\1\0\14\27\15\0\10\27\1\u010d"+
    "\24\27\16\0\2\123\5\0\2\123\1\0\1\u0177\13\123"+
    "\15\0\35\123\16\0\2\123\5\0\2\123\1\0\13\123"+
    "\1\u0187\15\0\35\123\16\0\2\123\5\0\1\u0188\1\123"+
    "\1\0\14\123\15\0\35\123\16\0\2\123\5\0\2\123"+
    "\1\0\14\123\15\0\17\123\1\334\15\123\16\0\2\123"+
    "\5\0\2\123\1\0\14\123\15\0\5\123\1\u0189\27\123"+
    "\16\0\2\123\5\0\2\123\1\0\14\123\15\0\27\123"+
    "\1\u012b\5\123\16\0\2\123\5\0\2\123\1\0\14\123"+
    "\15\0\10\123\1\334\24\123\16\0\2\123\5\0\2\123"+
    "\1\0\14\123\15\0\20\123\1\u018a\14\123\16\0\2\123"+
    "\5\0\2\123\1\0\14\123\15\0\15\123\1\u018b\17\123"+
    "\16\0\2\123\5\0\2\123\1\0\14\123\15\0\27\123"+
    "\1\313\5\123\16\0\2\123\5\0\2\123\1\0\14\123"+
    "\15\0\10\123\1\u012b\24\123\16\0\2\27\5\0\1\u018c"+
    "\1\27\1\0\14\27\15\0\35\27\16\0\2\27\5\0"+
    "\2\27\1\0\3\27\1\u018d\10\27\15\0\35\27\16\0"+
    "\2\27\5\0\1\u018e\1\27\1\0\14\27\15\0\35\27"+
    "\72\0\1\u018f\41\0\2\27\5\0\2\27\1\0\14\27"+
    "\15\0\3\27\1\u010d\31\27\16\0\2\27\5\0\2\27"+
    "\1\0\14\27\15\0\22\27\1\262\12\27\16\0\2\27"+
    "\5\0\2\27\1\0\14\27\15\0\4\27\1\241\30\27"+
    "\16\0\2\123\5\0\2\123\1\0\3\123\1\u0190\10\123"+
    "\15\0\35\123\16\0\2\123\5\0\1\u0191\1\123\1\0"+
    "\14\123\15\0\35\123\16\0\2\123\5\0\2\123\1\0"+
    "\14\123\15\0\3\123\1\u012b\31\123\16\0\2\123\5\0"+
    "\2\123\1\0\14\123\15\0\22\123\1\334\12\123\16\0"+
    "\2\123\5\0\2\123\1\0\14\123\15\0\4\123\1\313"+
    "\30\123\16\0\2\27\5\0\2\27\1\0\6\27\1\u0164"+
    "\5\27\15\0\35\27\101\0\1\u0192\32\0\2\123\5\0"+
    "\2\123\1\0\6\123\1\u0175\5\123\15\0\35\123\100\0"+
    "\1\u0141\27\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[26832];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\1\2\0\2\1\13\0\1\11\1\1\1\11"+
    "\4\1\1\11\11\1\1\11\4\1\1\11\1\1\1\11"+
    "\4\1\1\11\24\1\1\11\1\1\11\11\1\1\1\11"+
    "\41\1\2\11\1\1\1\11\1\1\2\11\1\1\2\11"+
    "\1\1\2\11\1\1\3\11\1\1\1\0\2\1\2\11"+
    "\2\1\1\0\7\1\1\11\7\0\42\1\1\11\54\1"+
    "\1\11\6\1\1\0\5\1\11\0\1\1\3\0\75\1"+
    "\10\0\35\1\1\11\3\0\1\11\10\1\1\11\16\1"+
    "\1\0\13\1\1\0\2\1\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[402];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    public void setTokenStart(int position){zzCurrentPos = zzStartRead = position;}
    public void setTokenEnd(int position){zzMarkedPos = position;}
    public CharSequence getBuffer(){ return zzBuffer;}
    public char[] getBufferArray(){ return zzBufferArray;}
    public int getBufferEnd() {return zzEndRead;}
    public int getNextTokenStart(){ return zzMarkedPos;}
    public boolean isLastToken(){ return zzMarkedPos == zzEndRead; }
    public void setState(int newState){ zzLexicalState = newState; }



  public PerlLexerGenerated(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PerlLexerGenerated(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 194) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 11: 
          { return processStringOpener();
          }
        case 61: break;
        case 57: 
          { processPodOpener();break;
          }
        case 62: break;
        case 3: 
          { if( isMultilineEnd() || isLastToken())
        {
            return endMultiline();
        }
        break;
          }
        case 63: break;
        case 9: 
          { return PERL_NUMBER;
          }
        case 64: break;
        case 45: 
          { return parseRegex();
          }
        case 65: break;
        case 60: 
          { return PERL_TAG;
          }
        case 66: break;
        case 35: 
          { return processOpenerWhiteSpace();
          }
        case 67: break;
        case 18: 
          { return processRegexOpener();
          }
        case 68: break;
        case 41: 
          { IElementType tokenType = processTransChar();
          if( tokenType != null )
                return tokenType;
          break;
          }
        case 69: break;
        case 59: 
          { processDataOpener(); break;
          }
        case 70: break;
        case 38: 
          { IElementType type = processQuoteLikeListQuote();
            if( type == null ) // disallowed sharp
                break;
            return type;
          }
        case 71: break;
        case 10: 
          { return PERL_OPERATOR;
          }
        case 72: break;
        case 7: 
          { return TokenType.WHITE_SPACE;
          }
        case 73: break;
        case 40: 
          { IElementType type = processTransQuote();
            if( type == null ) // disallowed sharp
                break;
            return type;
          }
        case 74: break;
        case 19: 
          { return processQuoteLikeStringOpener();
          }
        case 75: break;
        case 13: 
          { return PERL_COMMA;
          }
        case 76: break;
        case 51: 
          { return processQuoteLikeListOpener();
          }
        case 77: break;
        case 44: 
          { return PERL_REGEX_MODIFIER;
          }
        case 78: break;
        case 21: 
          { return processTransOpener();
          }
        case 79: break;
        case 1: 
          { if( isLastToken() )
            return endDataBlock();
        break;
          }
        case 80: break;
        case 23: 
          { return PERL_COLON;
          }
        case 81: break;
        case 20: 
          { return PERL_KEYWORD;
          }
        case 82: break;
        case 22: 
          { return processSemicolon();
          }
        case 83: break;
        case 36: 
          { IElementType tokenType = processQuoteLikeChar();
          if( tokenType != null )
                return tokenType;
          break;
          }
        case 84: break;
        case 52: 
          { return PERL_DEPACKAGE;
          }
        case 85: break;
        case 12: 
          { return PERL_COMMENT;
          }
        case 86: break;
        case 32: 
          { yybegin(YYINITIAL); return PERL_STRING_CONTENT;
          }
        case 87: break;
        case 33: 
          { if( isLastToken() )
        {
            return endMultiline();
        }
        break;
          }
        case 88: break;
        case 55: 
          { return processMultilineOpener();
          }
        case 89: break;
        case 53: 
          { yypushback(1);return PERL_OPERATOR_FILETEST;
          }
        case 90: break;
        case 42: 
          { return processTransCloser();
          }
        case 91: break;
        case 6: 
          { return processNewLine();
          }
        case 92: break;
        case 47: 
          { return PERL_STRING_CONTENT;
          }
        case 93: break;
        case 49: 
          { return PERL_NUMBER_VERSION;
          }
        case 94: break;
        case 28: 
          { return PERL_LPAREN;
          }
        case 95: break;
        case 14: 
          { return PERL_SIGIL_HASH;
          }
        case 96: break;
        case 5: 
          { return TokenType.BAD_CHARACTER;
          }
        case 97: break;
        case 2: 
          { if( isLastToken() )
        {
            endPodBlock();
        }
        break;
          }
        case 98: break;
        case 29: 
          { return PERL_RPAREN;
          }
        case 99: break;
        case 31: 
          { return PERL_SIGIL_SCALAR;
          }
        case 100: break;
        case 30: 
          { return PERL_SIGIL_ARRAY;
          }
        case 101: break;
        case 4: 
          { yybegin(YYINITIAL);return PERL_STRING_MULTILINE_END;
          }
        case 102: break;
        case 46: 
          { IElementType nextTokenType = getParsedToken();
        if( nextTokenType == null )
            break;
        return nextTokenType;
          }
        case 103: break;
        case 54: 
          { return PERL_BLOCK_NAME;
          }
        case 104: break;
        case 34: 
          { IElementType type = processQuoteLikeQuote();
            if( type == null ) // disallowed sharp
                break;
            return type;
          }
        case 105: break;
        case 56: 
          { return PERL_OPERATOR_UNARY;
          }
        case 106: break;
        case 17: 
          { // regexp or div
    IElementType tokenType = processDiv();
    if( tokenType == null )
        break;
    return tokenType;
          }
        case 107: break;
        case 50: 
          { return PERL_ARROW_COMMA;
          }
        case 108: break;
        case 48: 
          { return PERL_DEREFERENCE;
          }
        case 109: break;
        case 24: 
          { return PERL_LBRACE;
          }
        case 110: break;
        case 16: 
          { return PERL_RANGLE;
          }
        case 111: break;
        case 25: 
          { return PERL_RBRACE;
          }
        case 112: break;
        case 15: 
          { return PERL_LANGLE;
          }
        case 113: break;
        case 39: 
          { IElementType tokenType = processQuoteLikeWord();
          if( tokenType != null )
                return tokenType;
          break;
          }
        case 114: break;
        case 37: 
          { popState(); return PERL_QUOTE;
          }
        case 115: break;
        case 8: 
          { return PERL_BAREWORD;
          }
        case 116: break;
        case 58: 
          { return endPodBlock();
          }
        case 117: break;
        case 43: 
          { popState(); yypushback(1); break;
          }
        case 118: break;
        case 27: 
          { return PERL_RBRACK;
          }
        case 119: break;
        case 26: 
          { return PERL_LBRACK;
          }
        case 120: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
