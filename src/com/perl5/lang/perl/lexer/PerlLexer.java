/* The following code was generated by JFlex 1.4.3 on 02.05.15 12:19 */

package com.perl5.lang.perl.lexer;

/*
    http://jflex.de/manual.html
    http://www2.cs.tum.edu/projects/cup

*/

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import org.jetbrains.annotations.NotNull;
import com.perl5.lang.perl.util.PerlFunctionUtil;
import com.perl5.lang.perl.util.PerlScalarUtil;
import com.perl5.lang.perl.util.PerlHashUtil;
import com.perl5.lang.perl.util.PerlGlobUtil;
import com.perl5.lang.perl.util.PerlArrayUtil;
import com.perl5.lang.perl.util.PerlPackageUtil;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 02.05.15 12:19 from the specification file
 * <tt>C:/Repository/Perl5-IDEA/src/com/perl5/lang/perl/lexer/Perl.flex</tt>
 */
public class PerlLexer extends PerlLexerProto implements FlexLexer, PerlElementTypes {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int LEX_TRANS_OPENER = 26;
  public static final int LEX_QUOTE_LIKE_CLOSER = 18;
  public static final int LEX_MULTILINE_WAITING = 8;
  public static final int LEX_QUOTE_LIKE_WORDS = 22;
  public static final int LEX_QUOTE_LIKE_CHARS = 16;
  public static final int LEX_TRANS_CLOSER = 30;
  public static final int LEX_QUOTE_LIKE_LIST_CLOSER = 24;
  public static final int LEX_MULTILINE_TOKEN = 12;
  public static final int LEX_QUOTE_LIKE_LIST_OPENER = 20;
  public static final int LEX_TRANS_CHARS = 28;
  public static final int LEX_MULTILINE = 10;
  public static final int LEX_TRANS_MODIFIERS = 32;
  public static final int LEX_EOF = 2;
  public static final int YYINITIAL = 0;
  public static final int LEX_BAREWORD_STRING = 6;
  public static final int LEX_QUOTE_LIKE_OPENER = 14;
  public static final int LEX_POD = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11,  9,  9, 12, 12, 13, 13, 14, 14, 
    15, 15
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\27\1\6"+
    "\1\11\1\70\1\34\1\50\1\7\1\113\1\114\1\26\1\25\1\22"+
    "\1\23\1\14\1\33\1\115\1\64\1\64\1\64\1\64\3\5\1\106"+
    "\1\5\1\53\1\116\1\36\1\32\1\24\1\22\1\117\1\20\1\75"+
    "\1\101\1\17\1\15\1\105\1\74\1\110\1\73\1\4\1\124\1\102"+
    "\1\100\1\16\1\104\1\112\1\4\1\72\1\76\1\21\1\103\1\111"+
    "\1\71\1\107\1\77\1\4\1\120\1\31\1\121\1\52\1\12\1\10"+
    "\1\55\1\65\1\45\1\56\1\42\1\60\1\41\1\63\1\61\1\4"+
    "\1\66\1\37\1\46\1\44\1\54\1\47\1\43\1\57\1\62\1\40"+
    "\1\67\1\13\1\122\1\35\1\123\1\4\1\125\1\51\1\126\1\30"+
    "\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\0\1\3\1\4\11\0\2\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\11\1\10"+
    "\1\5\11\14\1\15\2\14\4\10\1\16\4\10\3\14"+
    "\12\10\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\10\1\26\1\27\1\30\1\1\3\2\1\31\1\11"+
    "\1\31\2\14\4\31\1\16\17\31\1\26\1\11\2\3"+
    "\1\32\1\33\1\34\2\35\1\36\1\37\1\40\1\41"+
    "\2\42\1\43\2\44\1\45\1\0\1\13\2\11\1\0"+
    "\1\46\1\10\1\14\1\47\1\50\7\0\2\51\1\0"+
    "\1\10\3\14\6\10\1\16\1\10\1\52\1\53\1\14"+
    "\5\10\1\54\14\10\3\55\2\56\1\0\1\10\1\2"+
    "\2\11\1\46\2\31\1\14\6\31\1\16\1\31\1\52"+
    "\1\53\1\14\22\31\3\11\6\10\1\0\1\10\13\0"+
    "\1\57\3\0\12\10\1\53\5\10\1\0\5\55\1\0"+
    "\1\55\1\0\1\10\1\2\17\31\1\53\6\31\6\10"+
    "\1\46\1\10\2\0\1\60\10\0\11\10\13\0\1\61"+
    "\16\31\5\10\1\0\1\60\2\0\1\57\7\10\11\0"+
    "\1\61\12\31\3\10\1\0\2\10\11\0\4\31\1\62"+
    "\1\63\1\10\11\0\1\63\1\31\61\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[464];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\127\0\256\0\u0105\0\u015c\0\u01b3\0\u020a\0\u0261"+
    "\0\u02b8\0\u030f\0\u0366\0\u03bd\0\u0414\0\u046b\0\u04c2\0\u0519"+
    "\0\u0570\0\u05c7\0\u0570\0\u061e\0\u0675\0\u06cc\0\u0570\0\u0723"+
    "\0\u077a\0\u07d1\0\u0828\0\u0570\0\u087f\0\u08d6\0\u092d\0\u0984"+
    "\0\u09db\0\u0a32\0\u0a89\0\u0ae0\0\u0b37\0\u0b8e\0\u0be5\0\u0c3c"+
    "\0\u0c93\0\u0cea\0\u0d41\0\u0d98\0\u0def\0\u0e46\0\u0e9d\0\u0ef4"+
    "\0\u0f4b\0\u0fa2\0\u0ff9\0\u1050\0\u10a7\0\u10fe\0\u1155\0\u11ac"+
    "\0\u1203\0\u125a\0\u12b1\0\u1308\0\u135f\0\u13b6\0\u0570\0\u0570"+
    "\0\u0570\0\u140d\0\u0570\0\u0570\0\u1464\0\u0675\0\u0570\0\u0570"+
    "\0\u0570\0\u14bb\0\u0570\0\u1512\0\u1569\0\u15c0\0\u1617\0\u166e"+
    "\0\u16c5\0\u171c\0\u1773\0\u17ca\0\u1821\0\u1878\0\u18cf\0\u1926"+
    "\0\u197d\0\u19d4\0\u1a2b\0\u1a82\0\u1ad9\0\u1b30\0\u1b87\0\u1bde"+
    "\0\u1c35\0\u1c8c\0\u1ce3\0\u1d3a\0\u1d91\0\u1569\0\u1de8\0\u1e3f"+
    "\0\u1e96\0\u0570\0\u0570\0\u1eed\0\u0570\0\u1f44\0\u0570\0\u0570"+
    "\0\u0570\0\u0570\0\u0570\0\u1f9b\0\u0570\0\u0570\0\u1ff2\0\u0570"+
    "\0\u2049\0\u0570\0\u20a0\0\u20f7\0\u214e\0\u21a5\0\u21fc\0\u2253"+
    "\0\u22aa\0\u0570\0\u2301\0\u2358\0\u23af\0\u2406\0\u245d\0\u24b4"+
    "\0\u250b\0\u2562\0\u0570\0\u25b9\0\u2610\0\u2667\0\u26be\0\u0675"+
    "\0\u2715\0\u276c\0\u27c3\0\u281a\0\u2871\0\u28c8\0\u291f\0\u2976"+
    "\0\u0675\0\u0675\0\u29cd\0\u2a24\0\u2a7b\0\u2ad2\0\u2b29\0\u2b80"+
    "\0\u0570\0\u2bd7\0\u2c2e\0\u2c85\0\u2cdc\0\u2d33\0\u2d8a\0\u2de1"+
    "\0\u2e38\0\u2e8f\0\u2ee6\0\u2f3d\0\u2f94\0\u2feb\0\u0570\0\u3042"+
    "\0\u3099\0\u0570\0\u30f0\0\u3147\0\u319e\0\u31f5\0\u324c\0\u32a3"+
    "\0\u32fa\0\u3351\0\u1569\0\u33a8\0\u33ff\0\u3456\0\u34ad\0\u3504"+
    "\0\u355b\0\u35b2\0\u3609\0\u1569\0\u1569\0\u3660\0\u36b7\0\u370e"+
    "\0\u3765\0\u37bc\0\u3813\0\u386a\0\u38c1\0\u3918\0\u396f\0\u39c6"+
    "\0\u3a1d\0\u3a74\0\u3acb\0\u3b22\0\u3b79\0\u3bd0\0\u3c27\0\u3c7e"+
    "\0\u3cd5\0\u3d2c\0\u214e\0\u3d83\0\u3dda\0\u3e31\0\u3e88\0\u3edf"+
    "\0\u3f36\0\u3f8d\0\u3fe4\0\u403b\0\u4092\0\u40e9\0\u4140\0\u4197"+
    "\0\u41ee\0\u4245\0\u429c\0\u42f3\0\u434a\0\u26be\0\u43a1\0\u43f8"+
    "\0\u444f\0\u44a6\0\u44fd\0\u4554\0\u45ab\0\u4602\0\u4659\0\u46b0"+
    "\0\u4707\0\u475e\0\u47b5\0\u480c\0\u4863\0\u48ba\0\u4911\0\u4968"+
    "\0\u49bf\0\u4a16\0\u4a6d\0\u4ac4\0\u4b1b\0\u4b72\0\u4bc9\0\u4c20"+
    "\0\u4c77\0\u4cce\0\u4d25\0\u4d7c\0\u4dd3\0\u4e2a\0\u4e81\0\u4ed8"+
    "\0\u4f2f\0\u4f86\0\u4fdd\0\u5034\0\u508b\0\u50e2\0\u5139\0\u5190"+
    "\0\u51e7\0\u523e\0\u5295\0\u52ec\0\u5343\0\u539a\0\u53f1\0\u5448"+
    "\0\u549f\0\u54f6\0\u554d\0\u55a4\0\u55fb\0\u5652\0\u56a9\0\u5700"+
    "\0\u5757\0\u57ae\0\u5805\0\u585c\0\u58b3\0\u590a\0\u5961\0\u59b8"+
    "\0\u5a0f\0\u5a66\0\u5abd\0\u5b14\0\u5b6b\0\u5bc2\0\u5c19\0\u5c70"+
    "\0\u5cc7\0\u5d1e\0\u5d75\0\u5dcc\0\u5e23\0\u5e7a\0\u5ed1\0\u5f28"+
    "\0\u5f7f\0\u5fd6\0\u602d\0\u6084\0\u60db\0\u6132\0\u6189\0\u61e0"+
    "\0\u6237\0\u628e\0\u62e5\0\u633c\0\u6393\0\u63ea\0\u6441\0\u6498"+
    "\0\u64ef\0\u6546\0\u659d\0\u65f4\0\u664b\0\u66a2\0\u66f9\0\u6750"+
    "\0\u67a7\0\u67fe\0\u6855\0\u68ac\0\u6903\0\u695a\0\u69b1\0\u0570"+
    "\0\u6a08\0\u6a5f\0\u0570\0\u6ab6\0\u6b0d\0\u6b64\0\u6bbb\0\u6c12"+
    "\0\u6c69\0\u6cc0\0\u6d17\0\u6d6e\0\u6dc5\0\u6e1c\0\u6e73\0\u6eca"+
    "\0\u6f21\0\u6f78\0\u6fcf\0\u0570\0\u7026\0\u707d\0\u70d4\0\u712b"+
    "\0\u7182\0\u71d9\0\u7230\0\u7287\0\u72de\0\u7335\0\u738c\0\u73e3"+
    "\0\u743a\0\u7491\0\u74e8\0\u753f\0\u7596\0\u75ed\0\u7644\0\u769b"+
    "\0\u76f2\0\u7749\0\u77a0\0\u77f7\0\u784e\0\u78a5\0\u78fc\0\u7953"+
    "\0\u79aa\0\u0675\0\u0675\0\u7a01\0\u7a58\0\u7aaf\0\u7b06\0\u7b5d"+
    "\0\u7bb4\0\u7c0b\0\u7c62\0\u7cb9\0\u7d10\0\u1569\0\u7d67\0\u7dbe"+
    "\0\u7e15\0\u7e6c\0\u7ec3\0\u7f1a\0\u7f71\0\u7fc8\0\u801f\0\u8076"+
    "\0\u80cd\0\u8124\0\u817b\0\u81d2\0\u8229\0\u8280\0\u82d7\0\u832e"+
    "\0\u8385\0\u83dc\0\u8433\0\u848a\0\u84e1\0\u8538\0\u858f\0\u85e6"+
    "\0\u863d\0\u8694\0\u86eb\0\u8742\0\u8799\0\u87f0\0\u8847\0\u889e"+
    "\0\u88f5\0\u894c\0\u89a3\0\u89fa\0\u8a51\0\u8aa8\0\u8aff\0\u8b56"+
    "\0\u8bad\0\u8c04\0\u8c5b\0\u8cb2\0\u8d09\0\u8d60\0\u8db7\0\u8e0e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[464];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\21\1\22\1\23\1\24\1\25\1\26\3\27\1\30"+
    "\1\31\1\32\1\33\5\25\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\34\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\34\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\25\1\26\1\73"+
    "\1\74\1\75\1\76\15\25\1\26\4\25\1\77\1\100"+
    "\1\26\1\101\1\102\1\103\1\104\1\105\1\106\1\25"+
    "\1\107\1\110\2\2\1\111\124\2\2\112\1\113\27\112"+
    "\1\114\74\112\1\21\1\22\1\23\1\24\1\115\1\26"+
    "\3\27\1\30\1\116\1\117\1\33\5\115\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\34\1\120\1\44"+
    "\1\45\1\121\1\47\1\122\1\123\1\124\1\125\1\126"+
    "\1\127\1\130\1\131\1\132\1\61\1\62\1\34\1\63"+
    "\1\133\1\134\1\135\1\136\1\137\1\140\1\141\1\115"+
    "\1\26\1\142\1\143\1\144\1\76\15\115\1\26\4\115"+
    "\1\77\1\100\1\26\1\101\1\102\1\103\1\104\1\145"+
    "\1\146\1\115\1\107\1\110\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\3\27\1\30\1\147\1\32\1\33\5\25"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\34"+
    "\1\120\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\34\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\25\1\26\1\73\1\74\1\75\1\76\15\25"+
    "\1\26\4\25\1\77\1\100\1\26\1\101\1\102\1\103"+
    "\1\104\1\105\1\106\1\25\1\107\1\110\1\150\1\151"+
    "\1\152\124\150\2\7\1\0\124\7\1\153\3\154\123\153"+
    "\1\155\1\156\125\155\2\157\1\0\124\157\1\160\3\154"+
    "\123\160\1\161\3\154\123\161\1\162\3\154\123\162\1\163"+
    "\1\164\125\163\2\165\1\0\124\165\1\166\1\167\43\166"+
    "\1\170\10\166\2\170\2\166\1\170\44\166\131\0\1\23"+
    "\127\0\1\24\127\0\2\25\4\0\2\25\1\0\5\25"+
    "\13\0\1\25\1\0\11\25\4\0\14\25\1\0\22\25"+
    "\2\0\1\25\4\0\3\25\7\0\1\26\4\0\1\26"+
    "\1\0\1\171\47\0\1\26\21\0\1\26\6\0\1\26"+
    "\11\0\2\30\1\172\124\30\4\0\1\25\1\173\4\0"+
    "\1\174\1\25\1\175\5\25\13\0\1\25\1\0\11\25"+
    "\4\0\10\25\1\173\3\25\1\0\15\25\1\173\4\25"+
    "\2\0\1\173\4\0\3\25\6\0\1\25\1\176\4\0"+
    "\2\25\1\0\5\25\13\0\1\25\1\0\11\25\4\0"+
    "\1\25\1\177\6\25\1\176\3\25\1\0\15\25\1\176"+
    "\4\25\2\0\1\176\4\0\3\25\16\0\1\200\135\0"+
    "\2\34\5\0\1\34\120\0\1\34\5\0\1\34\121\0"+
    "\1\34\4\0\1\34\100\0\1\201\5\0\2\201\1\0"+
    "\5\201\4\0\1\34\3\0\1\34\2\0\1\201\1\0"+
    "\11\201\4\0\10\201\1\0\3\201\1\0\15\201\1\0"+
    "\4\201\7\0\3\201\32\0\1\34\1\0\1\34\124\0"+
    "\1\34\122\0\1\202\3\0\1\34\1\0\1\34\7\0"+
    "\1\203\4\0\1\204\4\0\1\205\3\0\1\206\1\207"+
    "\1\0\1\210\1\0\1\211\74\0\1\34\77\0\1\212"+
    "\5\0\2\212\1\0\5\212\1\0\1\213\1\0\1\213"+
    "\1\0\1\213\5\0\1\212\1\0\11\212\2\0\1\214"+
    "\1\0\10\212\1\0\3\212\1\0\15\212\1\0\4\212"+
    "\7\0\3\212\6\0\2\25\4\0\2\25\1\0\5\25"+
    "\13\0\1\25\1\0\11\25\4\0\1\215\13\25\1\0"+
    "\22\25\2\0\1\25\4\0\3\25\34\0\1\216\3\0"+
    "\1\217\74\0\2\25\4\0\2\25\1\0\5\25\13\0"+
    "\1\25\1\0\1\25\1\220\1\25\1\220\5\25\4\0"+
    "\1\221\1\222\12\25\1\0\22\25\2\0\1\25\4\0"+
    "\3\25\6\0\2\25\4\0\2\25\1\0\5\25\13\0"+
    "\1\25\1\0\11\25\4\0\3\25\1\106\10\25\1\0"+
    "\22\25\2\0\1\25\4\0\3\25\6\0\2\25\4\0"+
    "\2\25\1\0\5\25\13\0\1\25\1\0\1\25\1\220"+
    "\1\25\1\220\5\25\4\0\3\25\1\223\10\25\1\0"+
    "\22\25\2\0\1\25\4\0\3\25\6\0\2\25\4\0"+
    "\1\25\1\224\1\0\5\25\13\0\1\225\1\0\1\226"+
    "\3\25\1\220\4\25\4\0\14\25\1\0\22\25\2\0"+
    "\1\25\4\0\3\25\6\0\2\25\4\0\2\25\1\0"+
    "\5\25\13\0\1\227\1\0\1\25\1\230\2\25\1\227"+
    "\4\25\4\0\14\25\1\0\22\25\2\0\1\25\4\0"+
    "\1\231\1\232\1\25\6\0\2\25\4\0\2\25\1\0"+
    "\5\25\13\0\1\25\1\0\3\25\1\233\5\25\4\0"+
    "\1\234\13\25\1\0\22\25\2\0\1\25\4\0\3\25"+
    "\6\0\2\25\4\0\2\25\1\0\5\25\13\0\1\25"+
    "\1\0\7\25\1\235\1\25\4\0\1\236\13\25\1\0"+
    "\22\25\2\0\1\25\4\0\3\25\6\0\2\25\4\0"+
    "\2\25\1\0\5\25\13\0\1\25\1\0\11\25\4\0"+
    "\1\25\1\237\12\25\1\0\22\25\2\0\1\25\4\0"+
    "\1\25\1\232\1\25\6\0\2\25\4\0\2\25\1\0"+
    "\5\25\13\0\1\25\1\0\11\25\4\0\1\237\1\240"+
    "\12\25\1\0\22\25\2\0\1\25\4\0\3\25\52\0"+
    "\1\34\127\0\1\34\130\0\1\241\57\0\2\25\4\0"+
    "\2\25\1\0\5\25\13\0\1\25\1\0\11\25\4\0"+
    "\3\25\1\220\7\25\1\230\1\0\22\25\2\0\1\25"+
    "\4\0\3\25\6\0\2\25\4\0\2\25\1\0\5\25"+
    "\13\0\1\25\1\0\5\25\1\242\3\25\4\0\14\25"+
    "\1\0\22\25\2\0\1\25\4\0\3\25\6\0\2\25"+
    "\4\0\2\25\1\0\5\25\13\0\1\25\1\0\3\25"+
    "\1\243\5\25\4\0\1\232\13\25\1\0\22\25\2\0"+
    "\1\25\4\0\3\25\6\0\2\25\4\0\2\25\1\0"+
    "\5\25\13\0\1\25\1\0\3\25\1\244\5\25\4\0"+
    "\14\25\1\0\22\25\2\0\1\25\4\0\3\25\6\0"+
    "\2\25\4\0\2\25\1\0\5\25\13\0\1\25\1\0"+
    "\11\25\4\0\1\245\13\25\1\0\22\25\2\0\1\25"+
    "\4\0\3\25\6\0\2\25\4\0\2\25\1\0\5\25"+
    "\13\0\1\25\1\0\11\25\4\0\4\25\1\232\7\25"+
    "\1\0\22\25\2\0\1\25\4\0\3\25\6\0\2\25"+
    "\4\0\2\25\1\0\5\25\13\0\1\25\1\0\6\25"+
    "\1\246\2\25\4\0\1\247\6\25\1\250\3\25\1\251"+
    "\1\0\22\25\2\0\1\25\4\0\3\25\6\0\2\25"+
    "\4\0\2\25\1\0\5\25\13\0\1\25\1\0\11\25"+
    "\4\0\3\25\1\252\10\25\1\0\22\25\2\0\1\25"+
    "\4\0\3\25\6\0\2\25\4\0\2\25\1\0\5\25"+
    "\13\0\1\25\1\0\3\25\1\253\5\25\4\0\14\25"+
    "\1\0\22\25\2\0\1\25\4\0\3\25\6\0\2\25"+
    "\4\0\2\25\1\0\5\25\13\0\1\25\1\0\5\25"+
    "\1\254\3\25\4\0\6\25\1\255\5\25\1\0\22\25"+
    "\2\0\1\25\4\0\3\25\6\0\1\256\1\0\4\257"+
    "\2\256\1\257\5\256\7\257\1\0\3\257\1\256\1\257"+
    "\11\256\2\257\1\260\1\257\10\256\1\0\3\256\1\257"+
    "\15\256\1\0\4\256\7\257\3\256\6\0\1\261\5\0"+
    "\2\261\1\0\5\261\1\0\1\262\1\0\1\262\1\0"+
    "\1\262\5\0\1\261\1\0\11\261\2\0\1\263\1\0"+
    "\10\261\1\0\3\261\1\0\15\261\1\0\4\261\7\0"+
    "\3\261\6\0\2\25\4\0\2\25\1\0\5\25\13\0"+
    "\1\25\1\0\11\25\4\0\7\25\1\264\4\25\1\0"+
    "\22\25\2\0\1\25\4\0\3\25\2\0\2\112\1\113"+
    "\126\112\1\113\42\112\1\265\61\112\4\0\2\115\4\0"+
    "\2\115\1\0\5\115\13\0\1\115\1\0\11\115\4\0"+
    "\14\115\1\0\22\115\2\0\1\115\4\0\3\115\6\0"+
    "\1\115\1\266\4\0\1\267\1\115\1\175\5\115\13\0"+
    "\1\115\1\0\11\115\4\0\10\115\1\266\3\115\1\0"+
    "\15\115\1\266\4\115\2\0\1\266\4\0\3\115\6\0"+
    "\1\115\1\270\4\0\2\115\1\0\5\115\13\0\1\115"+
    "\1\0\11\115\4\0\1\115\1\271\6\115\1\270\3\115"+
    "\1\0\15\115\1\270\4\115\2\0\1\270\4\0\3\115"+
    "\26\0\1\202\3\0\1\34\1\0\1\34\100\0\2\115"+
    "\4\0\2\115\1\0\5\115\13\0\1\115\1\0\11\115"+
    "\4\0\1\272\13\115\1\0\22\115\2\0\1\115\4\0"+
    "\3\115\6\0\2\115\4\0\2\115\1\0\5\115\13\0"+
    "\1\115\1\0\1\115\1\273\1\115\1\273\5\115\4\0"+
    "\1\274\1\275\12\115\1\0\22\115\2\0\1\115\4\0"+
    "\3\115\6\0\2\115\4\0\2\115\1\0\5\115\13\0"+
    "\1\115\1\0\11\115\4\0\3\115\1\146\10\115\1\0"+
    "\22\115\2\0\1\115\4\0\3\115\6\0\2\115\4\0"+
    "\2\115\1\0\5\115\13\0\1\115\1\0\1\115\1\273"+
    "\1\115\1\273\5\115\4\0\3\115\1\276\10\115\1\0"+
    "\22\115\2\0\1\115\4\0\3\115\6\0\2\115\4\0"+
    "\1\115\1\277\1\0\5\115\13\0\1\300\1\0\1\301"+
    "\3\115\1\273\4\115\4\0\14\115\1\0\22\115\2\0"+
    "\1\115\4\0\3\115\6\0\2\115\4\0\2\115\1\0"+
    "\5\115\13\0\1\302\1\0\1\115\1\303\2\115\1\302"+
    "\4\115\4\0\14\115\1\0\22\115\2\0\1\115\4\0"+
    "\1\304\1\305\1\115\6\0\2\115\4\0\2\115\1\0"+
    "\5\115\13\0\1\115\1\0\3\115\1\306\5\115\4\0"+
    "\1\307\13\115\1\0\22\115\2\0\1\115\4\0\3\115"+
    "\6\0\2\115\4\0\2\115\1\0\5\115\13\0\1\115"+
    "\1\0\7\115\1\310\1\115\4\0\1\311\13\115\1\0"+
    "\22\115\2\0\1\115\4\0\3\115\6\0\2\115\4\0"+
    "\2\115\1\0\5\115\13\0\1\115\1\0\11\115\4\0"+
    "\1\115\1\312\12\115\1\0\22\115\2\0\1\115\4\0"+
    "\1\115\1\305\1\115\6\0\2\115\4\0\2\115\1\0"+
    "\5\115\13\0\1\115\1\0\11\115\4\0\1\312\1\313"+
    "\12\115\1\0\22\115\2\0\1\115\4\0\3\115\6\0"+
    "\2\115\4\0\2\115\1\0\5\115\13\0\1\115\1\0"+
    "\11\115\4\0\3\115\1\273\7\115\1\303\1\0\22\115"+
    "\2\0\1\115\4\0\3\115\6\0\2\115\4\0\2\115"+
    "\1\0\5\115\13\0\1\115\1\0\5\115\1\314\3\115"+
    "\4\0\14\115\1\0\22\115\2\0\1\115\4\0\3\115"+
    "\6\0\2\115\4\0\2\115\1\0\5\115\13\0\1\115"+
    "\1\0\3\115\1\315\5\115\4\0\1\305\13\115\1\0"+
    "\22\115\2\0\1\115\4\0\3\115\6\0\2\115\4\0"+
    "\2\115\1\0\5\115\13\0\1\115\1\0\3\115\1\316"+
    "\5\115\4\0\14\115\1\0\22\115\2\0\1\115\4\0"+
    "\3\115\6\0\2\115\4\0\2\115\1\0\5\115\13\0"+
    "\1\115\1\0\11\115\4\0\1\317\13\115\1\0\22\115"+
    "\2\0\1\115\4\0\3\115\6\0\2\115\4\0\2\115"+
    "\1\0\5\115\13\0\1\115\1\0\11\115\4\0\4\115"+
    "\1\305\7\115\1\0\22\115\2\0\1\115\4\0\3\115"+
    "\6\0\2\115\4\0\2\115\1\0\5\115\13\0\1\115"+
    "\1\0\6\115\1\320\2\115\4\0\1\321\6\115\1\322"+
    "\3\115\1\323\1\0\22\115\2\0\1\115\4\0\3\115"+
    "\6\0\2\115\4\0\2\115\1\0\5\115\13\0\1\115"+
    "\1\0\11\115\4\0\3\115\1\324\10\115\1\0\22\115"+
    "\2\0\1\115\4\0\3\115\6\0\2\115\4\0\2\115"+
    "\1\0\5\115\13\0\1\115\1\0\3\115\1\325\5\115"+
    "\4\0\14\115\1\0\22\115\2\0\1\115\4\0\3\115"+
    "\6\0\2\115\4\0\2\115\1\0\5\115\13\0\1\115"+
    "\1\0\5\115\1\326\3\115\4\0\6\115\1\327\5\115"+
    "\1\0\22\115\2\0\1\115\4\0\3\115\6\0\2\115"+
    "\4\0\2\115\1\0\5\115\13\0\1\115\1\0\11\115"+
    "\4\0\7\115\1\330\4\115\1\0\22\115\2\0\1\115"+
    "\4\0\3\115\6\0\1\25\1\173\4\0\1\331\1\25"+
    "\1\175\5\25\13\0\1\25\1\0\11\25\4\0\10\25"+
    "\1\173\3\25\1\0\15\25\1\173\4\25\2\0\1\173"+
    "\4\0\3\25\2\0\2\150\1\0\126\150\1\152\124\150"+
    "\1\0\3\154\125\0\1\155\126\0\1\163\126\0\1\166"+
    "\131\0\1\332\4\0\1\333\51\0\1\332\21\0\1\332"+
    "\6\0\1\332\15\0\1\25\1\173\4\0\1\173\1\25"+
    "\1\175\5\25\13\0\1\25\1\0\11\25\4\0\10\25"+
    "\1\173\3\25\1\0\15\25\1\173\4\25\2\0\1\173"+
    "\4\0\3\25\6\0\1\25\1\173\4\0\1\173\1\25"+
    "\1\175\1\334\1\25\1\335\2\25\13\0\1\25\1\0"+
    "\11\25\4\0\10\25\1\173\3\25\1\0\5\25\1\336"+
    "\3\25\1\337\2\25\1\340\1\173\3\25\1\341\2\0"+
    "\1\173\4\0\3\25\7\0\1\333\4\0\1\333\51\0"+
    "\1\333\21\0\1\333\6\0\1\333\15\0\1\25\1\176"+
    "\4\0\1\176\1\25\1\342\5\25\13\0\1\25\1\0"+
    "\11\25\4\0\10\25\1\176\3\25\1\0\15\25\1\176"+
    "\4\25\2\0\1\176\4\0\3\25\6\0\2\25\4\0"+
    "\2\25\1\0\5\25\13\0\1\25\1\0\1\343\10\25"+
    "\4\0\14\25\1\0\22\25\2\0\1\25\4\0\3\25"+
    "\16\0\1\34\116\0\2\201\4\0\2\201\1\0\5\201"+
    "\13\0\1\201\1\0\11\201\3\0\1\344\14\201\1\0"+
    "\22\201\2\0\1\201\4\0\3\201\46\0\1\345\136\0"+
    "\1\346\65\0\1\347\167\0\1\350\112\0\1\351\130\0"+
    "\1\352\126\0\1\353\12\0\1\354\55\0\2\212\4\0"+
    "\2\212\1\0\5\212\13\0\1\212\1\0\11\212\3\0"+
    "\1\355\14\212\1\0\22\212\2\0\1\212\4\0\3\212"+
    "\112\0\1\213\22\0\2\25\4\0\2\25\1\0\5\25"+
    "\13\0\1\25\1\0\11\25\4\0\3\25\1\220\10\25"+
    "\1\0\22\25\2\0\1\25\4\0\3\25\26\0\1\34"+
    "\105\0\1\356\1\357\1\0\1\360\1\361\1\362\1\0"+
    "\2\357\1\0\5\357\13\0\1\357\1\0\11\357\4\0"+
    "\10\357\1\0\3\357\1\0\15\357\1\0\4\357\7\0"+
    "\3\357\6\0\2\25\4\0\2\25\1\0\5\25\13\0"+
    "\1\25\1\0\6\25\1\224\2\25\4\0\14\25\1\0"+
    "\22\25\2\0\1\25\4\0\3\25\6\0\2\25\4\0"+
    "\2\25\1\0\5\25\13\0\1\25\1\0\11\25\4\0"+
    "\6\25\1\363\5\25\1\0\22\25\2\0\1\25\4\0"+
    "\3\25\6\0\2\25\4\0\2\25\1\0\5\25\13\0"+
    "\1\25\1\0\3\25\1\237\5\25\4\0\14\25\1\0"+
    "\22\25\2\0\1\25\4\0\3\25\6\0\2\25\4\0"+
    "\2\25\1\0\5\25\13\0\1\25\1\0\11\25\4\0"+
    "\1\25\1\364\12\25\1\0\22\25\2\0\1\25\4\0"+
    "\3\25\6\0\2\25\4\0\2\25\1\0\5\25\13\0"+
    "\1\25\1\0\11\25\4\0\5\25\1\365\6\25\1\0"+
    "\22\25\2\0\1\25\4\0\3\25\6\0\2\25\4\0"+
    "\2\25\1\0\5\25\13\0\1\25\1\0\11\25\4\0"+
    "\6\25\1\366\5\25\1\0\22\25\2\0\1\25\4\0"+
    "\3\25\6\0\2\25\4\0\2\25\1\0\5\25\13\0"+
    "\1\25\1\0\1\25\1\230\7\25\4\0\14\25\1\0"+
    "\22\25\2\0\1\25\4\0\1\25\1\232\1\25\6\0"+
    "\2\25\4\0\2\25\1\0\5\25\13\0\1\25\1\0"+
    "\11\25\4\0\3\25\1\232\10\25\1\0\22\25\2\0"+
    "\1\25\4\0\3\25\6\0\2\25\4\0\2\25\1\0"+
    "\5\25\13\0\1\363\1\0\11\25\4\0\14\25\1\0"+
    "\22\25\2\0\1\25\4\0\3\25\6\0\2\25\4\0"+
    "\2\25\1\0\5\25\13\0\1\25\1\0\1\25\1\220"+
    "\7\25\4\0\14\25\1\0\22\25\2\0\1\25\4\0"+
    "\3\25\6\0\2\25\4\0\2\25\1\0\5\25\13\0"+
    "\1\25\1\0\10\25\1\220\4\0\14\25\1\0\22\25"+
    "\2\0\1\25\4\0\3\25\6\0\2\25\4\0\2\25"+
    "\1\0\5\25\13\0\1\25\1\0\5\25\1\367\3\25"+
    "\4\0\14\25\1\0\22\25\2\0\1\25\4\0\3\25"+
    "\6\0\2\25\4\0\2\25\1\0\5\25\13\0\1\25"+
    "\1\0\10\25\1\232\4\0\14\25\1\0\22\25\2\0"+
    "\1\25\4\0\3\25\6\0\2\25\4\0\2\25\1\0"+
    "\5\25\13\0\1\25\1\0\6\25\1\370\2\25\4\0"+
    "\14\25\1\0\22\25\2\0\1\25\4\0\3\25\6\0"+
    "\2\25\4\0\2\25\1\0\5\25\13\0\1\25\1\0"+
    "\11\25\4\0\2\25\1\220\11\25\1\0\22\25\2\0"+
    "\1\25\4\0\3\25\6\0\2\25\4\0\2\25\1\0"+
    "\5\25\13\0\1\25\1\0\11\25\4\0\4\25\1\371"+
    "\7\25\1\0\22\25\2\0\1\25\4\0\3\25\6\0"+
    "\2\25\4\0\2\25\1\0\5\25\13\0\1\25\1\0"+
    "\1\25\1\372\2\25\1\373\4\25\4\0\2\25\1\374"+
    "\1\25\1\220\7\25\1\0\22\25\2\0\1\25\4\0"+
    "\3\25\6\0\2\25\4\0\2\25\1\0\5\25\13\0"+
    "\1\25\1\0\11\25\4\0\3\25\1\375\10\25\1\0"+
    "\22\25\2\0\1\25\4\0\3\25\6\0\2\25\4\0"+
    "\2\25\1\0\5\25\13\0\1\25\1\0\11\25\4\0"+
    "\1\25\1\376\12\25\1\0\22\25\2\0\1\25\4\0"+
    "\3\25\6\0\2\25\4\0\2\25\1\0\5\25\13\0"+
    "\1\25\1\0\11\25\4\0\3\25\1\363\10\25\1\0"+
    "\22\25\2\0\1\25\4\0\3\25\6\0\2\25\4\0"+
    "\2\25\1\0\5\25\13\0\1\25\1\0\11\25\4\0"+
    "\5\25\1\377\6\25\1\0\22\25\2\0\1\25\4\0"+
    "\3\25\6\0\2\25\4\0\2\25\1\0\5\25\13\0"+
    "\1\25\1\0\11\25\4\0\11\25\1\232\2\25\1\0"+
    "\22\25\2\0\1\25\4\0\3\25\6\0\2\25\4\0"+
    "\2\25\1\0\5\25\13\0\1\25\1\0\3\25\1\u0100"+
    "\5\25\4\0\14\25\1\0\22\25\2\0\1\25\4\0"+
    "\3\25\6\0\2\25\4\0\2\25\1\0\5\25\13\0"+
    "\1\25\1\0\11\25\4\0\14\25\1\0\22\25\2\0"+
    "\1\25\4\0\1\25\1\u0101\1\25\6\0\2\25\4\0"+
    "\2\25\1\0\5\25\13\0\1\25\1\0\1\25\1\u0102"+
    "\7\25\4\0\14\25\1\0\22\25\2\0\1\25\4\0"+
    "\3\25\6\0\2\25\4\0\2\25\1\0\5\25\13\0"+
    "\1\25\1\0\3\25\1\232\5\25\4\0\14\25\1\0"+
    "\22\25\2\0\1\25\4\0\3\25\6\0\2\256\4\0"+
    "\2\256\1\0\5\256\13\0\1\256\1\0\11\256\3\0"+
    "\1\u0103\14\256\1\0\22\256\2\0\1\256\4\0\3\256"+
    "\17\0\1\u0104\3\257\1\u0105\47\0\1\u0106\1\u0107\1\257"+
    "\2\0\1\257\1\0\1\257\1\u0108\1\257\1\u0109\1\u010a"+
    "\1\257\1\0\4\257\20\0\2\261\4\0\2\261\1\0"+
    "\5\261\13\0\1\261\1\0\11\261\3\0\1\u010b\14\261"+
    "\1\0\22\261\2\0\1\261\4\0\3\261\112\0\1\262"+
    "\22\0\2\25\4\0\2\25\1\0\5\25\13\0\1\25"+
    "\1\0\11\25\4\0\5\25\1\u010c\6\25\1\0\22\25"+
    "\2\0\1\25\4\0\3\25\2\0\2\112\1\113\64\112"+
    "\1\u010d\37\112\4\0\1\115\1\266\4\0\1\266\1\115"+
    "\1\175\5\115\13\0\1\115\1\0\11\115\4\0\10\115"+
    "\1\266\3\115\1\0\15\115\1\266\4\115\2\0\1\266"+
    "\4\0\3\115\6\0\1\115\1\266\4\0\1\266\1\115"+
    "\1\175\5\115\13\0\1\115\1\0\11\115\4\0\10\115"+
    "\1\266\3\115\1\0\5\115\1\u010e\3\115\1\u010f\2\115"+
    "\1\u0110\1\266\3\115\1\u0111\2\0\1\266\4\0\3\115"+
    "\6\0\1\115\1\270\4\0\1\270\1\115\1\342\5\115"+
    "\13\0\1\115\1\0\11\115\4\0\10\115\1\270\3\115"+
    "\1\0\15\115\1\270\4\115\2\0\1\270\4\0\3\115"+
    "\6\0\2\115\4\0\2\115\1\0\5\115\13\0\1\115"+
    "\1\0\1\u0112\10\115\4\0\14\115\1\0\22\115\2\0"+
    "\1\115\4\0\3\115\6\0\2\115\4\0\2\115\1\0"+
    "\5\115\13\0\1\115\1\0\11\115\4\0\3\115\1\273"+
    "\10\115\1\0\22\115\2\0\1\115\4\0\3\115\6\0"+
    "\2\115\4\0\2\115\1\0\5\115\13\0\1\115\1\0"+
    "\6\115\1\277\2\115\4\0\14\115\1\0\22\115\2\0"+
    "\1\115\4\0\3\115\6\0\2\115\4\0\2\115\1\0"+
    "\5\115\13\0\1\115\1\0\11\115\4\0\6\115\1\u0113"+
    "\5\115\1\0\22\115\2\0\1\115\4\0\3\115\6\0"+
    "\2\115\4\0\2\115\1\0\5\115\13\0\1\115\1\0"+
    "\3\115\1\312\5\115\4\0\14\115\1\0\22\115\2\0"+
    "\1\115\4\0\3\115\6\0\2\115\4\0\2\115\1\0"+
    "\5\115\13\0\1\115\1\0\11\115\4\0\1\115\1\u0114"+
    "\12\115\1\0\22\115\2\0\1\115\4\0\3\115\6\0"+
    "\2\115\4\0\2\115\1\0\5\115\13\0\1\115\1\0"+
    "\11\115\4\0\5\115\1\u0115\6\115\1\0\22\115\2\0"+
    "\1\115\4\0\3\115\6\0\2\115\4\0\2\115\1\0"+
    "\5\115\13\0\1\115\1\0\11\115\4\0\6\115\1\u0116"+
    "\5\115\1\0\22\115\2\0\1\115\4\0\3\115\6\0"+
    "\2\115\4\0\2\115\1\0\5\115\13\0\1\115\1\0"+
    "\1\115\1\303\7\115\4\0\14\115\1\0\22\115\2\0"+
    "\1\115\4\0\1\115\1\305\1\115\6\0\2\115\4\0"+
    "\2\115\1\0\5\115\13\0\1\115\1\0\11\115\4\0"+
    "\3\115\1\305\10\115\1\0\22\115\2\0\1\115\4\0"+
    "\3\115\6\0\2\115\4\0\2\115\1\0\5\115\13\0"+
    "\1\u0113\1\0\11\115\4\0\14\115\1\0\22\115\2\0"+
    "\1\115\4\0\3\115\6\0\2\115\4\0\2\115\1\0"+
    "\5\115\13\0\1\115\1\0\1\115\1\273\7\115\4\0"+
    "\14\115\1\0\22\115\2\0\1\115\4\0\3\115\6\0"+
    "\2\115\4\0\2\115\1\0\5\115\13\0\1\115\1\0"+
    "\10\115\1\273\4\0\14\115\1\0\22\115\2\0\1\115"+
    "\4\0\3\115\6\0\2\115\4\0\2\115\1\0\5\115"+
    "\13\0\1\115\1\0\5\115\1\u0117\3\115\4\0\14\115"+
    "\1\0\22\115\2\0\1\115\4\0\3\115\6\0\2\115"+
    "\4\0\2\115\1\0\5\115\13\0\1\115\1\0\10\115"+
    "\1\305\4\0\14\115\1\0\22\115\2\0\1\115\4\0"+
    "\3\115\6\0\2\115\4\0\2\115\1\0\5\115\13\0"+
    "\1\115\1\0\6\115\1\u0118\2\115\4\0\14\115\1\0"+
    "\22\115\2\0\1\115\4\0\3\115\6\0\2\115\4\0"+
    "\2\115\1\0\5\115\13\0\1\115\1\0\11\115\4\0"+
    "\2\115\1\273\11\115\1\0\22\115\2\0\1\115\4\0"+
    "\3\115\6\0\2\115\4\0\2\115\1\0\5\115\13\0"+
    "\1\115\1\0\11\115\4\0\4\115\1\u0119\7\115\1\0"+
    "\22\115\2\0\1\115\4\0\3\115\6\0\2\115\4\0"+
    "\2\115\1\0\5\115\13\0\1\115\1\0\1\115\1\u011a"+
    "\2\115\1\u011b\4\115\4\0\2\115\1\u011c\1\115\1\273"+
    "\7\115\1\0\22\115\2\0\1\115\4\0\3\115\6\0"+
    "\2\115\4\0\2\115\1\0\5\115\13\0\1\115\1\0"+
    "\11\115\4\0\3\115\1\u011d\10\115\1\0\22\115\2\0"+
    "\1\115\4\0\3\115\6\0\2\115\4\0\2\115\1\0"+
    "\5\115\13\0\1\115\1\0\11\115\4\0\1\115\1\u011e"+
    "\12\115\1\0\22\115\2\0\1\115\4\0\3\115\6\0"+
    "\2\115\4\0\2\115\1\0\5\115\13\0\1\115\1\0"+
    "\11\115\4\0\3\115\1\u0113\10\115\1\0\22\115\2\0"+
    "\1\115\4\0\3\115\6\0\2\115\4\0\2\115\1\0"+
    "\5\115\13\0\1\115\1\0\11\115\4\0\5\115\1\u011f"+
    "\6\115\1\0\22\115\2\0\1\115\4\0\3\115\6\0"+
    "\2\115\4\0\2\115\1\0\5\115\13\0\1\115\1\0"+
    "\11\115\4\0\11\115\1\305\2\115\1\0\22\115\2\0"+
    "\1\115\4\0\3\115\6\0\2\115\4\0\2\115\1\0"+
    "\5\115\13\0\1\115\1\0\3\115\1\u0120\5\115\4\0"+
    "\14\115\1\0\22\115\2\0\1\115\4\0\3\115\6\0"+
    "\2\115\4\0\2\115\1\0\5\115\13\0\1\115\1\0"+
    "\11\115\4\0\14\115\1\0\22\115\2\0\1\115\4\0"+
    "\1\115\1\u0121\1\115\6\0\2\115\4\0\2\115\1\0"+
    "\5\115\13\0\1\115\1\0\1\115\1\u0122\7\115\4\0"+
    "\14\115\1\0\22\115\2\0\1\115\4\0\3\115\6\0"+
    "\2\115\4\0\2\115\1\0\5\115\13\0\1\115\1\0"+
    "\3\115\1\305\5\115\4\0\14\115\1\0\22\115\2\0"+
    "\1\115\4\0\3\115\6\0\2\115\4\0\2\115\1\0"+
    "\5\115\13\0\1\115\1\0\11\115\4\0\5\115\1\u0123"+
    "\6\115\1\0\22\115\2\0\1\115\4\0\3\115\6\0"+
    "\1\25\1\173\4\0\1\173\1\25\1\175\5\25\13\0"+
    "\1\25\1\0\11\25\4\0\10\25\1\173\3\25\1\0"+
    "\5\25\1\336\3\25\1\337\2\25\1\340\1\173\3\25"+
    "\1\341\2\0\1\173\4\0\3\25\7\0\1\332\4\0"+
    "\1\332\1\0\1\342\47\0\1\332\21\0\1\332\6\0"+
    "\1\332\15\0\2\25\4\0\2\25\1\0\1\25\1\u0124"+
    "\3\25\13\0\1\25\1\0\11\25\4\0\14\25\1\0"+
    "\22\25\2\0\1\25\4\0\3\25\6\0\2\25\4\0"+
    "\2\25\1\0\3\25\1\u0125\1\25\13\0\1\25\1\0"+
    "\11\25\4\0\14\25\1\0\22\25\2\0\1\25\4\0"+
    "\3\25\6\0\2\25\4\0\2\25\1\0\5\25\13\0"+
    "\1\25\1\0\11\25\4\0\14\25\1\0\12\25\1\u0126"+
    "\7\25\2\0\1\25\4\0\3\25\6\0\2\25\4\0"+
    "\2\25\1\0\5\25\13\0\1\25\1\0\11\25\4\0"+
    "\14\25\1\0\2\25\1\u0127\17\25\2\0\1\25\4\0"+
    "\3\25\6\0\2\25\4\0\2\25\1\0\5\25\13\0"+
    "\1\25\1\0\11\25\4\0\14\25\1\0\2\25\1\u0128"+
    "\17\25\2\0\1\25\4\0\3\25\6\0\2\25\4\0"+
    "\2\25\1\0\3\25\1\u0129\1\25\13\0\1\25\1\0"+
    "\11\25\4\0\14\25\1\0\22\25\2\0\1\25\4\0"+
    "\3\25\7\0\1\u012a\56\0\1\u012a\21\0\1\u012a\6\0"+
    "\1\u012a\15\0\2\25\4\0\2\25\1\0\5\25\13\0"+
    "\1\25\1\0\11\25\4\0\13\25\1\u012b\1\0\22\25"+
    "\2\0\1\25\4\0\3\25\55\0\1\u012c\120\0\1\u012d"+
    "\10\0\1\u012e\126\0\1\u012e\112\0\1\350\143\0\1\u012e"+
    "\111\0\1\u012f\141\0\1\u0130\112\0\1\u0131\132\0\1\u0132"+
    "\134\0\1\u0133\57\0\2\357\4\0\2\357\1\0\5\357"+
    "\13\0\1\357\1\0\11\357\4\0\14\357\1\0\22\357"+
    "\2\0\1\357\4\0\3\357\6\0\1\u0134\5\0\2\u0134"+
    "\1\0\5\u0134\13\0\1\u0134\1\0\11\u0134\4\0\10\u0134"+
    "\1\0\3\u0134\1\0\15\u0134\1\0\4\u0134\7\0\3\u0134"+
    "\6\0\1\u0135\5\0\2\u0135\1\0\5\u0135\13\0\1\u0135"+
    "\1\0\11\u0135\4\0\10\u0135\1\0\3\u0135\1\0\15\u0135"+
    "\1\0\4\u0135\7\0\3\u0135\6\0\1\u0136\5\0\2\u0136"+
    "\1\0\5\u0136\13\0\1\u0136\1\0\11\u0136\4\0\10\u0136"+
    "\1\0\3\u0136\1\0\15\u0136\1\0\4\u0136\7\0\3\u0136"+
    "\6\0\2\25\4\0\2\25\1\0\5\25\13\0\1\25"+
    "\1\0\1\25\1\232\7\25\4\0\14\25\1\0\22\25"+
    "\2\0\1\25\4\0\3\25\6\0\2\25\4\0\2\25"+
    "\1\0\5\25\13\0\1\25\1\0\1\232\10\25\4\0"+
    "\14\25\1\0\22\25\2\0\1\25\4\0\3\25\6\0"+
    "\2\25\4\0\2\25\1\0\5\25\13\0\1\25\1\0"+
    "\1\25\1\232\7\25\4\0\6\25\1\u0137\5\25\1\0"+
    "\22\25\2\0\1\25\4\0\3\25\6\0\2\25\4\0"+
    "\2\25\1\0\5\25\13\0\1\25\1\0\3\25\1\232"+
    "\5\25\4\0\5\25\1\71\6\25\1\0\22\25\2\0"+
    "\1\25\4\0\3\25\6\0\2\25\4\0\2\25\1\0"+
    "\5\25\13\0\1\25\1\0\1\25\1\u0138\7\25\4\0"+
    "\14\25\1\0\22\25\2\0\1\25\4\0\3\25\6\0"+
    "\2\25\4\0\2\25\1\0\5\25\13\0\1\25\1\0"+
    "\11\25\4\0\12\25\1\u0139\1\25\1\0\22\25\2\0"+
    "\1\25\4\0\3\25\6\0\2\25\4\0\2\25\1\0"+
    "\5\25\13\0\1\25\1\0\11\25\4\0\5\25\1\u013a"+
    "\6\25\1\0\22\25\2\0\1\25\4\0\3\25\6\0"+
    "\2\25\4\0\2\25\1\0\5\25\13\0\1\25\1\0"+
    "\11\25\4\0\13\25\1\u013b\1\0\22\25\2\0\1\25"+
    "\4\0\3\25\6\0\2\25\4\0\2\25\1\0\5\25"+
    "\13\0\1\25\1\0\11\25\4\0\13\25\1\u013c\1\0"+
    "\22\25\2\0\1\25\4\0\3\25\6\0\2\25\4\0"+
    "\2\25\1\0\5\25\13\0\1\25\1\0\11\25\4\0"+
    "\1\232\13\25\1\0\22\25\2\0\1\25\4\0\3\25"+
    "\6\0\2\25\4\0\2\25\1\0\5\25\13\0\1\25"+
    "\1\0\3\25\1\u013d\5\25\4\0\14\25\1\0\22\25"+
    "\2\0\1\25\4\0\3\25\6\0\2\25\4\0\2\25"+
    "\1\0\5\25\13\0\1\25\1\0\1\u013e\10\25\4\0"+
    "\14\25\1\0\22\25\2\0\1\25\4\0\3\25\6\0"+
    "\2\25\4\0\2\25\1\0\5\25\13\0\1\25\1\0"+
    "\11\25\4\0\4\25\1\363\7\25\1\0\22\25\2\0"+
    "\1\25\4\0\3\25\6\0\2\25\4\0\2\25\1\0"+
    "\5\25\13\0\1\25\1\0\11\25\4\0\1\25\1\u013f"+
    "\12\25\1\0\22\25\2\0\1\25\4\0\3\25\6\0"+
    "\2\25\4\0\2\25\1\0\5\25\13\0\1\25\1\0"+
    "\11\25\4\0\6\25\1\232\5\25\1\0\22\25\2\0"+
    "\1\25\4\0\3\25\6\0\2\25\4\0\2\25\1\0"+
    "\5\25\13\0\1\25\1\0\11\25\4\0\5\25\1\364"+
    "\6\25\1\0\22\25\2\0\1\25\4\0\3\25\55\0"+
    "\1\u0140\71\0\1\u0141\130\0\1\u0142\126\0\1\u0143\52\0"+
    "\1\u0144\50\0\1\u0145\221\0\1\u0146\34\0\1\u0147\2\0"+
    "\1\u0148\217\0\1\u0149\67\0\1\u014a\57\0\2\25\4\0"+
    "\2\25\1\0\5\25\13\0\1\25\1\0\1\255\10\25"+
    "\4\0\14\25\1\0\22\25\2\0\1\25\4\0\3\25"+
    "\2\0\2\112\1\113\35\112\1\u014b\66\112\4\0\2\115"+
    "\4\0\2\115\1\0\5\115\13\0\1\115\1\0\11\115"+
    "\4\0\14\115\1\0\12\115\1\u014c\7\115\2\0\1\115"+
    "\4\0\3\115\6\0\2\115\4\0\2\115\1\0\5\115"+
    "\13\0\1\115\1\0\11\115\4\0\14\115\1\0\2\115"+
    "\1\u014d\17\115\2\0\1\115\4\0\3\115\6\0\2\115"+
    "\4\0\2\115\1\0\5\115\13\0\1\115\1\0\11\115"+
    "\4\0\14\115\1\0\2\115\1\u014e\17\115\2\0\1\115"+
    "\4\0\3\115\6\0\2\115\4\0\2\115\1\0\3\115"+
    "\1\u014f\1\115\13\0\1\115\1\0\11\115\4\0\14\115"+
    "\1\0\22\115\2\0\1\115\4\0\3\115\6\0\2\115"+
    "\4\0\2\115\1\0\5\115\13\0\1\115\1\0\11\115"+
    "\4\0\13\115\1\u0150\1\0\22\115\2\0\1\115\4\0"+
    "\3\115\6\0\2\115\4\0\2\115\1\0\5\115\13\0"+
    "\1\115\1\0\1\115\1\305\7\115\4\0\14\115\1\0"+
    "\22\115\2\0\1\115\4\0\3\115\6\0\2\115\4\0"+
    "\2\115\1\0\5\115\13\0\1\115\1\0\1\305\10\115"+
    "\4\0\14\115\1\0\22\115\2\0\1\115\4\0\3\115"+
    "\6\0\2\115\4\0\2\115\1\0\5\115\13\0\1\115"+
    "\1\0\1\115\1\305\7\115\4\0\6\115\1\u0151\5\115"+
    "\1\0\22\115\2\0\1\115\4\0\3\115\6\0\2\115"+
    "\4\0\2\115\1\0\5\115\13\0\1\115\1\0\3\115"+
    "\1\305\5\115\4\0\5\115\1\140\6\115\1\0\22\115"+
    "\2\0\1\115\4\0\3\115\6\0\2\115\4\0\2\115"+
    "\1\0\5\115\13\0\1\115\1\0\1\115\1\u0152\7\115"+
    "\4\0\14\115\1\0\22\115\2\0\1\115\4\0\3\115"+
    "\6\0\2\115\4\0\2\115\1\0\5\115\13\0\1\115"+
    "\1\0\11\115\4\0\12\115\1\u0153\1\115\1\0\22\115"+
    "\2\0\1\115\4\0\3\115\6\0\2\115\4\0\2\115"+
    "\1\0\5\115\13\0\1\115\1\0\11\115\4\0\5\115"+
    "\1\u0154\6\115\1\0\22\115\2\0\1\115\4\0\3\115"+
    "\6\0\2\115\4\0\2\115\1\0\5\115\13\0\1\115"+
    "\1\0\11\115\4\0\13\115\1\u0155\1\0\22\115\2\0"+
    "\1\115\4\0\3\115\6\0\2\115\4\0\2\115\1\0"+
    "\5\115\13\0\1\115\1\0\11\115\4\0\13\115\1\u0156"+
    "\1\0\22\115\2\0\1\115\4\0\3\115\6\0\2\115"+
    "\4\0\2\115\1\0\5\115\13\0\1\115\1\0\11\115"+
    "\4\0\1\305\13\115\1\0\22\115\2\0\1\115\4\0"+
    "\3\115\6\0\2\115\4\0\2\115\1\0\5\115\13\0"+
    "\1\115\1\0\3\115\1\u0157\5\115\4\0\14\115\1\0"+
    "\22\115\2\0\1\115\4\0\3\115\6\0\2\115\4\0"+
    "\2\115\1\0\5\115\13\0\1\115\1\0\1\u0158\10\115"+
    "\4\0\14\115\1\0\22\115\2\0\1\115\4\0\3\115"+
    "\6\0\2\115\4\0\2\115\1\0\5\115\13\0\1\115"+
    "\1\0\11\115\4\0\4\115\1\u0113\7\115\1\0\22\115"+
    "\2\0\1\115\4\0\3\115\6\0\2\115\4\0\2\115"+
    "\1\0\5\115\13\0\1\115\1\0\11\115\4\0\1\115"+
    "\1\u0159\12\115\1\0\22\115\2\0\1\115\4\0\3\115"+
    "\6\0\2\115\4\0\2\115\1\0\5\115\13\0\1\115"+
    "\1\0\11\115\4\0\6\115\1\305\5\115\1\0\22\115"+
    "\2\0\1\115\4\0\3\115\6\0\2\115\4\0\2\115"+
    "\1\0\5\115\13\0\1\115\1\0\11\115\4\0\5\115"+
    "\1\u0114\6\115\1\0\22\115\2\0\1\115\4\0\3\115"+
    "\6\0\2\115\4\0\2\115\1\0\5\115\13\0\1\115"+
    "\1\0\1\327\10\115\4\0\14\115\1\0\22\115\2\0"+
    "\1\115\4\0\3\115\6\0\2\25\4\0\2\25\1\0"+
    "\2\25\1\u015a\2\25\13\0\1\25\1\0\11\25\4\0"+
    "\14\25\1\0\22\25\2\0\1\25\4\0\3\25\6\0"+
    "\2\25\4\0\2\25\1\0\4\25\1\u015b\13\0\1\25"+
    "\1\0\11\25\4\0\14\25\1\0\22\25\2\0\1\25"+
    "\4\0\3\25\6\0\2\25\4\0\2\25\1\0\5\25"+
    "\13\0\1\25\1\0\11\25\4\0\14\25\1\0\4\25"+
    "\1\u015c\15\25\2\0\1\25\4\0\3\25\6\0\2\25"+
    "\4\0\2\25\1\0\1\25\1\u015d\3\25\13\0\1\25"+
    "\1\0\11\25\4\0\14\25\1\0\22\25\2\0\1\25"+
    "\4\0\3\25\6\0\2\25\4\0\2\25\1\0\5\25"+
    "\13\0\1\25\1\0\11\25\4\0\14\25\1\0\11\25"+
    "\1\u015d\10\25\2\0\1\25\4\0\3\25\6\0\2\25"+
    "\4\0\2\25\1\0\5\25\13\0\1\25\1\0\11\25"+
    "\4\0\14\25\1\0\10\25\1\u015e\11\25\2\0\1\25"+
    "\4\0\3\25\7\0\1\u012a\4\0\1\u012a\1\0\1\342"+
    "\47\0\1\u012a\21\0\1\u012a\6\0\1\u012a\15\0\2\25"+
    "\4\0\2\25\1\0\5\25\13\0\1\25\1\0\3\25"+
    "\1\u0101\5\25\4\0\14\25\1\0\22\25\2\0\1\25"+
    "\4\0\3\25\6\0\1\201\5\0\2\201\1\0\5\201"+
    "\13\0\1\201\1\0\11\201\4\0\10\201\1\0\3\201"+
    "\1\0\15\201\1\0\4\201\7\0\3\201\56\0\1\u015f"+
    "\52\0\2\u012e\1\u0160\124\u012e\46\0\1\u012e\136\0\1\u0161"+
    "\131\0\1\u0162\133\0\1\u012e\44\0\1\212\5\0\2\212"+
    "\1\0\5\212\13\0\1\212\1\0\11\212\4\0\10\212"+
    "\1\0\3\212\1\0\15\212\1\0\4\212\7\0\3\212"+
    "\6\0\2\u0134\1\u0163\3\0\2\u0134\1\0\5\u0134\13\0"+
    "\1\u0134\1\0\11\u0134\4\0\14\u0134\1\0\22\u0134\2\0"+
    "\1\u0134\4\0\3\u0134\6\0\2\u0135\1\0\1\u0163\2\0"+
    "\2\u0135\1\0\5\u0135\13\0\1\u0135\1\0\11\u0135\4\0"+
    "\14\u0135\1\0\22\u0135\2\0\1\u0135\4\0\3\u0135\6\0"+
    "\2\u0136\2\0\1\u0163\1\0\2\u0136\1\0\5\u0136\13\0"+
    "\1\u0136\1\0\11\u0136\4\0\14\u0136\1\0\22\u0136\2\0"+
    "\1\u0136\4\0\3\u0136\6\0\2\25\4\0\2\25\1\0"+
    "\5\25\13\0\1\25\1\0\1\25\1\u0164\7\25\4\0"+
    "\14\25\1\0\22\25\2\0\1\25\4\0\3\25\6\0"+
    "\2\25\4\0\2\25\1\0\5\25\13\0\1\25\1\0"+
    "\11\25\4\0\5\25\1\u0165\6\25\1\0\22\25\2\0"+
    "\1\25\4\0\3\25\6\0\2\25\4\0\2\25\1\0"+
    "\5\25\13\0\1\25\1\0\11\25\4\0\1\25\1\u0166"+
    "\12\25\1\0\22\25\2\0\1\25\4\0\3\25\6\0"+
    "\2\25\4\0\2\25\1\0\5\25\13\0\1\25\1\0"+
    "\5\25\1\u0167\3\25\4\0\14\25\1\0\22\25\2\0"+
    "\1\25\4\0\3\25\6\0\2\25\4\0\2\25\1\0"+
    "\5\25\13\0\1\25\1\0\11\25\4\0\3\25\1\u0168"+
    "\10\25\1\0\22\25\2\0\1\25\4\0\3\25\6\0"+
    "\2\25\4\0\2\25\1\0\5\25\13\0\1\25\1\0"+
    "\11\25\4\0\5\25\1\u0169\6\25\1\0\22\25\2\0"+
    "\1\25\4\0\3\25\6\0\2\25\4\0\2\25\1\0"+
    "\5\25\13\0\1\25\1\0\11\25\4\0\1\25\1\u016a"+
    "\12\25\1\0\22\25\2\0\1\25\4\0\3\25\6\0"+
    "\2\25\4\0\2\25\1\0\5\25\13\0\1\25\1\0"+
    "\11\25\4\0\1\25\1\215\12\25\1\0\22\25\2\0"+
    "\1\25\4\0\3\25\6\0\2\25\4\0\2\25\1\0"+
    "\5\25\13\0\1\25\1\0\11\25\4\0\12\25\1\232"+
    "\1\25\1\0\22\25\2\0\1\25\4\0\3\25\6\0"+
    "\1\256\5\0\2\256\1\0\5\256\13\0\1\256\1\0"+
    "\11\256\4\0\10\256\1\0\3\256\1\0\15\256\1\0"+
    "\4\256\7\0\3\256\103\0\1\u016b\120\0\1\u016c\125\0"+
    "\1\u016d\53\0\1\u016e\121\0\1\u016f\207\0\1\u0170\126\0"+
    "\1\u0171\140\0\1\u0172\36\0\1\u0173\115\0\1\261\5\0"+
    "\2\261\1\0\5\261\13\0\1\261\1\0\11\261\4\0"+
    "\10\261\1\0\3\261\1\0\15\261\1\0\4\261\7\0"+
    "\3\261\2\0\2\u014b\1\u0174\124\u014b\4\0\2\115\4\0"+
    "\2\115\1\0\5\115\13\0\1\115\1\0\11\115\4\0"+
    "\14\115\1\0\4\115\1\u0175\15\115\2\0\1\115\4\0"+
    "\3\115\6\0\2\115\4\0\2\115\1\0\1\115\1\u0176"+
    "\3\115\13\0\1\115\1\0\11\115\4\0\14\115\1\0"+
    "\22\115\2\0\1\115\4\0\3\115\6\0\2\115\4\0"+
    "\2\115\1\0\5\115\13\0\1\115\1\0\11\115\4\0"+
    "\14\115\1\0\11\115\1\u0176\10\115\2\0\1\115\4\0"+
    "\3\115\6\0\2\115\4\0\2\115\1\0\5\115\13\0"+
    "\1\115\1\0\11\115\4\0\14\115\1\0\10\115\1\u0177"+
    "\11\115\2\0\1\115\4\0\3\115\6\0\2\115\4\0"+
    "\2\115\1\0\5\115\13\0\1\115\1\0\3\115\1\u0121"+
    "\5\115\4\0\14\115\1\0\22\115\2\0\1\115\4\0"+
    "\3\115\6\0\2\115\4\0\2\115\1\0\5\115\13\0"+
    "\1\115\1\0\1\115\1\u0178\7\115\4\0\14\115\1\0"+
    "\22\115\2\0\1\115\4\0\3\115\6\0\2\115\4\0"+
    "\2\115\1\0\5\115\13\0\1\115\1\0\11\115\4\0"+
    "\5\115\1\u0179\6\115\1\0\22\115\2\0\1\115\4\0"+
    "\3\115\6\0\2\115\4\0\2\115\1\0\5\115\13\0"+
    "\1\115\1\0\11\115\4\0\1\115\1\u017a\12\115\1\0"+
    "\22\115\2\0\1\115\4\0\3\115\6\0\2\115\4\0"+
    "\2\115\1\0\5\115\13\0\1\115\1\0\5\115\1\u017b"+
    "\3\115\4\0\14\115\1\0\22\115\2\0\1\115\4\0"+
    "\3\115\6\0\2\115\4\0\2\115\1\0\5\115\13\0"+
    "\1\115\1\0\11\115\4\0\3\115\1\u017c\10\115\1\0"+
    "\22\115\2\0\1\115\4\0\3\115\6\0\2\115\4\0"+
    "\2\115\1\0\5\115\13\0\1\115\1\0\11\115\4\0"+
    "\5\115\1\u017d\6\115\1\0\22\115\2\0\1\115\4\0"+
    "\3\115\6\0\2\115\4\0\2\115\1\0\5\115\13\0"+
    "\1\115\1\0\11\115\4\0\1\115\1\u017e\12\115\1\0"+
    "\22\115\2\0\1\115\4\0\3\115\6\0\2\115\4\0"+
    "\2\115\1\0\5\115\13\0\1\115\1\0\11\115\4\0"+
    "\1\115\1\272\12\115\1\0\22\115\2\0\1\115\4\0"+
    "\3\115\6\0\2\115\4\0\2\115\1\0\5\115\13\0"+
    "\1\115\1\0\11\115\4\0\12\115\1\305\1\115\1\0"+
    "\22\115\2\0\1\115\4\0\3\115\6\0\2\25\4\0"+
    "\1\u017f\1\25\1\0\5\25\13\0\1\25\1\0\11\25"+
    "\4\0\14\25\1\0\22\25\2\0\1\25\4\0\3\25"+
    "\6\0\2\25\4\0\2\25\1\0\3\25\1\u015a\1\25"+
    "\13\0\1\25\1\0\11\25\4\0\14\25\1\0\22\25"+
    "\2\0\1\25\4\0\3\25\6\0\2\25\4\0\1\u0180"+
    "\1\25\1\0\5\25\13\0\1\25\1\0\11\25\4\0"+
    "\14\25\1\0\22\25\2\0\1\25\4\0\3\25\6\0"+
    "\2\25\4\0\2\25\1\0\1\u015c\4\25\13\0\1\25"+
    "\1\0\11\25\4\0\14\25\1\0\22\25\2\0\1\25"+
    "\4\0\3\25\6\0\2\25\4\0\2\25\1\0\5\25"+
    "\13\0\1\25\1\0\11\25\4\0\14\25\1\0\22\25"+
    "\2\0\1\25\4\0\2\25\1\u0181\60\0\1\u0182\134\0"+
    "\1\u012e\106\0\1\u012e\66\0\2\25\4\0\2\25\1\0"+
    "\5\25\13\0\1\25\1\0\11\25\4\0\6\25\1\220"+
    "\5\25\1\0\22\25\2\0\1\25\4\0\3\25\6\0"+
    "\2\25\4\0\2\25\1\0\5\25\13\0\1\25\1\0"+
    "\5\25\1\u0183\3\25\4\0\14\25\1\0\22\25\2\0"+
    "\1\25\4\0\3\25\6\0\2\25\4\0\2\25\1\0"+
    "\5\25\13\0\1\25\1\0\2\25\1\255\6\25\4\0"+
    "\14\25\1\0\22\25\2\0\1\25\4\0\3\25\6\0"+
    "\2\25\4\0\2\25\1\0\5\25\13\0\1\25\1\0"+
    "\3\25\1\242\5\25\4\0\14\25\1\0\22\25\2\0"+
    "\1\25\4\0\3\25\6\0\2\25\4\0\2\25\1\0"+
    "\5\25\13\0\1\25\1\0\5\25\1\232\3\25\4\0"+
    "\14\25\1\0\22\25\2\0\1\25\4\0\3\25\6\0"+
    "\2\25\4\0\2\25\1\0\5\25\13\0\1\25\1\0"+
    "\11\25\4\0\3\25\1\255\10\25\1\0\22\25\2\0"+
    "\1\25\4\0\3\25\6\0\2\25\4\0\2\25\1\0"+
    "\5\25\13\0\1\25\1\0\6\25\1\u0184\2\25\4\0"+
    "\14\25\1\0\22\25\2\0\1\25\4\0\3\25\106\0"+
    "\1\u0185\40\0\1\u0186\126\0\1\u0187\125\0\1\u0188\130\0"+
    "\1\u0189\1\0\1\u018a\207\0\1\u018b\125\0\1\u018c\133\0"+
    "\1\u018d\36\0\1\257\114\0\2\115\4\0\1\u018e\1\115"+
    "\1\0\5\115\13\0\1\115\1\0\11\115\4\0\14\115"+
    "\1\0\22\115\2\0\1\115\4\0\3\115\6\0\2\115"+
    "\4\0\2\115\1\0\1\u0175\4\115\13\0\1\115\1\0"+
    "\11\115\4\0\14\115\1\0\22\115\2\0\1\115\4\0"+
    "\3\115\6\0\2\115\4\0\2\115\1\0\5\115\13\0"+
    "\1\115\1\0\11\115\4\0\14\115\1\0\22\115\2\0"+
    "\1\115\4\0\2\115\1\u018f\6\0\2\115\4\0\2\115"+
    "\1\0\5\115\13\0\1\115\1\0\11\115\4\0\6\115"+
    "\1\273\5\115\1\0\22\115\2\0\1\115\4\0\3\115"+
    "\6\0\2\115\4\0\2\115\1\0\5\115\13\0\1\115"+
    "\1\0\5\115\1\u0190\3\115\4\0\14\115\1\0\22\115"+
    "\2\0\1\115\4\0\3\115\6\0\2\115\4\0\2\115"+
    "\1\0\5\115\13\0\1\115\1\0\2\115\1\327\6\115"+
    "\4\0\14\115\1\0\22\115\2\0\1\115\4\0\3\115"+
    "\6\0\2\115\4\0\2\115\1\0\5\115\13\0\1\115"+
    "\1\0\3\115\1\314\5\115\4\0\14\115\1\0\22\115"+
    "\2\0\1\115\4\0\3\115\6\0\2\115\4\0\2\115"+
    "\1\0\5\115\13\0\1\115\1\0\5\115\1\305\3\115"+
    "\4\0\14\115\1\0\22\115\2\0\1\115\4\0\3\115"+
    "\6\0\2\115\4\0\2\115\1\0\5\115\13\0\1\115"+
    "\1\0\11\115\4\0\3\115\1\327\10\115\1\0\22\115"+
    "\2\0\1\115\4\0\3\115\6\0\2\115\4\0\2\115"+
    "\1\0\5\115\13\0\1\115\1\0\6\115\1\u0191\2\115"+
    "\4\0\14\115\1\0\22\115\2\0\1\115\4\0\3\115"+
    "\6\0\2\25\4\0\1\u0192\1\25\1\0\5\25\13\0"+
    "\1\25\1\0\11\25\4\0\14\25\1\0\22\25\2\0"+
    "\1\25\4\0\3\25\6\0\2\25\4\0\1\u0193\1\25"+
    "\1\0\5\25\13\0\1\25\1\0\11\25\4\0\14\25"+
    "\1\0\22\25\2\0\1\25\4\0\3\25\6\0\2\25"+
    "\4\0\2\25\1\0\3\25\1\u0194\1\25\13\0\1\25"+
    "\1\0\11\25\4\0\14\25\1\0\22\25\2\0\1\25"+
    "\4\0\3\25\63\0\1\u0195\51\0\2\25\4\0\2\25"+
    "\1\0\5\25\13\0\1\25\1\0\11\25\4\0\13\25"+
    "\1\u010c\1\0\22\25\2\0\1\25\4\0\3\25\6\0"+
    "\2\25\4\0\2\25\1\0\5\25\13\0\1\25\1\0"+
    "\11\25\4\0\7\25\1\232\4\25\1\0\22\25\2\0"+
    "\1\25\4\0\3\25\21\0\1\u0196\130\0\1\257\200\0"+
    "\1\u0197\45\0\1\u0198\131\0\1\u0199\203\0\1\u019a\53\0"+
    "\1\u019b\213\0\1\u019c\124\0\1\u019d\30\0\2\115\4\0"+
    "\1\u019e\1\115\1\0\5\115\13\0\1\115\1\0\11\115"+
    "\4\0\14\115\1\0\22\115\2\0\1\115\4\0\3\115"+
    "\6\0\2\115\4\0\2\115\1\0\3\115\1\u019f\1\115"+
    "\13\0\1\115\1\0\11\115\4\0\14\115\1\0\22\115"+
    "\2\0\1\115\4\0\3\115\6\0\2\115\4\0\2\115"+
    "\1\0\5\115\13\0\1\115\1\0\11\115\4\0\13\115"+
    "\1\u0123\1\0\22\115\2\0\1\115\4\0\3\115\6\0"+
    "\2\115\4\0\2\115\1\0\5\115\13\0\1\115\1\0"+
    "\11\115\4\0\7\115\1\305\4\115\1\0\22\115\2\0"+
    "\1\115\4\0\3\115\6\0\2\25\4\0\2\25\1\0"+
    "\5\25\13\0\1\25\1\0\11\25\4\0\14\25\1\0"+
    "\3\25\1\u015d\16\25\2\0\1\25\4\0\3\25\46\0"+
    "\1\u01a0\155\0\1\u01a1\51\0\1\u01a2\206\0\1\u01a3\125\0"+
    "\1\u01a4\124\0\1\u01a5\45\0\1\u01a6\133\0\1\u01a7\213\0"+
    "\1\u01a8\26\0\2\115\4\0\2\115\1\0\5\115\13\0"+
    "\1\115\1\0\11\115\4\0\14\115\1\0\3\115\1\u0176"+
    "\16\115\2\0\1\115\4\0\3\115\43\0\1\u012e\103\0"+
    "\1\u01a9\204\0\1\u01aa\131\0\1\u01ab\132\0\1\u01ac\40\0"+
    "\1\u01ad\126\0\1\u01ae\126\0\1\257\212\0\1\u01af\121\0"+
    "\1\257\44\0\1\u01b0\212\0\1\u01b1\124\0\1\u01b2\44\0"+
    "\1\u01b3\206\0\1\u01b4\54\0\1\u01b5\203\0\1\u01b6\52\0"+
    "\1\u01b7\117\0\1\u01b8\214\0\1\u01b9\120\0\1\u01ba\136\0"+
    "\1\u01a7\117\0\1\u01bb\50\0\1\u01bc\216\0\1\u01bd\41\0"+
    "\1\u01be\212\0\1\u01bf\43\0\1\u01c0\205\0\1\u01c1\130\0"+
    "\1\u01c2\133\0\1\u01c3\111\0\1\u01c4\132\0\1\257\42\0"+
    "\1\u01c5\134\0\1\u01c6\203\0\1\u01c7\43\0\1\u01c8\215\0"+
    "\1\u01c9\121\0\1\u01c0\135\0\1\u01ca\41\0\1\u01cb\130\0"+
    "\1\u01cc\213\0\1\257\41\0\1\u01cd\210\0\1\u01ce\45\0"+
    "\1\u01cf\207\0\1\u01c0\117\0\1\u01d0\144\0\1\u01a7\15\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[36453];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\1\2\0\2\1\11\0\1\11\1\1\1\11"+
    "\3\1\1\11\4\1\1\11\42\1\3\11\1\1\2\11"+
    "\2\1\3\11\1\1\1\11\36\1\2\11\1\1\1\11"+
    "\1\1\5\11\1\1\2\11\1\1\1\11\1\0\1\11"+
    "\2\1\1\0\4\1\1\11\7\0\1\1\1\11\1\0"+
    "\24\1\1\11\15\1\1\11\2\1\1\11\1\0\56\1"+
    "\1\0\1\1\13\0\1\1\3\0\20\1\1\0\5\1"+
    "\1\0\1\1\1\0\40\1\2\0\1\1\10\0\11\1"+
    "\13\0\24\1\1\0\1\11\2\0\1\11\7\1\11\0"+
    "\1\11\15\1\1\0\2\1\11\0\7\1\11\0\2\1"+
    "\61\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[464];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    public void setTokenStart(int position){zzCurrentPos = zzStartRead = position;}
    public int getNextTokenStart(){ return zzMarkedPos;}
    public boolean isLastToken(){ return zzMarkedPos == zzEndRead; }
    public void setState(int newState){ zzLexicalState = newState; }

    public void yybegin_YYINITIAL(){yybegin(YYINITIAL);}


    public void yybegin_LEX_EOF(){yybegin(LEX_EOF);}
    public void yybegin_LEX_POD(){yybegin(LEX_POD);}

    public boolean yystate_LEX_MULTILINE_WAITING(){return yystate() == LEX_MULTILINE_WAITING;}

    public void yybegin_LEX_MULTILINE(){yybegin(LEX_MULTILINE);}
    public void yybegin_LEX_MULTILINE_TOKEN(){yybegin(LEX_MULTILINE_TOKEN);}
    public void yybegin_LEX_MULTILINE_WAITING(){yybegin(LEX_MULTILINE_WAITING);}
    public void yybegin_LEX_QUOTE_LIKE_CHARS(){yybegin(LEX_QUOTE_LIKE_CHARS);}
    public void yybegin_LEX_QUOTE_LIKE_OPENER(){yybegin(LEX_QUOTE_LIKE_OPENER);}
    public void yybegin_LEX_QUOTE_LIKE_CLOSER(){yybegin(LEX_QUOTE_LIKE_CLOSER);}
    public void yybegin_LEX_QUOTE_LIKE_WORDS(){yybegin(LEX_QUOTE_LIKE_WORDS);}
    public void yybegin_LEX_QUOTE_LIKE_LIST_OPENER(){yybegin(LEX_QUOTE_LIKE_LIST_OPENER);}
    public void yybegin_LEX_QUOTE_LIKE_LIST_CLOSER(){yybegin(LEX_QUOTE_LIKE_LIST_CLOSER);}
    public void yybegin_LEX_TRANS_OPENER(){yybegin(LEX_TRANS_OPENER);}
    public void yybegin_LEX_TRANS_CHARS(){yybegin(LEX_TRANS_CHARS);}
    public void yybegin_LEX_TRANS_CLOSER(){yybegin(LEX_TRANS_CLOSER);}
    public void yybegin_LEX_TRANS_MODIFIERS(){yybegin(LEX_TRANS_MODIFIERS);}


  public PerlLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PerlLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 202) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 46: 
          { return PERL_ARRAY;
          }
        case 52: break;
        case 10: 
          { return processStringOpener();
          }
        case 53: break;
        case 48: 
          { processPodOpener();break;
          }
        case 54: break;
        case 3: 
          { if( isMultilineEnd() || isLastToken())
        {
            return endMultiline();
        }
        break;
          }
        case 55: break;
        case 9: 
          { return PERL_NUMBER;
          }
        case 56: break;
        case 51: 
          { return PERL_TAG;
          }
        case 57: break;
        case 28: 
          { return processOpenerWhiteSpace();
          }
        case 58: break;
        case 34: 
          { IElementType tokenType = processTransChar();
          if( tokenType != null )
                return tokenType;
          break;
          }
        case 59: break;
        case 50: 
          { processDataOpener(); break;
          }
        case 60: break;
        case 12: 
          { return PERL_OPERATOR;
          }
        case 61: break;
        case 31: 
          { IElementType type = processQuoteLikeListQuote();
            if( type == null ) // disallowed sharp
                break;
            return type;
          }
        case 62: break;
        case 7: 
          { return TokenType.WHITE_SPACE;
          }
        case 63: break;
        case 41: 
          { return PERL_HASH;
          }
        case 64: break;
        case 14: 
          { return processQuoteLikeStringOpener();
          }
        case 65: break;
        case 33: 
          { IElementType type = processTransQuote();
            if( type == null ) // disallowed sharp
                break;
            return type;
          }
        case 66: break;
        case 42: 
          { return processQuoteLikeListOpener();
          }
        case 67: break;
        case 22: 
          { return processTransOpener();
          }
        case 68: break;
        case 1: 
          { if( isLastToken() )
            return endDataBlock();
        break;
          }
        case 69: break;
        case 43: 
          { return PERL_KEYWORD;
          }
        case 70: break;
        case 18: 
          { return processSemicolon();
          }
        case 71: break;
        case 39: 
          { return PERL_GLOB;
          }
        case 72: break;
        case 29: 
          { IElementType tokenType = processQuoteLikeChar();
          if( tokenType != null )
                return tokenType;
          break;
          }
        case 73: break;
        case 44: 
          { return PERL_DEPACKAGE;
          }
        case 74: break;
        case 11: 
          { return PERL_COMMENT;
          }
        case 75: break;
        case 25: 
          { yybegin(YYINITIAL); return PERL_STRING_CONTENT;
          }
        case 76: break;
        case 26: 
          { if( isLastToken() )
        {
            return endMultiline();
        }
        break;
          }
        case 77: break;
        case 47: 
          { return processMultilineOpener();
          }
        case 78: break;
        case 35: 
          { return processTransCloser();
          }
        case 79: break;
        case 6: 
          { return processNewLine();
          }
        case 80: break;
        case 38: 
          { return PERL_NUMBER_VERSION;
          }
        case 81: break;
        case 16: 
          { return PERL_LPAREN;
          }
        case 82: break;
        case 13: 
          { return PERL_SIGIL_HASH;
          }
        case 83: break;
        case 5: 
          { return TokenType.BAD_CHARACTER;
          }
        case 84: break;
        case 45: 
          { return PERL_SCALAR;
          }
        case 85: break;
        case 2: 
          { if( isLastToken() )
        {
            endPodBlock();
        }
        break;
          }
        case 86: break;
        case 17: 
          { return PERL_RPAREN;
          }
        case 87: break;
        case 15: 
          { return PERL_SIGIL_SCALAR;
          }
        case 88: break;
        case 19: 
          { return PERL_SIGIL_ARRAY;
          }
        case 89: break;
        case 4: 
          { yybegin(YYINITIAL);return PERL_STRING_MULTILINE_END;
          }
        case 90: break;
        case 27: 
          { IElementType type = processQuoteLikeQuote();
            if( type == null ) // disallowed sharp
                break;
            return type;
          }
        case 91: break;
        case 40: 
          { return PERL_ARROW_COMMA;
          }
        case 92: break;
        case 37: 
          { return PERL_MODIFIER;
          }
        case 93: break;
        case 23: 
          { return PERL_LBRACE;
          }
        case 94: break;
        case 24: 
          { return PERL_RBRACE;
          }
        case 95: break;
        case 8: 
          { return PERL_BAREWORD;
          }
        case 96: break;
        case 30: 
          { popState(); return PERL_QUOTE;
          }
        case 97: break;
        case 32: 
          { IElementType tokenType = processQuoteLikeWord();
          if( tokenType != null )
                return tokenType;
          break;
          }
        case 98: break;
        case 49: 
          { return endPodBlock();
          }
        case 99: break;
        case 36: 
          { popState(); yypushback(1); break;
          }
        case 100: break;
        case 21: 
          { return PERL_RBRACK;
          }
        case 101: break;
        case 20: 
          { return PERL_LBRACK;
          }
        case 102: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
