/* The following code was generated by JFlex 1.4.3 on 30.04.15 18:31 */

package com.perl5.lang.perl.lexer;

/*
    http://jflex.de/manual.html
    http://www2.cs.tum.edu/projects/cup

*/

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import org.jetbrains.annotations.NotNull;
import com.perl5.lang.perl.util.PerlFunctionUtil;
import com.perl5.lang.perl.util.PerlScalarUtil;
import com.perl5.lang.perl.util.PerlHashUtil;
import com.perl5.lang.perl.util.PerlGlobUtil;
import com.perl5.lang.perl.util.PerlArrayUtil;
import com.perl5.lang.perl.util.PerlPackageUtil;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 30.04.15 18:31 from the specification file
 * <tt>C:/Repository/Perl5-IDEA/src/com/perl5/lang/perl/lexer/Perl.flex</tt>
 */
public class PerlLexer extends PerlLexerProto implements FlexLexer, PerlElementTypes {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int LEX_MULTILINE_WAITING = 12;
  public static final int LEX_REQUIRE = 24;
  public static final int LEX_PACKAGE_USE = 18;
  public static final int LEX_DEREFERENCE = 28;
  public static final int LEX_PACKAGE_USE_VERSION = 22;
  public static final int LEX_MULTILINE_TOKEN = 16;
  public static final int LEX_PACKAGE_DEFINITION_BLOCK = 6;
  public static final int LEX_PACKAGE_USE_PARAMS = 20;
  public static final int LEX_MULTILINE = 14;
  public static final int LEX_EOF = 8;
  public static final int LEX_PACKAGE_DEFINITION = 2;
  public static final int LEX_FUNCTION_DEFINITION = 26;
  public static final int YYINITIAL = 0;
  public static final int LEX_PACKAGE_DEFINITION_VERSION = 4;
  public static final int LEX_POD = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13,  6, 6
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\62\1\23\1\16"+
    "\1\115\1\71\1\30\1\45\1\17\1\116\1\117\1\22\1\20\1\120"+
    "\1\21\1\50\1\27\1\5\1\64\1\64\1\64\1\64\3\5\1\110"+
    "\1\5\1\52\1\4\1\32\1\26\1\33\1\51\1\72\1\13\1\77"+
    "\1\103\1\12\1\10\1\107\1\76\1\112\1\75\2\6\1\104\1\102"+
    "\1\11\1\106\1\114\1\6\1\74\1\100\1\14\1\105\1\113\1\73"+
    "\1\111\1\101\1\6\1\121\1\25\1\122\1\47\1\7\1\15\1\54"+
    "\1\66\1\42\1\55\1\37\1\57\1\36\1\63\1\60\1\6\1\67"+
    "\1\34\1\43\1\41\1\53\1\44\1\40\1\56\1\61\1\35\1\70"+
    "\1\65\1\6\1\31\2\6\1\123\1\46\1\124\1\24\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\3\1\1\2\1\3\1\0\1\4\1\5\5\0"+
    "\2\6\1\7\1\1\1\10\1\11\1\12\1\11\3\6"+
    "\10\13\1\14\3\13\5\12\2\13\1\6\1\13\6\12"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\2\27\2\1\1\30\2\31\1\32\1\31"+
    "\1\33\2\34\1\2\3\3\1\13\3\12\2\4\1\35"+
    "\2\36\1\37\2\40\21\36\1\40\2\36\2\41\1\37"+
    "\3\42\2\43\1\44\2\45\21\43\1\45\2\43\2\46"+
    "\3\0\1\11\1\0\1\41\2\0\1\11\1\47\1\50"+
    "\7\0\2\51\1\0\3\13\1\12\1\52\2\12\1\13"+
    "\1\53\6\12\3\54\2\55\1\0\1\17\3\0\1\3"+
    "\2\12\2\0\2\37\2\0\1\44\1\56\1\11\1\57"+
    "\2\12\13\0\1\60\3\0\5\12\1\61\1\62\1\0"+
    "\5\54\1\0\1\54\2\0\1\3\1\37\1\57\1\0"+
    "\1\44\1\57\2\0\2\12\2\0\1\63\10\0\5\12"+
    "\13\0\1\64\2\12\2\0\1\63\3\0\2\60\4\12"+
    "\13\0\1\64\1\12\1\0\2\12\11\0\1\65\1\0"+
    "\1\66\1\67\71\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[374];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\125\0\252\0\377\0\u0154\0\u01a9\0\u01fe\0\u0253"+
    "\0\u02a8\0\u02fd\0\u0352\0\u03a7\0\u03fc\0\u0451\0\u04a6\0\u04fb"+
    "\0\u04a6\0\u0550\0\u04a6\0\u05a5\0\u05fa\0\u064f\0\u06a4\0\u06f9"+
    "\0\u074e\0\u07a3\0\u07f8\0\u084d\0\u08a2\0\u08f7\0\u04a6\0\u094c"+
    "\0\u09a1\0\u09f6\0\u0a4b\0\u0aa0\0\u0af5\0\u0b4a\0\u0b9f\0\u0bf4"+
    "\0\u0c49\0\u0c9e\0\u0cf3\0\u0d48\0\u0d9d\0\u0df2\0\u0e47\0\u0e9c"+
    "\0\u0ef1\0\u0f46\0\u0f9b\0\u0ff0\0\u1045\0\u109a\0\u10ef\0\u04a6"+
    "\0\u04a6\0\u04a6\0\u04a6\0\u04a6\0\u04a6\0\u04a6\0\u04a6\0\u1144"+
    "\0\u04a6\0\u1199\0\u11ee\0\u04a6\0\u1144\0\u1243\0\u1298\0\u04a6"+
    "\0\u04a6\0\u1144\0\u04a6\0\u12ed\0\u04a6\0\u1342\0\u1397\0\u13ec"+
    "\0\u1441\0\u1496\0\u14eb\0\u1540\0\u04a6\0\u04a6\0\u04fb\0\u1595"+
    "\0\u15ea\0\u163f\0\u06a4\0\u06f9\0\u074e\0\u07a3\0\u07f8\0\u084d"+
    "\0\u08a2\0\u08f7\0\u1397\0\u09a1\0\u09f6\0\u0aa0\0\u0af5\0\u0cf3"+
    "\0\u0d48\0\u0d9d\0\u0df2\0\u1694\0\u1045\0\u109a\0\u16e9\0\u173e"+
    "\0\u1793\0\u17e8\0\u183d\0\u1892\0\u04a6\0\u04fb\0\u18e7\0\u193c"+
    "\0\u1991\0\u06a4\0\u06f9\0\u074e\0\u07a3\0\u07f8\0\u084d\0\u08a2"+
    "\0\u08f7\0\u1397\0\u09a1\0\u09f6\0\u0aa0\0\u0af5\0\u0cf3\0\u0d48"+
    "\0\u0d9d\0\u0df2\0\u19e6\0\u1045\0\u109a\0\u1a3b\0\u1a90\0\u1ae5"+
    "\0\u1b3a\0\u1b8f\0\u1be4\0\u06a4\0\u04a6\0\u06f9\0\u074e\0\u1c39"+
    "\0\u04a6\0\u1c8e\0\u1ce3\0\u1d38\0\u1d8d\0\u1de2\0\u1e37\0\u1e8c"+
    "\0\u1ee1\0\u1f36\0\u04a6\0\u1f8b\0\u1fe0\0\u2035\0\u05fa\0\u208a"+
    "\0\u20df\0\u2134\0\u2189\0\u21de\0\u04a6\0\u2233\0\u2288\0\u22dd"+
    "\0\u2332\0\u2387\0\u23dc\0\u04a6\0\u2431\0\u2486\0\u24db\0\u04a6"+
    "\0\u2530\0\u04a6\0\u1144\0\u2585\0\u1298\0\u25da\0\u20df\0\u262f"+
    "\0\u2684\0\u26d9\0\u272e\0\u2783\0\u27d8\0\u282d\0\u2882\0\u04a6"+
    "\0\u1b3a\0\u28d7\0\u292c\0\u2981\0\u29d6\0\u2a2b\0\u2a80\0\u2ad5"+
    "\0\u2b2a\0\u2b7f\0\u2bd4\0\u2c29\0\u2c7e\0\u2cd3\0\u2035\0\u2d28"+
    "\0\u2d7d\0\u2dd2\0\u2e27\0\u2e7c\0\u2ed1\0\u2f26\0\u2f7b\0\u2fd0"+
    "\0\u05fa\0\u05fa\0\u3025\0\u307a\0\u30cf\0\u3124\0\u3179\0\u31ce"+
    "\0\u3223\0\u3278\0\u32cd\0\u3322\0\u3377\0\u33cc\0\u3421\0\u3476"+
    "\0\u34cb\0\u3520\0\u3575\0\u35ca\0\u361f\0\u3674\0\u36c9\0\u371e"+
    "\0\u3773\0\u37c8\0\u381d\0\u3872\0\u38c7\0\u391c\0\u3971\0\u39c6"+
    "\0\u3a1b\0\u3a70\0\u3ac5\0\u3b1a\0\u3b6f\0\u3bc4\0\u3c19\0\u3c6e"+
    "\0\u3cc3\0\u3d18\0\u3d6d\0\u3dc2\0\u3e17\0\u3e6c\0\u3ec1\0\u3f16"+
    "\0\u3f6b\0\u3fc0\0\u4015\0\u406a\0\u1c8e\0\u40bf\0\u04a6\0\u4114"+
    "\0\u4169\0\u1f36\0\u3971\0\u04a6\0\u41be\0\u4213\0\u4268\0\u42bd"+
    "\0\u2431\0\u4312\0\u4367\0\u43bc\0\u4411\0\u4466\0\u44bb\0\u4510"+
    "\0\u4565\0\u45ba\0\u24db\0\u04a6\0\u460f\0\u4664\0\u46b9\0\u470e"+
    "\0\u4763\0\u47b8\0\u480d\0\u4862\0\u48b7\0\u490c\0\u4961\0\u49b6"+
    "\0\u4a0b\0\u05fa\0\u4a60\0\u05fa\0\u05fa\0\u4ab5\0\u4b0a\0\u4b5f"+
    "\0\u4bb4\0\u4c09\0\u4c5e\0\u4cb3\0\u4d08\0\u4d5d\0\u4db2\0\u4e07"+
    "\0\u4e5c\0\u4eb1\0\u4f06\0\u4f5b\0\u4fb0\0\u5005\0\u505a\0\u50af"+
    "\0\u5104\0\u5159\0\u51ae\0\u5203\0\u5258\0\u52ad\0\u5302\0\u5357"+
    "\0\u53ac\0\u5401\0\u5456\0\u54ab\0\u5500\0\u5555\0\u55aa\0\u55ff"+
    "\0\u5654\0\u56a9\0\u56fe\0\u5753\0\u57a8\0\u57fd\0\u5852\0\u58a7"+
    "\0\u58fc\0\u5951\0\u59a6\0\u59fb\0\u5a50\0\u5aa5\0\u5afa\0\u5b4f"+
    "\0\u5ba4\0\u5bf9\0\u5c4e\0\u5ca3\0\u5cf8\0\u5d4d";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[374];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\5\25\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\25\1\46\1\47\1\25\1\50\1\51\1\25"+
    "\1\52\1\53\1\54\1\37\1\55\1\37\1\56\1\57"+
    "\1\60\1\61\1\62\2\25\1\63\1\22\1\25\1\24"+
    "\3\25\1\64\1\65\1\66\15\25\1\24\4\25\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
    "\1\100\1\101\1\102\1\77\10\103\14\77\1\103\2\77"+
    "\11\103\6\77\7\103\1\102\6\103\2\77\22\103\10\77"+
    "\1\104\1\105\1\101\1\102\1\23\1\106\54\104\1\102"+
    "\1\104\1\106\1\107\22\104\1\106\12\104\1\110\1\104"+
    "\1\111\1\112\1\101\1\102\1\23\55\111\1\102\40\111"+
    "\1\110\1\111\2\5\1\113\122\5\2\114\1\115\23\114"+
    "\1\116\76\114\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\24\5\25\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\117\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\25\1\46\1\47\1\25\1\120"+
    "\1\51\2\25\1\53\1\54\1\37\1\55\1\37\1\56"+
    "\1\57\1\60\1\61\1\121\2\25\1\122\1\22\1\25"+
    "\1\24\4\25\1\65\1\66\15\25\1\24\4\25\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\123"+
    "\1\124\1\125\122\123\2\11\1\0\122\11\1\126\1\127"+
    "\1\21\1\22\1\23\1\130\1\131\1\132\5\131\1\133"+
    "\1\134\1\135\1\136\1\137\1\140\1\141\1\142\1\126"+
    "\1\143\1\144\1\145\1\131\1\146\1\147\11\131\1\150"+
    "\1\151\1\126\1\152\1\126\1\153\7\131\1\22\1\131"+
    "\1\130\1\154\3\131\1\155\1\156\15\131\1\130\4\131"+
    "\1\67\2\126\1\72\4\126\1\17\1\20\1\21\1\22"+
    "\1\23\1\157\1\160\1\157\5\160\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\117\1\41"+
    "\1\42\1\160\1\44\1\45\11\160\1\53\1\54\1\37"+
    "\1\55\1\37\1\56\7\160\1\22\1\160\1\157\4\160"+
    "\1\65\1\66\15\160\1\157\4\160\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\1\75\1\76\1\17\1\20\1\21"+
    "\1\22\1\23\1\161\1\162\1\163\5\162\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\117"+
    "\1\41\1\42\1\162\1\44\1\45\11\162\1\53\1\54"+
    "\1\37\1\55\1\37\1\56\7\162\1\22\1\162\1\161"+
    "\1\164\3\162\1\65\1\66\15\162\1\161\4\162\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\165"+
    "\1\166\1\21\1\22\1\23\1\167\1\170\1\171\5\170"+
    "\1\172\1\173\1\174\1\175\1\176\1\177\1\200\1\201"+
    "\1\165\1\202\1\203\1\204\1\170\1\205\1\206\11\170"+
    "\1\207\1\210\1\165\1\211\1\165\1\212\7\170\1\22"+
    "\1\170\1\167\1\213\3\170\1\214\1\215\15\170\1\167"+
    "\4\170\1\67\2\165\1\72\4\165\1\17\1\20\1\21"+
    "\1\22\1\23\1\216\1\217\1\216\5\217\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\117"+
    "\1\41\1\42\1\217\1\44\1\45\11\217\1\53\1\54"+
    "\1\37\1\55\1\37\1\56\7\217\1\22\1\217\1\216"+
    "\4\217\1\65\1\66\15\217\1\216\4\217\1\67\1\70"+
    "\1\71\1\72\1\73\1\74\1\75\1\76\127\0\1\21"+
    "\125\0\1\22\56\0\1\22\47\0\1\24\1\25\1\24"+
    "\5\25\4\0\1\220\7\0\1\25\2\0\11\25\3\0"+
    "\1\221\1\0\1\222\7\25\1\0\1\25\1\24\4\25"+
    "\2\0\15\25\1\24\4\25\15\0\10\25\4\0\1\220"+
    "\7\0\1\25\2\0\11\25\5\0\1\222\7\25\1\0"+
    "\6\25\2\0\22\25\15\0\1\24\1\25\1\223\5\25"+
    "\4\0\1\220\7\0\1\25\2\0\11\25\3\0\1\221"+
    "\1\0\1\222\7\25\1\0\1\25\1\24\4\25\2\0"+
    "\15\25\1\24\4\25\10\0\1\224\2\0\12\224\1\225"+
    "\107\224\1\226\2\0\13\226\1\225\106\226\1\227\2\0"+
    "\14\227\1\225\105\227\20\0\1\37\5\0\1\37\103\0"+
    "\1\230\1\0\1\230\11\0\1\37\4\0\1\37\4\0"+
    "\1\231\30\0\1\230\23\0\1\230\21\0\10\232\5\0"+
    "\1\37\3\0\1\37\2\0\1\232\2\0\11\232\6\0"+
    "\7\232\1\0\6\232\2\0\22\232\34\0\1\37\1\0"+
    "\1\37\122\0\1\37\124\0\1\37\1\0\1\37\4\0"+
    "\1\72\3\0\1\233\4\0\1\234\6\0\1\235\3\0"+
    "\1\236\1\237\2\0\1\240\2\0\1\241\65\0\1\37"+
    "\102\0\10\242\3\0\2\243\1\0\1\243\5\0\1\242"+
    "\2\0\11\242\2\0\1\244\3\0\7\242\1\0\6\242"+
    "\2\0\22\242\15\0\10\25\4\0\1\220\7\0\1\25"+
    "\2\0\11\25\5\0\1\222\1\57\6\25\1\0\6\25"+
    "\2\0\22\25\36\0\1\245\3\0\1\246\120\0\1\37"+
    "\4\0\1\37\76\0\10\25\4\0\1\220\7\0\1\25"+
    "\2\0\1\25\1\247\1\25\1\247\5\25\5\0\1\222"+
    "\7\25\1\0\6\25\2\0\22\25\15\0\10\25\4\0"+
    "\1\220\7\0\1\250\2\0\4\25\1\247\4\25\5\0"+
    "\1\222\7\25\1\0\6\25\2\0\22\25\15\0\10\25"+
    "\4\0\1\220\7\0\1\25\2\0\3\25\1\247\5\25"+
    "\5\0\1\222\1\251\6\25\1\0\6\25\2\0\22\25"+
    "\15\0\10\25\4\0\1\220\7\0\1\25\2\0\7\25"+
    "\1\252\1\25\5\0\1\222\7\25\1\0\6\25\2\0"+
    "\22\25\15\0\10\25\4\0\1\220\7\0\1\25\2\0"+
    "\11\25\5\0\1\222\1\25\1\253\5\25\1\0\6\25"+
    "\2\0\22\25\55\0\1\37\125\0\1\37\126\0\1\254"+
    "\126\0\1\255\57\0\10\25\4\0\1\220\7\0\1\25"+
    "\2\0\11\25\5\0\1\222\3\25\1\247\3\25\1\0"+
    "\6\25\2\0\22\25\15\0\10\25\4\0\1\220\7\0"+
    "\1\25\2\0\5\25\1\256\3\25\5\0\1\222\7\25"+
    "\1\0\6\25\2\0\22\25\15\0\10\25\4\0\1\220"+
    "\7\0\1\25\2\0\3\25\1\257\5\25\5\0\1\222"+
    "\7\25\1\0\6\25\2\0\22\25\15\0\10\25\4\0"+
    "\1\220\7\0\1\25\2\0\3\25\1\260\5\25\5\0"+
    "\1\222\7\25\1\0\6\25\2\0\22\25\15\0\10\25"+
    "\4\0\1\220\7\0\1\25\2\0\6\25\1\261\2\25"+
    "\5\0\1\222\7\25\1\0\5\25\1\262\2\0\22\25"+
    "\15\0\10\25\4\0\1\220\7\0\1\25\2\0\11\25"+
    "\5\0\1\222\6\25\1\263\1\0\6\25\2\0\22\25"+
    "\14\0\1\264\10\265\10\264\1\0\3\264\1\265\2\264"+
    "\11\265\2\264\1\266\3\264\7\265\1\0\6\265\2\264"+
    "\22\265\6\264\7\0\10\267\3\0\2\270\1\0\1\270"+
    "\5\0\1\267\2\0\11\267\2\0\1\271\3\0\7\267"+
    "\1\0\6\267\2\0\22\267\10\0\2\67\1\272\122\67"+
    "\2\0\1\101\123\0\1\273\1\101\1\102\56\0\1\102"+
    "\47\0\10\103\14\0\1\103\2\0\11\103\5\0\1\274"+
    "\7\103\1\0\6\103\2\0\22\103\15\0\1\106\1\0"+
    "\1\106\40\0\1\275\13\0\1\106\23\0\1\106\21\0"+
    "\1\106\56\0\1\106\23\0\1\106\14\0\2\114\1\115"+
    "\124\114\1\115\37\114\1\276\62\114\24\0\1\37\1\0"+
    "\1\37\4\0\1\72\76\0\10\25\4\0\1\220\7\0"+
    "\1\25\2\0\3\25\1\247\5\25\5\0\1\222\1\277"+
    "\6\25\1\0\6\25\2\0\22\25\15\0\10\25\4\0"+
    "\1\220\7\0\1\25\2\0\3\25\1\300\5\25\5\0"+
    "\1\222\7\25\1\0\6\25\2\0\22\25\15\0\10\25"+
    "\4\0\1\220\7\0\1\25\2\0\6\25\1\261\2\25"+
    "\5\0\1\222\7\25\1\0\6\25\2\0\22\25\10\0"+
    "\2\123\1\0\124\123\1\125\122\123\5\0\1\130\1\131"+
    "\1\130\5\131\4\0\1\220\7\0\1\131\2\0\11\131"+
    "\3\0\1\301\1\0\1\302\7\131\1\0\1\131\1\130"+
    "\4\131\2\0\15\131\1\130\4\131\15\0\10\131\4\0"+
    "\1\220\7\0\1\131\2\0\11\131\5\0\1\302\7\131"+
    "\1\0\6\131\2\0\22\131\15\0\1\132\1\131\1\132"+
    "\5\131\4\0\1\220\7\0\1\131\2\0\11\131\3\0"+
    "\1\221\1\0\1\302\7\131\1\0\1\131\1\132\4\131"+
    "\2\0\15\131\1\132\4\131\15\0\1\303\7\131\4\0"+
    "\1\220\7\0\1\131\2\0\11\131\5\0\1\302\7\131"+
    "\1\0\1\131\1\303\4\131\2\0\15\131\1\303\4\131"+
    "\15\0\1\157\1\160\1\157\5\160\4\0\1\220\7\0"+
    "\1\160\2\0\11\160\3\0\1\221\1\0\1\222\7\160"+
    "\1\0\1\160\1\157\4\160\2\0\15\160\1\157\4\160"+
    "\15\0\10\160\4\0\1\220\7\0\1\160\2\0\11\160"+
    "\5\0\1\222\7\160\1\0\6\160\2\0\22\160\15\0"+
    "\1\161\1\162\1\161\5\162\4\0\1\220\7\0\1\162"+
    "\2\0\11\162\3\0\1\301\1\0\1\222\7\162\1\0"+
    "\1\162\1\161\4\162\2\0\15\162\1\161\4\162\15\0"+
    "\10\162\4\0\1\220\7\0\1\162\2\0\11\162\5\0"+
    "\1\222\7\162\1\0\6\162\2\0\22\162\15\0\1\163"+
    "\1\162\1\163\5\162\4\0\1\220\7\0\1\162\2\0"+
    "\11\162\3\0\1\221\1\0\1\222\7\162\1\0\1\162"+
    "\1\163\4\162\2\0\15\162\1\163\4\162\15\0\1\304"+
    "\7\162\4\0\1\220\7\0\1\162\2\0\11\162\5\0"+
    "\1\222\7\162\1\0\1\162\1\304\4\162\2\0\15\162"+
    "\1\304\4\162\15\0\1\167\1\170\1\167\5\170\4\0"+
    "\1\220\7\0\1\170\2\0\11\170\3\0\1\305\1\0"+
    "\1\306\7\170\1\0\1\170\1\167\4\170\2\0\15\170"+
    "\1\167\4\170\15\0\10\170\4\0\1\220\7\0\1\170"+
    "\2\0\11\170\5\0\1\306\7\170\1\0\6\170\2\0"+
    "\22\170\15\0\1\171\1\170\1\171\5\170\4\0\1\220"+
    "\7\0\1\170\2\0\11\170\3\0\1\221\1\0\1\306"+
    "\7\170\1\0\1\170\1\171\4\170\2\0\15\170\1\171"+
    "\4\170\15\0\1\307\7\170\4\0\1\220\7\0\1\170"+
    "\2\0\11\170\5\0\1\306\7\170\1\0\1\170\1\307"+
    "\4\170\2\0\15\170\1\307\4\170\15\0\1\216\1\217"+
    "\1\216\5\217\4\0\1\220\7\0\1\217\2\0\11\217"+
    "\3\0\1\221\1\0\1\222\7\217\1\0\1\217\1\216"+
    "\4\217\2\0\15\217\1\216\4\217\15\0\10\217\4\0"+
    "\1\220\7\0\1\217\2\0\11\217\5\0\1\222\7\217"+
    "\1\0\6\217\2\0\22\217\43\0\1\310\76\0\1\311"+
    "\1\0\1\311\54\0\1\311\23\0\1\311\66\0\1\312"+
    "\57\0\1\24\1\25\1\24\1\313\1\25\1\314\2\25"+
    "\4\0\1\220\7\0\1\25\2\0\11\25\3\0\1\221"+
    "\1\0\1\222\7\25\1\0\1\25\1\24\4\25\2\0"+
    "\15\25\1\24\4\25\15\0\1\230\1\0\1\230\40\0"+
    "\1\221\13\0\1\230\23\0\1\230\21\0\10\232\14\0"+
    "\1\232\2\0\11\232\5\0\1\315\7\232\1\0\6\232"+
    "\2\0\22\232\51\0\1\316\136\0\1\317\136\0\1\320"+
    "\112\0\1\321\106\0\1\322\126\0\1\323\124\0\1\324"+
    "\14\0\1\325\55\0\10\242\14\0\1\242\2\0\11\242"+
    "\5\0\1\326\7\242\1\0\6\242\2\0\22\242\122\0"+
    "\1\243\45\0\1\37\74\0\1\327\1\0\10\330\1\331"+
    "\1\332\1\333\11\0\1\330\2\0\11\330\6\0\7\330"+
    "\1\327\6\330\2\0\22\330\15\0\10\25\4\0\1\220"+
    "\7\0\1\25\2\0\11\25\5\0\1\222\5\25\1\334"+
    "\1\25\1\0\6\25\2\0\22\25\15\0\10\25\4\0"+
    "\1\220\7\0\1\25\2\0\1\25\1\247\7\25\5\0"+
    "\1\222\7\25\1\0\6\25\2\0\22\25\15\0\10\25"+
    "\4\0\1\220\7\0\1\25\2\0\10\25\1\247\5\0"+
    "\1\222\7\25\1\0\6\25\2\0\22\25\15\0\10\25"+
    "\4\0\1\220\7\0\1\25\2\0\6\25\1\335\2\25"+
    "\5\0\1\222\7\25\1\0\6\25\2\0\22\25\60\0"+
    "\1\37\61\0\10\25\4\0\1\220\7\0\1\25\2\0"+
    "\11\25\5\0\1\222\2\25\1\247\4\25\1\0\6\25"+
    "\2\0\22\25\15\0\10\25\4\0\1\220\7\0\1\25"+
    "\2\0\11\25\5\0\1\222\4\25\1\336\2\25\1\0"+
    "\6\25\2\0\22\25\15\0\10\25\4\0\1\220\7\0"+
    "\1\25\2\0\4\25\1\337\4\25\5\0\1\222\4\25"+
    "\1\247\2\25\1\0\6\25\2\0\22\25\15\0\10\25"+
    "\4\0\1\220\7\0\1\25\2\0\11\25\5\0\1\222"+
    "\1\25\1\340\5\25\1\0\6\25\2\0\22\25\15\0"+
    "\10\25\4\0\1\220\7\0\1\25\2\0\11\25\5\0"+
    "\1\222\7\25\1\0\3\25\1\341\2\25\2\0\22\25"+
    "\15\0\10\25\4\0\1\220\7\0\1\25\2\0\3\25"+
    "\1\342\5\25\5\0\1\222\7\25\1\0\6\25\2\0"+
    "\22\25\15\0\10\265\14\0\1\265\2\0\11\265\5\0"+
    "\1\343\7\265\1\0\6\265\2\0\22\265\20\0\1\344"+
    "\3\264\1\345\56\0\1\346\1\347\1\264\2\0\1\264"+
    "\1\0\1\264\1\350\1\264\1\351\1\352\1\264\1\0"+
    "\4\264\15\0\10\267\14\0\1\267\2\0\11\267\5\0"+
    "\1\353\7\267\1\0\6\267\2\0\22\267\122\0\1\270"+
    "\64\0\1\354\52\0\2\114\1\115\65\114\1\355\34\114"+
    "\5\0\10\25\4\0\1\220\7\0\1\25\2\0\11\25"+
    "\5\0\1\222\4\25\1\247\2\25\1\0\6\25\2\0"+
    "\22\25\15\0\1\356\1\0\1\311\54\0\1\356\23\0"+
    "\1\356\66\0\1\357\57\0\1\303\1\131\1\303\5\131"+
    "\4\0\1\220\7\0\1\131\2\0\11\131\3\0\1\360"+
    "\1\0\1\302\7\131\1\0\1\131\1\303\4\131\2\0"+
    "\15\131\1\303\4\131\15\0\1\304\1\162\1\304\5\162"+
    "\4\0\1\220\7\0\1\162\2\0\11\162\3\0\1\360"+
    "\1\0\1\222\7\162\1\0\1\162\1\304\4\162\2\0"+
    "\15\162\1\304\4\162\15\0\1\361\1\0\1\311\54\0"+
    "\1\361\23\0\1\361\66\0\1\362\57\0\1\307\1\170"+
    "\1\307\5\170\4\0\1\220\7\0\1\170\2\0\11\170"+
    "\3\0\1\363\1\0\1\306\7\170\1\0\1\170\1\307"+
    "\4\170\2\0\15\170\1\307\4\170\15\0\10\364\14\0"+
    "\1\364\2\0\11\364\6\0\7\364\1\0\6\364\2\0"+
    "\22\364\15\0\4\25\1\365\3\25\4\0\1\220\7\0"+
    "\1\25\2\0\11\25\5\0\1\222\7\25\1\0\6\25"+
    "\2\0\22\25\15\0\6\25\1\366\1\25\4\0\1\220"+
    "\7\0\1\25\2\0\11\25\5\0\1\222\7\25\1\0"+
    "\6\25\2\0\22\25\62\0\1\367\114\0\1\370\12\0"+
    "\1\371\124\0\1\371\106\0\1\321\143\0\1\371\105\0"+
    "\1\372\141\0\1\373\106\0\1\374\130\0\1\375\134\0"+
    "\1\376\57\0\10\330\14\0\1\330\2\0\11\330\6\0"+
    "\7\330\1\0\6\330\2\0\22\330\10\0\1\377\2\0"+
    "\13\377\2\0\41\377\2\0\42\377\1\u0100\2\0\13\u0100"+
    "\2\0\41\u0100\2\0\42\u0100\1\u0101\2\0\13\u0101\2\0"+
    "\41\u0101\2\0\42\u0101\5\0\10\25\4\0\1\220\7\0"+
    "\1\25\2\0\11\25\5\0\1\222\6\25\1\u0102\1\0"+
    "\6\25\2\0\22\25\15\0\10\25\4\0\1\220\7\0"+
    "\1\25\2\0\11\25\5\0\1\222\7\25\1\0\4\25"+
    "\1\u0103\1\25\2\0\22\25\15\0\10\25\4\0\1\220"+
    "\7\0\1\25\2\0\11\25\5\0\1\222\5\25\1\u0104"+
    "\1\25\1\0\6\25\2\0\22\25\15\0\10\25\4\0"+
    "\1\220\7\0\1\25\2\0\11\25\5\0\1\222\7\25"+
    "\1\0\5\25\1\u0105\2\0\22\25\15\0\10\25\4\0"+
    "\1\220\7\0\1\25\2\0\1\u0106\10\25\5\0\1\222"+
    "\7\25\1\0\6\25\2\0\22\25\62\0\1\u0107\63\0"+
    "\1\u0108\126\0\1\u0109\124\0\1\u010a\61\0\1\u010b\37\0"+
    "\1\u010c\226\0\1\u010d\23\0\1\u010e\2\0\1\u010f\224\0"+
    "\1\u0110\62\0\1\u0111\57\0\10\103\14\0\1\103\2\0"+
    "\11\103\6\0\7\103\1\0\6\103\2\0\22\103\10\0"+
    "\2\114\1\115\32\114\1\u0112\67\114\5\0\1\356\1\0"+
    "\1\356\40\0\1\360\13\0\1\356\23\0\1\356\21\0"+
    "\10\131\14\0\1\131\2\0\11\131\6\0\7\131\1\0"+
    "\6\131\2\0\22\131\15\0\1\356\56\0\1\356\23\0"+
    "\1\356\21\0\1\361\1\0\1\361\40\0\1\363\13\0"+
    "\1\361\23\0\1\361\21\0\10\170\14\0\1\170\2\0"+
    "\11\170\6\0\7\170\1\0\6\170\2\0\22\170\15\0"+
    "\1\361\56\0\1\361\23\0\1\361\21\0\10\364\4\0"+
    "\1\220\7\0\1\364\2\0\11\364\5\0\1\222\7\364"+
    "\1\0\6\364\2\0\22\364\15\0\5\25\1\u0113\2\25"+
    "\4\0\1\220\7\0\1\25\2\0\11\25\5\0\1\222"+
    "\7\25\1\0\6\25\2\0\22\25\15\0\7\25\1\u0114"+
    "\4\0\1\220\7\0\1\25\2\0\11\25\5\0\1\222"+
    "\7\25\1\0\6\25\2\0\22\25\15\0\10\u0115\14\0"+
    "\1\u0115\2\0\11\u0115\6\0\7\u0115\1\0\6\u0115\2\0"+
    "\22\u0115\63\0\1\u0116\51\0\2\371\1\u0117\122\371\43\0"+
    "\1\371\136\0\1\u0118\127\0\1\u0119\133\0\1\371\42\0"+
    "\10\u011a\14\0\1\u011a\2\0\11\u011a\6\0\7\u011a\1\0"+
    "\6\u011a\2\0\22\u011a\10\0\1\377\2\0\12\377\1\u011b"+
    "\2\0\41\377\2\0\42\377\1\u0100\2\0\13\u0100\1\u011c"+
    "\1\0\41\u0100\2\0\42\u0100\1\u0101\2\0\13\u0101\1\0"+
    "\1\u011c\41\u0101\2\0\42\u0101\5\0\10\25\4\0\1\220"+
    "\7\0\1\25\2\0\1\25\1\u011d\7\25\5\0\1\222"+
    "\7\25\1\0\6\25\2\0\22\25\15\0\10\25\4\0"+
    "\1\220\7\0\1\25\2\0\11\25\5\0\1\222\1\25"+
    "\1\u011e\5\25\1\0\6\25\2\0\22\25\15\0\10\25"+
    "\4\0\1\220\7\0\1\25\2\0\5\25\1\u011f\3\25"+
    "\5\0\1\222\7\25\1\0\6\25\2\0\22\25\15\0"+
    "\10\25\4\0\1\220\7\0\1\25\2\0\11\25\5\0"+
    "\1\222\5\25\1\u0120\1\25\1\0\6\25\2\0\22\25"+
    "\15\0\10\25\4\0\1\220\7\0\1\25\2\0\11\25"+
    "\5\0\1\222\1\25\1\57\5\25\1\0\6\25\2\0"+
    "\22\25\15\0\10\u0121\14\0\1\u0121\2\0\11\u0121\6\0"+
    "\7\u0121\1\0\6\u0121\2\0\22\u0121\113\0\1\u0122\116\0"+
    "\1\u0123\123\0\1\u0124\42\0\1\u0125\121\0\1\u0126\212\0"+
    "\1\u0127\124\0\1\u0128\136\0\1\u0129\25\0\1\u012a\121\0"+
    "\10\u012b\14\0\1\u012b\2\0\11\u012b\6\0\7\u012b\1\0"+
    "\6\u012b\2\0\22\u012b\10\0\2\u0112\1\u012c\122\u0112\5\0"+
    "\2\25\1\u012d\5\25\4\0\1\220\7\0\1\25\2\0"+
    "\11\25\5\0\1\222\7\25\1\0\6\25\2\0\22\25"+
    "\15\0\6\25\1\u0113\1\25\4\0\1\220\7\0\1\25"+
    "\2\0\11\25\5\0\1\222\7\25\1\0\6\25\2\0"+
    "\22\25\65\0\1\u012e\133\0\1\371\101\0\1\371\70\0"+
    "\10\25\4\0\1\220\7\0\1\25\2\0\11\25\5\0"+
    "\1\222\6\25\1\247\1\0\6\25\2\0\22\25\15\0"+
    "\10\25\4\0\1\220\7\0\1\25\2\0\2\25\1\u012f"+
    "\6\25\5\0\1\222\7\25\1\0\6\25\2\0\22\25"+
    "\15\0\10\25\4\0\1\220\7\0\1\25\2\0\3\25"+
    "\1\256\5\25\5\0\1\222\7\25\1\0\6\25\2\0"+
    "\22\25\15\0\10\25\4\0\1\220\7\0\1\25\2\0"+
    "\11\25\5\0\1\222\3\25\1\u0130\3\25\1\0\6\25"+
    "\2\0\22\25\116\0\1\u0131\27\0\1\u0132\124\0\1\u0133"+
    "\123\0\1\u0134\126\0\1\u0135\1\0\1\u0136\214\0\1\u0137"+
    "\123\0\1\u0138\131\0\1\u0139\25\0\1\264\120\0\2\25"+
    "\1\u013a\5\25\4\0\1\220\7\0\1\25\2\0\11\25"+
    "\5\0\1\222\7\25\1\0\6\25\2\0\22\25\70\0"+
    "\1\u013b\51\0\10\25\4\0\1\220\7\0\1\25\2\0"+
    "\3\25\1\u013c\5\25\5\0\1\222\7\25\1\0\6\25"+
    "\2\0\22\25\15\0\10\25\4\0\1\220\7\0\1\25"+
    "\2\0\3\25\1\u013d\5\25\5\0\1\222\7\25\1\0"+
    "\6\25\2\0\22\25\22\0\1\u013e\126\0\1\264\205\0"+
    "\1\u013f\36\0\1\u0140\125\0\1\u0141\210\0\1\u0142\42\0"+
    "\1\u0143\220\0\1\u0144\122\0\1\u0145\61\0\1\u0146\160\0"+
    "\1\u0147\40\0\1\u0148\213\0\1\u0149\123\0\1\u014a\122\0"+
    "\1\u014b\36\0\1\u014c\127\0\1\u014d\220\0\1\u014e\54\0"+
    "\1\371\77\0\1\u014f\211\0\1\u0150\127\0\1\u0151\130\0"+
    "\1\u0152\27\0\1\u0153\124\0\1\u0154\124\0\1\264\217\0"+
    "\1\u0155\117\0\1\264\35\0\1\u0156\215\0\1\u0157\122\0"+
    "\1\u0158\35\0\1\u0159\211\0\1\u015a\43\0\1\u015b\210\0"+
    "\1\u015c\41\0\1\u015d\117\0\1\u015e\217\0\1\u015f\116\0"+
    "\1\u0160\134\0\1\u014d\115\0\1\u0161\37\0\1\u0162\223\0"+
    "\1\u0163\30\0\1\u0164\217\0\1\u0165\32\0\1\u0166\212\0"+
    "\1\u0167\126\0\1\u0168\131\0\1\u0169\107\0\1\u016a\130\0"+
    "\1\264\33\0\1\u016b\130\0\1\u016c\210\0\1\u016d\34\0"+
    "\1\u016e\220\0\1\u016f\117\0\1\u0166\133\0\1\u0170\30\0"+
    "\1\u0171\126\0\1\u0172\220\0\1\264\30\0\1\u0173\215\0"+
    "\1\u0174\34\0\1\u0175\214\0\1\u0166\115\0\1\u0176\142\0"+
    "\1\u014d\11\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[23970];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\5\1\1\0\2\1\5\0\1\11\1\1\1\11"+
    "\1\1\1\11\13\1\1\11\30\1\10\11\1\1\1\11"+
    "\2\1\1\11\3\1\2\11\1\1\1\11\1\1\1\11"+
    "\7\1\2\11\36\1\1\11\32\1\3\0\1\1\1\0"+
    "\1\11\2\0\1\1\1\11\1\1\7\0\1\1\1\11"+
    "\1\0\10\1\1\11\6\1\1\11\3\1\1\11\1\0"+
    "\1\11\3\0\3\1\2\0\2\1\2\0\1\1\1\11"+
    "\4\1\13\0\1\1\3\0\7\1\1\0\5\1\1\0"+
    "\1\1\2\0\3\1\1\0\2\1\2\0\2\1\2\0"+
    "\1\1\10\0\5\1\13\0\3\1\2\0\1\11\3\0"+
    "\1\1\1\11\4\1\13\0\1\11\1\1\1\0\2\1"+
    "\11\0\1\1\1\0\2\1\71\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[374];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    public void setTokenStart(int position){zzCurrentPos = zzStartRead = position;}
    public int getNextTokenStart(){ return zzMarkedPos;}
    public boolean isLastToken(){ return zzMarkedPos == zzEndRead; }

    public void yybegin_YYINITIAL(){yybegin(YYINITIAL);}
    public void yybegin_LEX_MULTILINE(){yybegin(LEX_MULTILINE);}
    public void yybegin_LEX_MULTILINE_TOKEN(){yybegin(LEX_MULTILINE_TOKEN);}
    public void yybegin_LEX_MULTILINE_WAITING(){yybegin(LEX_MULTILINE_WAITING);}
    public void yybegin_LEX_EOF(){yybegin(LEX_EOF);}
    public void yybegin_LEX_POD(){yybegin(LEX_POD);}

    public boolean yystate_LEX_MULTILINE_WAITING(){return yystate() == LEX_MULTILINE_WAITING;}



  public PerlLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PerlLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 198) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 55: 
          { yybegin(LEX_REQUIRE); return PerlFunctionUtil.getFunctionType(yytext().toString());
          }
        case 56: break;
        case 45: 
          { return PERL_ARRAY;
          }
        case 57: break;
        case 5: 
          { yybegin(YYINITIAL);return PERL_MULTILINE_MARKER;
          }
        case 58: break;
        case 51: 
          { processPodOpener();break;
          }
        case 59: break;
        case 9: 
          { return PERL_NUMBER;
          }
        case 60: break;
        case 38: 
          { yybegin(YYINITIAL);return PERL_FUNCTION;
          }
        case 61: break;
        case 36: 
          { yybegin(YYINITIAL);
        return PERL_VERSION;
          }
        case 62: break;
        case 34: 
          { yybegin(LEX_PACKAGE_USE_PARAMS);
        return PERL_STRING;
          }
        case 63: break;
        case 53: 
          { processDataOpener(); break;
          }
        case 64: break;
        case 11: 
          { return PERL_OPERATOR;
          }
        case 65: break;
        case 1: 
          { return TokenType.WHITE_SPACE;
          }
        case 66: break;
        case 41: 
          { return PERL_HASH;
          }
        case 67: break;
        case 18: 
          { return PERL_COMMA;
          }
        case 68: break;
        case 31: 
          { yybegin(LEX_PACKAGE_USE_PARAMS);
        return PERL_VERSION;
          }
        case 69: break;
        case 49: 
          { yybegin(LEX_FUNCTION_DEFINITION); return PerlFunctionUtil.getFunctionType(yytext().toString());
          }
        case 70: break;
        case 3: 
          { if( isLastToken() )
        {
            endPodBlock();
        }
        break;
          }
        case 71: break;
        case 26: 
          { yybegin(LEX_PACKAGE_DEFINITION_BLOCK); return PERL_VERSION;
          }
        case 72: break;
        case 24: 
          { yybegin(LEX_PACKAGE_DEFINITION_VERSION); return PERL_PACKAGE;
          }
        case 73: break;
        case 54: 
          { yybegin(LEX_PACKAGE_DEFINITION); return PerlFunctionUtil.getFunctionType(yytext().toString());
          }
        case 74: break;
        case 47: 
          { yypushback(2);
    return PerlPackageUtil.getPackageType(yytext().toString());
          }
        case 75: break;
        case 8: 
          { return processSemicolon();
          }
        case 76: break;
        case 29: 
          { if( isLastToken() )
        {
            return endMultiline();
        }
        break;
          }
        case 77: break;
        case 40: 
          { return PERL_GLOB;
          }
        case 78: break;
        case 2: 
          { if( isLastToken() )
            return endDataBlock();
        break;
          }
        case 79: break;
        case 43: 
          { return PERL_DEPACKAGE;
          }
        case 80: break;
        case 35: 
          { yypushback(1);yybegin(YYINITIAL);break;
          }
        case 81: break;
        case 15: 
          { return PERL_COMMENT;
          }
        case 82: break;
        case 32: 
          { yybegin(LEX_PACKAGE_USE_VERSION);
        return PerlPackageUtil.getPackageType(yytext().toString());
          }
        case 83: break;
        case 48: 
          { return processMultilineOpener();
          }
        case 84: break;
        case 37: 
          { yybegin(YYINITIAL);
        return PerlPackageUtil.getPackageType(yytext().toString());
          }
        case 85: break;
        case 7: 
          { return processNewLine();
          }
        case 86: break;
        case 27: 
          { yybegin(YYINITIAL); return PERL_LBRACE;
          }
        case 87: break;
        case 33: 
          { return PERL_STRING;
          }
        case 88: break;
        case 16: 
          { return PERL_LPAREN;
          }
        case 89: break;
        case 12: 
          { return PERL_SIGIL_HASH;
          }
        case 90: break;
        case 10: 
          { return PERL_FUNCTION;
          }
        case 91: break;
        case 6: 
          { return TokenType.BAD_CHARACTER;
          }
        case 92: break;
        case 44: 
          { return PERL_SCALAR;
          }
        case 93: break;
        case 23: 
          { yybegin(YYINITIAL);  return TokenType.BAD_CHARACTER;
          }
        case 94: break;
        case 17: 
          { return PERL_RPAREN;
          }
        case 95: break;
        case 39: 
          { yybegin(LEX_DEREFERENCE);return PERL_DEREFERENCE;
          }
        case 96: break;
        case 13: 
          { return PERL_SIGIL_SCALAR;
          }
        case 97: break;
        case 14: 
          { return PERL_SIGIL_ARRAY;
          }
        case 98: break;
        case 30: 
          { yypushback(1); yybegin(YYINITIAL); break;
          }
        case 99: break;
        case 4: 
          { if( isMultilineEnd() || isLastToken())
        {
            return endMultiline();
        }
        break;
          }
        case 100: break;
        case 42: 
          { yybegin(LEX_PACKAGE_USE); return PerlFunctionUtil.getFunctionType(yytext().toString());
          }
        case 101: break;
        case 25: 
          { yybegin(YYINITIAL);
        return TokenType.BAD_CHARACTER;
          }
        case 102: break;
        case 50: 
          { yybegin(LEX_PACKAGE_USE);return PerlFunctionUtil.getFunctionType(yytext().toString());
          }
        case 103: break;
        case 46: 
          { yypushback(2);
    return PERL_PACKAGE;
          }
        case 104: break;
        case 21: 
          { return PERL_LBRACE;
          }
        case 105: break;
        case 22: 
          { return PERL_RBRACE;
          }
        case 106: break;
        case 52: 
          { return endPodBlock();
          }
        case 107: break;
        case 28: 
          { yybegin(YYINITIAL); return TokenType.BAD_CHARACTER;
          }
        case 108: break;
        case 20: 
          { return PERL_RBRACK;
          }
        case 109: break;
        case 19: 
          { return PERL_LBRACK;
          }
        case 110: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
