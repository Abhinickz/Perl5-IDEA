/* The following code was generated by JFlex 1.4.3 on 01.05.15 8:14 */

package com.perl5.lang.perl.lexer;

/*
    http://jflex.de/manual.html
    http://www2.cs.tum.edu/projects/cup

*/

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import org.jetbrains.annotations.NotNull;
import com.perl5.lang.perl.util.PerlFunctionUtil;
import com.perl5.lang.perl.util.PerlScalarUtil;
import com.perl5.lang.perl.util.PerlHashUtil;
import com.perl5.lang.perl.util.PerlGlobUtil;
import com.perl5.lang.perl.util.PerlArrayUtil;
import com.perl5.lang.perl.util.PerlPackageUtil;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 01.05.15 8:14 from the specification file
 * <tt>C:/Repository/Perl5-IDEA/src/com/perl5/lang/perl/lexer/Perl.flex</tt>
 */
public class PerlLexer extends PerlLexerProto implements FlexLexer, PerlElementTypes {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int LEX_POD = 10;
  public static final int LEX_MULTILINE = 14;
  public static final int LEX_QUOTE_LIKE_LIST_OPENER = 30;
  public static final int LEX_DEREFERENCE = 38;
  public static final int LEX_MULTILINE_WAITING = 12;
  public static final int LEX_QUOTE_LIKE_CHARS = 26;
  public static final int LEX_QUOTE_LIKE_WORDS = 32;
  public static final int LEX_PACKAGE_DEFINITION = 2;
  public static final int LEX_FUNCTION_DEFINITION = 36;
  public static final int LEX_PACKAGE_USE_VERSION = 20;
  public static final int LEX_PACKAGE_DEFINITION_VERSION = 4;
  public static final int LEX_QUOTE_LIKE_OPENER = 24;
  public static final int LEX_PACKAGE_DEFINITION_BLOCK = 6;
  public static final int LEX_PACKAGE_USE = 18;
  public static final int LEX_QUOTE_LIKE_CLOSER = 28;
  public static final int LEX_REQUIRE = 22;
  public static final int LEX_EOF = 8;
  public static final int YYINITIAL = 0;
  public static final int LEX_MULTILINE_TOKEN = 16;
  public static final int LEX_QUOTE_LIKE_LIST_CLOSER = 34;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 14, 14, 17, 17,  6, 6
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\60\1\20\1\57"+
    "\1\115\1\71\1\25\1\42\1\61\1\116\1\117\1\17\1\15\1\120"+
    "\1\16\1\45\1\24\1\5\1\64\1\64\1\64\1\64\3\5\1\110"+
    "\1\5\1\47\1\4\1\27\1\23\1\30\1\46\1\72\1\13\1\77"+
    "\1\103\1\12\1\10\1\107\1\76\1\112\1\75\2\6\1\104\1\102"+
    "\1\11\1\106\1\114\1\6\1\74\1\100\1\14\1\105\1\113\1\73"+
    "\1\111\1\101\1\6\1\121\1\22\1\122\1\44\1\7\1\62\1\51"+
    "\1\66\1\37\1\52\1\34\1\54\1\33\1\63\1\55\1\6\1\67"+
    "\1\31\1\40\1\36\1\50\1\41\1\35\1\53\1\56\1\32\1\70"+
    "\1\65\1\123\1\26\1\124\1\6\1\125\1\43\1\126\1\21\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\3\1\1\2\1\3\1\0\1\4\1\5\11\0"+
    "\2\6\1\7\1\1\1\10\1\11\1\12\1\11\10\13"+
    "\1\14\3\13\3\12\1\15\4\12\2\13\1\6\1\13"+
    "\5\12\3\6\3\12\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\2\30\2\1\1\31"+
    "\2\32\1\33\1\32\1\34\2\35\1\2\3\3\1\13"+
    "\3\12\2\4\1\36\2\37\1\40\2\41\21\37\1\41"+
    "\2\37\1\40\21\37\2\42\1\40\2\43\21\42\1\43"+
    "\2\42\1\44\1\45\2\46\1\47\1\50\1\51\1\52"+
    "\2\53\4\0\2\11\1\54\1\55\7\0\2\56\1\0"+
    "\3\13\2\12\1\15\1\57\1\60\3\12\1\13\1\61"+
    "\6\12\1\0\1\62\2\0\3\12\3\63\2\64\1\0"+
    "\1\20\3\0\1\3\2\12\2\0\2\40\1\0\1\40"+
    "\1\65\1\11\1\66\1\0\2\12\13\0\1\67\3\0"+
    "\1\12\1\70\5\12\1\71\2\12\1\72\1\0\5\63"+
    "\1\0\1\63\2\0\1\3\1\40\1\66\1\0\1\66"+
    "\1\0\1\73\2\12\2\0\1\74\10\0\6\12\13\0"+
    "\1\75\1\41\1\43\2\12\2\0\1\74\3\0\2\67"+
    "\4\12\13\0\1\75\1\12\1\0\2\12\11\0\1\76"+
    "\1\0\1\77\1\100\71\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[417];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\127\0\256\0\u0105\0\u015c\0\u01b3\0\u020a\0\u0261"+
    "\0\u02b8\0\u030f\0\u0366\0\u03bd\0\u0414\0\u046b\0\u04c2\0\u0519"+
    "\0\u0570\0\u05c7\0\u061e\0\u0675\0\u061e\0\u06cc\0\u061e\0\u0723"+
    "\0\u077a\0\u07d1\0\u0828\0\u087f\0\u08d6\0\u092d\0\u0984\0\u061e"+
    "\0\u09db\0\u0a32\0\u0a89\0\u0ae0\0\u0b37\0\u0b8e\0\u0be5\0\u0c3c"+
    "\0\u0c93\0\u0cea\0\u0d41\0\u0d98\0\u0def\0\u0e46\0\u0e9d\0\u0ef4"+
    "\0\u0f4b\0\u0fa2\0\u0ff9\0\u1050\0\u10a7\0\u10fe\0\u1155\0\u11ac"+
    "\0\u1203\0\u125a\0\u12b1\0\u1308\0\u135f\0\u13b6\0\u140d\0\u1464"+
    "\0\u061e\0\u061e\0\u061e\0\u061e\0\u061e\0\u061e\0\u061e\0\u061e"+
    "\0\u14bb\0\u061e\0\u1512\0\u1569\0\u061e\0\u14bb\0\u15c0\0\u1617"+
    "\0\u061e\0\u061e\0\u14bb\0\u061e\0\u166e\0\u061e\0\u16c5\0\u171c"+
    "\0\u1773\0\u17ca\0\u1821\0\u1878\0\u18cf\0\u061e\0\u061e\0\u0675"+
    "\0\u1926\0\u197d\0\u19d4\0\u0828\0\u087f\0\u08d6\0\u092d\0\u0984"+
    "\0\u171c\0\u0a32\0\u0a89\0\u0b37\0\u0b8e\0\u0e9d\0\u0ef4\0\u0f4b"+
    "\0\u0fa2\0\u11ac\0\u1203\0\u125a\0\u1a2b\0\u13b6\0\u140d\0\u1a82"+
    "\0\u077a\0\u0723\0\u0ae0\0\u0be5\0\u0c3c\0\u0c93\0\u0cea\0\u1773"+
    "\0\u0d98\0\u0def\0\u0ff9\0\u1050\0\u10a7\0\u17ca\0\u1821\0\u1ad9"+
    "\0\u1308\0\u061e\0\u0675\0\u1b30\0\u1b87\0\u1bde\0\u0828\0\u087f"+
    "\0\u08d6\0\u092d\0\u0984\0\u171c\0\u0a32\0\u0a89\0\u0b37\0\u0b8e"+
    "\0\u0e9d\0\u0ef4\0\u0f4b\0\u0fa2\0\u11ac\0\u1203\0\u125a\0\u1c35"+
    "\0\u13b6\0\u140d\0\u061e\0\u1c8c\0\u061e\0\u1ce3\0\u061e\0\u061e"+
    "\0\u1d3a\0\u1d91\0\u1de8\0\u1e3f\0\u1e96\0\u1eed\0\u1f44\0\u1f9b"+
    "\0\u1ff2\0\u2049\0\u061e\0\u20a0\0\u20f7\0\u214e\0\u21a5\0\u21fc"+
    "\0\u2253\0\u22aa\0\u2301\0\u2358\0\u061e\0\u23af\0\u2406\0\u245d"+
    "\0\u077a\0\u24b4\0\u250b\0\u077a\0\u077a\0\u2562\0\u25b9\0\u2610"+
    "\0\u2667\0\u26be\0\u061e\0\u2715\0\u276c\0\u27c3\0\u281a\0\u2871"+
    "\0\u28c8\0\u11ac\0\u061e\0\u1203\0\u125a\0\u291f\0\u2976\0\u29cd"+
    "\0\u061e\0\u2a24\0\u2a7b\0\u2ad2\0\u061e\0\u2b29\0\u061e\0\u14bb"+
    "\0\u2b80\0\u1617\0\u2bd7\0\u2562\0\u2c2e\0\u2c85\0\u2cdc\0\u2d33"+
    "\0\u2d8a\0\u2de1\0\u2e38\0\u061e\0\u1eed\0\u2e8f\0\u2ee6\0\u2f3d"+
    "\0\u2f94\0\u2feb\0\u3042\0\u3099\0\u30f0\0\u3147\0\u319e\0\u31f5"+
    "\0\u324c\0\u32a3\0\u32fa\0\u245d\0\u3351\0\u33a8\0\u33ff\0\u3456"+
    "\0\u34ad\0\u077a\0\u3504\0\u355b\0\u35b2\0\u3609\0\u3660\0\u077a"+
    "\0\u36b7\0\u370e\0\u077a\0\u3765\0\u37bc\0\u3813\0\u386a\0\u38c1"+
    "\0\u3918\0\u396f\0\u39c6\0\u3a1d\0\u3a74\0\u3acb\0\u3b22\0\u3b79"+
    "\0\u3bd0\0\u3c27\0\u3c7e\0\u061e\0\u3cd5\0\u3d2c\0\u3d83\0\u3dda"+
    "\0\u3e31\0\u3e88\0\u3edf\0\u3f36\0\u3f8d\0\u3fe4\0\u403b\0\u4092"+
    "\0\u40e9\0\u4140\0\u4197\0\u41ee\0\u4245\0\u429c\0\u42f3\0\u434a"+
    "\0\u43a1\0\u43f8\0\u444f\0\u44a6\0\u44fd\0\u4554\0\u45ab\0\u4602"+
    "\0\u4659\0\u46b0\0\u4707\0\u475e\0\u47b5\0\u480c\0\u4863\0\u20a0"+
    "\0\u48ba\0\u061e\0\u4911\0\u4968\0\u2358\0\u061e\0\u40e9\0\u49bf"+
    "\0\u4a16\0\u4a6d\0\u4ac4\0\u2a24\0\u4b1b\0\u4b72\0\u4bc9\0\u4c20"+
    "\0\u4c77\0\u4cce\0\u4d25\0\u4d7c\0\u4dd3\0\u2ad2\0\u061e\0\u4e2a"+
    "\0\u4e81\0\u4ed8\0\u4f2f\0\u4f86\0\u4fdd\0\u5034\0\u508b\0\u50e2"+
    "\0\u5139\0\u5190\0\u51e7\0\u523e\0\u077a\0\u5295\0\u077a\0\u077a"+
    "\0\u52ec\0\u5343\0\u539a\0\u53f1\0\u5448\0\u549f\0\u54f6\0\u554d"+
    "\0\u55a4\0\u55fb\0\u5652\0\u56a9\0\u5700\0\u5757\0\u57ae\0\u5805"+
    "\0\u585c\0\u58b3\0\u590a\0\u5961\0\u59b8\0\u5a0f\0\u5a66\0\u5abd"+
    "\0\u5b14\0\u5b6b\0\u5bc2\0\u5c19\0\u5c70\0\u5cc7\0\u5d1e\0\u5d75"+
    "\0\u5dcc\0\u5e23\0\u5e7a\0\u5ed1\0\u5f28\0\u5f7f\0\u5fd6\0\u602d"+
    "\0\u6084\0\u60db\0\u6132\0\u6189\0\u61e0\0\u6237\0\u628e\0\u62e5"+
    "\0\u633c\0\u6393\0\u63ea\0\u6441\0\u6498\0\u64ef\0\u6546\0\u659d"+
    "\0\u65f4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[417];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\5\31\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\31\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\40\1\61\1\40\1\62\1\63\1\64\1\65\1\66"+
    "\2\31\1\67\1\70\1\26\1\71\1\72\1\31\1\30"+
    "\1\73\1\31\1\74\1\75\1\76\1\77\15\31\1\30"+
    "\4\31\1\100\1\101\1\102\1\103\1\104\1\105\2\31"+
    "\1\106\1\107\1\110\1\111\1\112\1\113\1\110\10\114"+
    "\11\110\1\114\2\110\11\114\6\110\7\114\1\110\1\113"+
    "\2\110\6\114\2\110\22\114\6\110\2\114\2\110\1\115"+
    "\1\116\1\112\1\113\1\27\1\117\52\115\1\113\3\115"+
    "\1\117\1\120\22\115\1\117\14\115\1\121\1\115\1\122"+
    "\1\123\1\112\1\113\1\27\53\122\1\113\44\122\1\121"+
    "\1\122\2\5\1\124\124\5\2\125\1\126\20\125\1\127"+
    "\103\125\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\30\5\31\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\130\1\42\1\43\1\44\1\45\1\46\1\47\1\31"+
    "\1\50\1\51\1\52\1\131\1\54\1\55\1\31\1\57"+
    "\1\60\1\40\1\61\1\40\1\62\1\63\1\64\1\65"+
    "\1\132\2\31\1\133\1\70\1\26\1\71\1\72\1\31"+
    "\1\30\1\73\1\31\1\74\1\31\1\76\1\77\15\31"+
    "\1\30\4\31\1\100\1\101\1\102\1\103\1\104\1\105"+
    "\2\31\1\106\1\107\1\134\1\135\1\136\124\134\2\11"+
    "\1\0\124\11\1\137\1\140\1\25\1\26\1\27\1\141"+
    "\1\142\1\143\5\142\1\144\1\145\1\146\1\147\1\150"+
    "\1\137\1\151\1\152\1\153\1\142\1\154\1\155\11\142"+
    "\1\156\1\157\1\137\1\160\1\137\1\161\7\142\1\162"+
    "\1\26\1\163\1\164\1\142\1\141\1\165\3\142\1\166"+
    "\1\167\15\142\1\141\4\142\1\100\2\137\1\103\2\137"+
    "\2\142\3\137\1\140\1\25\1\26\1\27\1\170\1\171"+
    "\1\172\5\171\1\144\1\145\1\146\1\147\1\150\1\137"+
    "\1\151\1\152\1\153\1\173\1\154\1\155\1\174\1\171"+
    "\1\175\1\176\1\177\1\200\1\201\1\202\1\171\1\156"+
    "\1\157\1\137\1\160\1\137\1\161\1\203\1\204\1\205"+
    "\1\206\2\171\1\207\1\162\1\26\1\163\1\164\1\171"+
    "\1\170\1\210\1\171\1\211\1\171\1\166\1\167\15\171"+
    "\1\170\4\171\1\100\2\137\1\103\2\137\2\171\2\137"+
    "\1\212\1\213\1\25\1\26\1\27\1\214\1\215\1\216"+
    "\5\215\1\217\1\220\1\221\1\222\1\223\1\212\1\224"+
    "\1\225\1\226\1\215\1\227\1\230\11\215\1\231\1\232"+
    "\1\212\1\233\1\212\1\234\7\215\1\235\1\26\1\236"+
    "\1\237\1\215\1\214\1\240\3\215\1\241\1\242\15\215"+
    "\1\214\4\215\1\100\2\212\1\103\2\212\2\215\2\212"+
    "\1\243\3\244\54\243\1\244\46\243\1\245\1\246\125\245"+
    "\2\247\1\0\124\247\1\250\3\251\54\250\1\251\46\250"+
    "\1\252\3\251\54\252\1\251\46\252\1\23\1\24\1\25"+
    "\1\26\1\27\1\253\1\254\1\253\5\254\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\130\1\42\1\43\1\254"+
    "\1\45\1\46\11\254\1\57\1\60\1\40\1\61\1\40"+
    "\1\62\7\254\1\70\1\26\1\71\1\72\1\254\1\253"+
    "\4\254\1\76\1\77\15\254\1\253\4\254\1\100\1\101"+
    "\1\102\1\103\1\104\1\105\2\254\1\106\1\107\131\0"+
    "\1\25\127\0\1\26\54\0\1\26\53\0\1\30\1\31"+
    "\1\30\5\31\1\0\1\255\7\0\1\31\2\0\11\31"+
    "\3\0\1\256\1\0\1\257\7\31\2\0\1\260\1\0"+
    "\1\31\1\30\4\31\2\0\15\31\1\30\4\31\6\0"+
    "\2\31\7\0\10\31\1\0\1\255\7\0\1\31\2\0"+
    "\11\31\5\0\1\257\7\31\2\0\1\260\1\0\6\31"+
    "\2\0\22\31\6\0\2\31\7\0\1\30\1\31\1\261"+
    "\5\31\1\0\1\255\7\0\1\31\2\0\11\31\3\0"+
    "\1\256\1\0\1\257\7\31\2\0\1\260\1\0\1\31"+
    "\1\30\4\31\2\0\15\31\1\30\4\31\6\0\2\31"+
    "\17\0\1\40\5\0\1\40\110\0\1\262\1\0\1\262"+
    "\6\0\1\40\4\0\1\40\4\0\1\263\33\0\1\262"+
    "\23\0\1\262\23\0\10\264\2\0\1\40\3\0\1\40"+
    "\2\0\1\264\2\0\11\264\6\0\7\264\4\0\6\264"+
    "\2\0\22\264\6\0\2\264\23\0\1\40\1\0\1\40"+
    "\124\0\1\40\126\0\1\40\1\0\1\40\4\0\1\103"+
    "\3\0\1\265\4\0\1\266\6\0\1\267\3\0\1\270"+
    "\1\271\5\0\1\272\2\0\1\273\64\0\1\40\107\0"+
    "\10\274\2\275\1\0\1\275\5\0\1\274\2\0\11\274"+
    "\2\0\1\276\3\0\7\274\4\0\6\274\2\0\22\274"+
    "\6\0\2\274\7\0\10\31\1\0\1\255\7\0\1\31"+
    "\2\0\11\31\5\0\1\257\1\63\6\31\2\0\1\260"+
    "\1\0\6\31\2\0\22\31\6\0\2\31\25\0\1\277"+
    "\3\0\1\300\122\0\1\40\4\0\1\40\103\0\10\31"+
    "\1\0\1\255\7\0\1\31\2\0\1\31\1\301\1\31"+
    "\1\301\5\31\5\0\1\257\7\31\2\0\1\260\1\0"+
    "\6\31\2\0\22\31\6\0\2\31\7\0\10\31\1\0"+
    "\1\255\7\0\1\31\2\0\1\31\1\301\1\31\1\301"+
    "\5\31\5\0\1\257\3\31\1\302\3\31\2\0\1\260"+
    "\1\0\6\31\2\0\22\31\6\0\2\31\7\0\10\31"+
    "\1\0\1\255\7\0\1\303\2\0\4\31\1\301\4\31"+
    "\5\0\1\257\7\31\2\0\1\260\1\0\6\31\2\0"+
    "\22\31\6\0\2\31\7\0\10\31\1\0\1\255\7\0"+
    "\1\304\2\0\4\31\1\304\4\31\5\0\1\257\7\31"+
    "\2\0\1\260\1\0\6\31\2\0\22\31\6\0\1\305"+
    "\1\31\7\0\10\31\1\0\1\255\7\0\1\31\2\0"+
    "\3\31\1\301\5\31\5\0\1\257\1\306\6\31\2\0"+
    "\1\260\1\0\6\31\2\0\22\31\6\0\2\31\7\0"+
    "\10\31\1\0\1\255\7\0\1\31\2\0\7\31\1\307"+
    "\1\31\5\0\1\257\7\31\2\0\1\260\1\0\6\31"+
    "\2\0\22\31\6\0\2\31\7\0\10\31\1\0\1\255"+
    "\7\0\1\31\2\0\11\31\5\0\1\257\1\31\1\310"+
    "\5\31\2\0\1\260\1\0\6\31\2\0\22\31\6\0"+
    "\2\31\7\0\10\31\1\0\1\255\7\0\1\31\2\0"+
    "\11\31\5\0\1\257\1\31\1\311\5\31\2\0\1\260"+
    "\1\0\6\31\2\0\22\31\6\0\2\31\44\0\1\40"+
    "\127\0\1\40\130\0\1\312\130\0\1\313\64\0\10\31"+
    "\1\0\1\255\7\0\1\31\2\0\11\31\5\0\1\257"+
    "\3\31\1\301\3\31\2\0\1\260\1\0\6\31\2\0"+
    "\22\31\6\0\2\31\7\0\10\31\1\0\1\255\7\0"+
    "\1\31\2\0\5\31\1\314\3\31\5\0\1\257\7\31"+
    "\2\0\1\260\1\0\6\31\2\0\22\31\6\0\2\31"+
    "\7\0\10\31\1\0\1\255\7\0\1\31\2\0\3\31"+
    "\1\315\5\31\5\0\1\257\7\31\2\0\1\260\1\0"+
    "\6\31\2\0\22\31\6\0\2\31\7\0\10\31\1\0"+
    "\1\255\7\0\1\31\2\0\3\31\1\316\5\31\5\0"+
    "\1\257\7\31\2\0\1\260\1\0\6\31\2\0\22\31"+
    "\6\0\2\31\7\0\10\31\1\0\1\255\7\0\1\31"+
    "\2\0\6\31\1\317\2\31\5\0\1\257\1\320\6\31"+
    "\2\0\1\260\1\0\5\31\1\321\2\0\22\31\6\0"+
    "\2\31\2\0\1\322\2\0\54\322\1\323\47\322\1\324"+
    "\2\0\56\324\1\323\45\324\1\325\2\0\57\325\1\323"+
    "\44\325\5\0\10\31\1\0\1\255\7\0\1\31\2\0"+
    "\11\31\5\0\1\257\1\31\1\326\5\31\2\0\1\260"+
    "\1\0\6\31\2\0\22\31\6\0\2\31\7\0\10\31"+
    "\1\0\1\255\7\0\1\31\2\0\3\31\1\327\5\31"+
    "\5\0\1\257\7\31\2\0\1\260\1\0\6\31\2\0"+
    "\22\31\6\0\2\31\7\0\10\31\1\0\1\255\7\0"+
    "\1\31\2\0\11\31\5\0\1\257\6\31\1\330\2\0"+
    "\1\260\1\0\6\31\2\0\22\31\6\0\2\31\6\0"+
    "\1\331\10\332\5\331\1\0\3\331\1\332\2\331\11\332"+
    "\2\331\1\333\3\331\7\332\1\331\1\0\2\331\6\332"+
    "\2\331\22\332\6\331\2\332\7\0\10\334\2\335\1\0"+
    "\1\335\5\0\1\334\2\0\11\334\2\0\1\336\3\0"+
    "\7\334\4\0\6\334\2\0\22\334\6\0\2\334\2\0"+
    "\2\100\1\337\124\100\2\0\1\112\125\0\1\340\1\112"+
    "\1\113\54\0\1\113\53\0\10\114\11\0\1\114\2\0"+
    "\11\114\5\0\1\341\7\114\4\0\6\114\2\0\22\114"+
    "\6\0\2\114\7\0\1\117\1\0\1\117\35\0\1\342"+
    "\16\0\1\117\23\0\1\117\23\0\1\117\56\0\1\117"+
    "\23\0\1\117\16\0\2\125\1\126\126\125\1\126\34\125"+
    "\1\343\67\125\21\0\1\40\1\0\1\40\4\0\1\103"+
    "\103\0\10\31\1\0\1\255\7\0\1\31\2\0\3\31"+
    "\1\301\5\31\5\0\1\257\1\344\6\31\2\0\1\260"+
    "\1\0\6\31\2\0\22\31\6\0\2\31\7\0\10\31"+
    "\1\0\1\255\7\0\1\31\2\0\3\31\1\345\5\31"+
    "\5\0\1\257\7\31\2\0\1\260\1\0\6\31\2\0"+
    "\22\31\6\0\2\31\7\0\10\31\1\0\1\255\7\0"+
    "\1\31\2\0\6\31\1\317\2\31\5\0\1\257\1\320"+
    "\6\31\2\0\1\260\1\0\6\31\2\0\22\31\6\0"+
    "\2\31\2\0\2\134\1\0\126\134\1\136\124\134\5\0"+
    "\1\141\1\142\1\141\5\142\1\0\1\255\7\0\1\142"+
    "\2\0\11\142\3\0\1\346\1\0\1\347\7\142\2\0"+
    "\1\260\1\0\1\142\1\141\4\142\2\0\15\142\1\141"+
    "\4\142\6\0\2\142\7\0\10\142\1\0\1\255\7\0"+
    "\1\142\2\0\11\142\5\0\1\347\7\142\2\0\1\260"+
    "\1\0\6\142\2\0\22\142\6\0\2\142\7\0\1\143"+
    "\1\142\1\143\5\142\1\0\1\255\7\0\1\142\2\0"+
    "\11\142\3\0\1\256\1\0\1\347\7\142\2\0\1\260"+
    "\1\0\1\142\1\143\4\142\2\0\15\142\1\143\4\142"+
    "\6\0\2\142\7\0\1\350\7\142\1\0\1\255\7\0"+
    "\1\142\2\0\11\142\5\0\1\347\7\142\2\0\1\260"+
    "\1\0\1\142\1\350\4\142\2\0\15\142\1\350\4\142"+
    "\6\0\2\142\7\0\1\170\1\31\1\170\5\31\1\0"+
    "\1\255\7\0\1\31\2\0\11\31\3\0\1\346\1\0"+
    "\1\257\7\31\2\0\1\260\1\0\1\31\1\170\4\31"+
    "\2\0\15\31\1\170\4\31\6\0\2\31\7\0\1\351"+
    "\7\31\1\0\1\255\7\0\1\31\2\0\11\31\5\0"+
    "\1\257\1\31\1\326\5\31\2\0\1\260\1\0\1\31"+
    "\1\351\4\31\2\0\15\31\1\351\4\31\6\0\2\31"+
    "\7\0\1\214\1\215\1\214\5\215\1\0\1\255\7\0"+
    "\1\215\2\0\11\215\3\0\1\346\1\0\1\352\7\215"+
    "\2\0\1\260\1\0\1\215\1\214\4\215\2\0\15\215"+
    "\1\214\4\215\6\0\2\215\7\0\10\215\1\0\1\255"+
    "\7\0\1\215\2\0\11\215\5\0\1\352\7\215\2\0"+
    "\1\260\1\0\6\215\2\0\22\215\6\0\2\215\7\0"+
    "\1\216\1\215\1\216\5\215\1\0\1\255\7\0\1\215"+
    "\2\0\11\215\3\0\1\256\1\0\1\352\7\215\2\0"+
    "\1\260\1\0\1\215\1\216\4\215\2\0\15\215\1\216"+
    "\4\215\6\0\2\215\7\0\1\353\7\215\1\0\1\255"+
    "\7\0\1\215\2\0\11\215\5\0\1\352\7\215\2\0"+
    "\1\260\1\0\1\215\1\353\4\215\2\0\15\215\1\353"+
    "\4\215\6\0\2\215\3\0\3\244\54\0\1\244\50\0"+
    "\1\245\125\0\3\251\54\0\1\251\46\0\1\252\3\0"+
    "\54\252\1\0\46\252\5\0\1\253\1\254\1\253\5\254"+
    "\1\0\1\255\7\0\1\254\2\0\11\254\3\0\1\256"+
    "\1\0\1\257\7\254\2\0\1\260\1\0\1\254\1\253"+
    "\4\254\2\0\15\254\1\253\4\254\6\0\2\254\7\0"+
    "\10\254\1\0\1\255\7\0\1\254\2\0\11\254\5\0"+
    "\1\257\7\254\2\0\1\260\1\0\6\254\2\0\22\254"+
    "\6\0\2\254\32\0\1\354\103\0\1\355\1\0\1\355"+
    "\54\0\1\355\23\0\1\355\65\0\1\356\126\0\1\357"+
    "\64\0\1\30\1\31\1\30\1\360\1\31\1\361\2\31"+
    "\1\0\1\255\7\0\1\31\2\0\11\31\3\0\1\256"+
    "\1\0\1\257\7\31\2\0\1\260\1\0\1\31\1\30"+
    "\4\31\2\0\15\31\1\30\4\31\6\0\2\31\7\0"+
    "\1\262\1\0\1\262\35\0\1\256\16\0\1\262\23\0"+
    "\1\262\23\0\10\264\11\0\1\264\2\0\11\264\5\0"+
    "\1\362\7\264\4\0\6\264\2\0\22\264\6\0\2\264"+
    "\40\0\1\363\140\0\1\364\143\0\1\365\111\0\1\366"+
    "\110\0\1\367\130\0\1\370\126\0\1\371\14\0\1\372"+
    "\62\0\10\274\11\0\1\274\2\0\11\274\5\0\1\373"+
    "\7\274\4\0\6\274\2\0\22\274\6\0\2\274\114\0"+
    "\1\275\44\0\1\40\101\0\1\374\1\0\10\375\11\0"+
    "\1\375\2\0\11\375\6\0\7\375\1\376\1\374\1\377"+
    "\1\u0100\6\375\2\0\22\375\6\0\2\375\7\0\10\31"+
    "\1\0\1\255\7\0\1\31\2\0\3\31\1\310\5\31"+
    "\5\0\1\257\7\31\2\0\1\260\1\0\6\31\2\0"+
    "\22\31\6\0\2\31\7\0\10\31\1\0\1\255\7\0"+
    "\1\31\2\0\11\31\5\0\1\257\5\31\1\u0101\1\31"+
    "\2\0\1\260\1\0\6\31\2\0\22\31\6\0\2\31"+
    "\7\0\10\31\1\0\1\255\7\0\1\31\2\0\1\31"+
    "\1\301\7\31\5\0\1\257\7\31\2\0\1\260\1\0"+
    "\6\31\2\0\22\31\6\0\2\31\7\0\10\31\1\0"+
    "\1\255\7\0\1\31\2\0\10\31\1\301\5\0\1\257"+
    "\7\31\2\0\1\260\1\0\6\31\2\0\22\31\6\0"+
    "\2\31\7\0\10\31\1\0\1\255\7\0\1\31\2\0"+
    "\10\31\1\u0102\5\0\1\257\7\31\2\0\1\260\1\0"+
    "\6\31\2\0\22\31\6\0\2\31\7\0\10\31\1\0"+
    "\1\255\7\0\1\31\2\0\6\31\1\u0103\2\31\5\0"+
    "\1\257\7\31\2\0\1\260\1\0\6\31\2\0\22\31"+
    "\6\0\2\31\47\0\1\40\66\0\10\31\1\0\1\255"+
    "\7\0\1\31\2\0\11\31\5\0\1\257\2\31\1\301"+
    "\4\31\2\0\1\260\1\0\6\31\2\0\22\31\6\0"+
    "\2\31\7\0\10\31\1\0\1\255\7\0\1\31\2\0"+
    "\11\31\5\0\1\257\4\31\1\u0104\2\31\2\0\1\260"+
    "\1\0\6\31\2\0\22\31\6\0\2\31\7\0\10\31"+
    "\1\0\1\255\7\0\1\31\2\0\4\31\1\u0105\4\31"+
    "\5\0\1\257\4\31\1\301\2\31\2\0\1\260\1\0"+
    "\6\31\2\0\22\31\6\0\2\31\7\0\10\31\1\0"+
    "\1\255\7\0\1\31\2\0\11\31\5\0\1\257\1\31"+
    "\1\u0106\5\31\2\0\1\260\1\0\6\31\2\0\22\31"+
    "\6\0\2\31\7\0\10\31\1\0\1\255\7\0\1\31"+
    "\2\0\11\31\5\0\1\257\3\31\1\u0107\3\31\2\0"+
    "\1\260\1\0\6\31\2\0\22\31\6\0\2\31\7\0"+
    "\10\31\1\0\1\255\7\0\1\31\2\0\11\31\5\0"+
    "\1\257\7\31\2\0\1\260\1\0\3\31\1\u0108\2\31"+
    "\2\0\22\31\6\0\2\31\7\0\10\31\1\0\1\255"+
    "\7\0\1\31\2\0\1\u0109\10\31\5\0\1\257\7\31"+
    "\2\0\1\260\1\0\6\31\2\0\22\31\6\0\2\31"+
    "\7\0\10\31\1\0\1\255\7\0\1\31\2\0\11\31"+
    "\5\0\1\257\7\31\2\0\1\260\1\0\6\31\2\0"+
    "\22\31\6\0\1\31\1\u010a\7\0\10\31\1\0\1\255"+
    "\7\0\1\31\2\0\3\31\1\u010b\5\31\5\0\1\257"+
    "\7\31\2\0\1\260\1\0\6\31\2\0\22\31\6\0"+
    "\2\31\7\0\10\332\11\0\1\332\2\0\11\332\5\0"+
    "\1\u010c\7\332\4\0\6\332\2\0\22\332\6\0\2\332"+
    "\12\0\1\u010d\3\331\1\u010e\56\0\1\u010f\1\u0110\1\331"+
    "\2\0\1\331\1\0\1\331\1\u0111\1\331\1\u0112\1\u0113"+
    "\1\331\1\0\4\331\17\0\10\334\11\0\1\334\2\0"+
    "\11\334\5\0\1\u0114\7\334\4\0\6\334\2\0\22\334"+
    "\6\0\2\334\114\0\1\335\63\0\1\u0115\57\0\2\125"+
    "\1\126\65\125\1\u0116\36\125\5\0\10\31\1\0\1\255"+
    "\7\0\1\31\2\0\11\31\5\0\1\257\4\31\1\301"+
    "\2\31\2\0\1\260\1\0\6\31\2\0\22\31\6\0"+
    "\2\31\7\0\1\u0117\1\0\1\355\54\0\1\u0117\23\0"+
    "\1\u0117\65\0\1\u0118\64\0\1\350\1\142\1\350\5\142"+
    "\1\0\1\255\7\0\1\142\2\0\11\142\3\0\1\u0119"+
    "\1\0\1\347\7\142\2\0\1\260\1\0\1\142\1\350"+
    "\4\142\2\0\15\142\1\350\4\142\6\0\2\142\7\0"+
    "\1\351\1\31\1\351\5\31\1\0\1\255\7\0\1\31"+
    "\2\0\11\31\3\0\1\u0119\1\0\1\257\7\31\2\0"+
    "\1\260\1\0\1\31\1\351\4\31\2\0\15\31\1\351"+
    "\4\31\6\0\2\31\51\0\1\u011a\64\0\1\353\1\215"+
    "\1\353\5\215\1\0\1\255\7\0\1\215\2\0\11\215"+
    "\3\0\1\u0119\1\0\1\352\7\215\2\0\1\260\1\0"+
    "\1\215\1\353\4\215\2\0\15\215\1\353\4\215\6\0"+
    "\2\215\7\0\10\u011b\11\0\1\u011b\2\0\11\u011b\6\0"+
    "\7\u011b\4\0\6\u011b\2\0\22\u011b\6\0\2\u011b\63\0"+
    "\1\u011c\52\0\4\31\1\u011d\3\31\1\0\1\255\7\0"+
    "\1\31\2\0\11\31\5\0\1\257\7\31\2\0\1\260"+
    "\1\0\6\31\2\0\22\31\6\0\2\31\7\0\6\31"+
    "\1\u011e\1\31\1\0\1\255\7\0\1\31\2\0\11\31"+
    "\5\0\1\257\7\31\2\0\1\260\1\0\6\31\2\0"+
    "\22\31\6\0\2\31\51\0\1\u011f\116\0\1\u0120\12\0"+
    "\1\u0121\126\0\1\u0121\110\0\1\366\145\0\1\u0121\107\0"+
    "\1\u0122\143\0\1\u0123\110\0\1\u0124\132\0\1\u0125\136\0"+
    "\1\u0126\64\0\10\375\11\0\1\375\2\0\11\375\6\0"+
    "\7\375\4\0\6\375\2\0\22\375\6\0\2\375\2\0"+
    "\1\u0127\2\0\53\u0127\4\0\45\u0127\1\u0128\2\0\53\u0128"+
    "\4\0\45\u0128\1\u0129\2\0\53\u0129\4\0\45\u0129\5\0"+
    "\10\31\1\0\1\255\7\0\1\31\2\0\11\31\5\0"+
    "\1\257\6\31\1\u012a\2\0\1\260\1\0\6\31\2\0"+
    "\22\31\6\0\2\31\7\0\10\31\1\0\1\255\7\0"+
    "\1\31\2\0\11\31\5\0\1\257\7\31\2\0\1\260"+
    "\1\0\4\31\1\u012b\1\31\2\0\22\31\6\0\2\31"+
    "\7\0\10\31\1\0\1\255\7\0\1\31\2\0\11\31"+
    "\5\0\1\257\5\31\1\u012c\1\31\2\0\1\260\1\0"+
    "\6\31\2\0\22\31\6\0\2\31\7\0\10\31\1\0"+
    "\1\255\7\0\1\31\2\0\11\31\5\0\1\257\7\31"+
    "\2\0\1\260\1\0\5\31\1\u012d\2\0\22\31\6\0"+
    "\2\31\7\0\10\31\1\0\1\255\7\0\1\31\2\0"+
    "\1\u012e\10\31\5\0\1\257\7\31\2\0\1\260\1\0"+
    "\6\31\2\0\22\31\6\0\2\31\7\0\10\31\1\0"+
    "\1\255\7\0\1\31\2\0\1\31\1\u0102\7\31\5\0"+
    "\1\257\7\31\2\0\1\260\1\0\6\31\2\0\22\31"+
    "\6\0\2\31\7\0\10\31\1\0\1\255\7\0\1\31"+
    "\2\0\11\31\5\0\1\257\7\31\2\0\1\260\1\0"+
    "\5\31\1\u012f\2\0\22\31\6\0\2\31\7\0\10\31"+
    "\1\0\1\255\7\0\1\31\2\0\11\31\5\0\1\257"+
    "\6\31\1\u0102\2\0\1\260\1\0\6\31\2\0\22\31"+
    "\6\0\2\31\51\0\1\u0130\70\0\1\u0131\130\0\1\u0132"+
    "\126\0\1\u0133\61\0\1\u0134\41\0\1\u0135\230\0\1\u0136"+
    "\25\0\1\u0137\2\0\1\u0138\226\0\1\u0139\61\0\1\u013a"+
    "\64\0\10\114\11\0\1\114\2\0\11\114\6\0\7\114"+
    "\4\0\6\114\2\0\22\114\6\0\2\114\2\0\2\125"+
    "\1\126\27\125\1\u013b\74\125\5\0\1\u0117\1\0\1\u0117"+
    "\35\0\1\u0119\16\0\1\u0117\23\0\1\u0117\23\0\10\u013c"+
    "\11\0\1\u013c\2\0\11\u013c\6\0\7\u013c\4\0\6\u013c"+
    "\2\0\22\u013c\6\0\2\u013c\7\0\1\u0117\56\0\1\u0117"+
    "\23\0\1\u0117\23\0\10\u013d\11\0\1\u013d\2\0\11\u013d"+
    "\6\0\7\u013d\4\0\6\u013d\2\0\22\u013d\6\0\2\u013d"+
    "\7\0\10\u011b\1\0\1\255\7\0\1\u011b\2\0\11\u011b"+
    "\5\0\1\257\7\u011b\4\0\6\u011b\2\0\22\u011b\6\0"+
    "\2\u011b\7\0\5\31\1\u013e\2\31\1\0\1\255\7\0"+
    "\1\31\2\0\11\31\5\0\1\257\7\31\2\0\1\260"+
    "\1\0\6\31\2\0\22\31\6\0\2\31\7\0\7\31"+
    "\1\u013f\1\0\1\255\7\0\1\31\2\0\11\31\5\0"+
    "\1\257\7\31\2\0\1\260\1\0\6\31\2\0\22\31"+
    "\6\0\2\31\7\0\10\u0140\11\0\1\u0140\2\0\11\u0140"+
    "\6\0\7\u0140\4\0\6\u0140\2\0\22\u0140\6\0\2\u0140"+
    "\52\0\1\u0141\56\0\2\u0121\1\u0142\124\u0121\40\0\1\u0121"+
    "\140\0\1\u0143\131\0\1\u0144\140\0\1\u0121\44\0\10\u0145"+
    "\11\0\1\u0145\2\0\11\u0145\6\0\7\u0145\4\0\6\u0145"+
    "\2\0\22\u0145\6\0\2\u0145\2\0\1\u0127\2\0\53\u0127"+
    "\1\0\1\u0146\2\0\45\u0127\1\u0128\2\0\53\u0128\3\0"+
    "\1\u0146\45\u0128\1\u0129\2\0\53\u0129\4\0\1\u0147\44\u0129"+
    "\5\0\10\31\1\0\1\255\7\0\1\31\2\0\1\31"+
    "\1\u0148\7\31\5\0\1\257\7\31\2\0\1\260\1\0"+
    "\6\31\2\0\22\31\6\0\2\31\7\0\10\31\1\0"+
    "\1\255\7\0\1\31\2\0\11\31\5\0\1\257\1\31"+
    "\1\u0149\5\31\2\0\1\260\1\0\6\31\2\0\22\31"+
    "\6\0\2\31\7\0\10\31\1\0\1\255\7\0\1\31"+
    "\2\0\5\31\1\u014a\3\31\5\0\1\257\7\31\2\0"+
    "\1\260\1\0\6\31\2\0\22\31\6\0\2\31\7\0"+
    "\10\31\1\0\1\255\7\0\1\31\2\0\11\31\5\0"+
    "\1\257\5\31\1\u014b\1\31\2\0\1\260\1\0\6\31"+
    "\2\0\22\31\6\0\2\31\7\0\10\31\1\0\1\255"+
    "\7\0\1\31\2\0\11\31\5\0\1\257\1\31\1\63"+
    "\5\31\2\0\1\260\1\0\6\31\2\0\22\31\6\0"+
    "\2\31\7\0\10\31\1\0\1\255\7\0\1\31\2\0"+
    "\3\31\1\u010a\5\31\5\0\1\257\7\31\2\0\1\260"+
    "\1\0\6\31\2\0\22\31\6\0\2\31\7\0\10\u014c"+
    "\11\0\1\u014c\2\0\11\u014c\6\0\7\u014c\4\0\6\u014c"+
    "\2\0\22\u014c\6\0\2\u014c\105\0\1\u014d\120\0\1\u014e"+
    "\125\0\1\u014f\44\0\1\u0150\123\0\1\u0151\214\0\1\u0152"+
    "\126\0\1\u0153\140\0\1\u0154\27\0\1\u0155\123\0\10\u0156"+
    "\11\0\1\u0156\2\0\11\u0156\6\0\7\u0156\4\0\6\u0156"+
    "\2\0\22\u0156\6\0\2\u0156\2\0\2\u013b\1\u0157\124\u013b"+
    "\5\0\10\u013c\1\0\1\255\7\0\1\u013c\2\0\11\u013c"+
    "\5\0\1\347\7\u013c\4\0\6\u013c\2\0\22\u013c\6\0"+
    "\2\u013c\7\0\10\u013d\1\0\1\255\7\0\1\u013d\2\0"+
    "\11\u013d\5\0\1\352\7\u013d\4\0\6\u013d\2\0\22\u013d"+
    "\6\0\2\u013d\7\0\2\31\1\u0158\5\31\1\0\1\255"+
    "\7\0\1\31\2\0\11\31\5\0\1\257\7\31\2\0"+
    "\1\260\1\0\6\31\2\0\22\31\6\0\2\31\7\0"+
    "\6\31\1\u013e\1\31\1\0\1\255\7\0\1\31\2\0"+
    "\11\31\5\0\1\257\7\31\2\0\1\260\1\0\6\31"+
    "\2\0\22\31\6\0\2\31\54\0\1\u0159\140\0\1\u0121"+
    "\100\0\1\u0121\75\0\10\31\1\0\1\255\7\0\1\31"+
    "\2\0\11\31\5\0\1\257\6\31\1\301\2\0\1\260"+
    "\1\0\6\31\2\0\22\31\6\0\2\31\7\0\10\31"+
    "\1\0\1\255\7\0\1\31\2\0\2\31\1\u015a\6\31"+
    "\5\0\1\257\7\31\2\0\1\260\1\0\6\31\2\0"+
    "\22\31\6\0\2\31\7\0\10\31\1\0\1\255\7\0"+
    "\1\31\2\0\3\31\1\314\5\31\5\0\1\257\7\31"+
    "\2\0\1\260\1\0\6\31\2\0\22\31\6\0\2\31"+
    "\7\0\10\31\1\0\1\255\7\0\1\31\2\0\11\31"+
    "\5\0\1\257\3\31\1\u015b\3\31\2\0\1\260\1\0"+
    "\6\31\2\0\22\31\6\0\2\31\110\0\1\u015c\31\0"+
    "\1\u015d\126\0\1\u015e\125\0\1\u015f\130\0\1\u0160\1\0"+
    "\1\u0161\216\0\1\u0162\125\0\1\u0163\133\0\1\u0164\27\0"+
    "\1\331\122\0\2\31\1\u0165\5\31\1\0\1\255\7\0"+
    "\1\31\2\0\11\31\5\0\1\257\7\31\2\0\1\260"+
    "\1\0\6\31\2\0\22\31\6\0\2\31\57\0\1\u0166"+
    "\56\0\10\31\1\0\1\255\7\0\1\31\2\0\3\31"+
    "\1\u0167\5\31\5\0\1\257\7\31\2\0\1\260\1\0"+
    "\6\31\2\0\22\31\6\0\2\31\7\0\10\31\1\0"+
    "\1\255\7\0\1\31\2\0\3\31\1\u0168\5\31\5\0"+
    "\1\257\7\31\2\0\1\260\1\0\6\31\2\0\22\31"+
    "\6\0\2\31\14\0\1\u0169\130\0\1\331\207\0\1\u016a"+
    "\40\0\1\u016b\127\0\1\u016c\212\0\1\u016d\44\0\1\u016e"+
    "\222\0\1\u016f\124\0\1\u0170\60\0\1\u0171\165\0\1\u0172"+
    "\42\0\1\u0173\215\0\1\u0174\125\0\1\u0175\124\0\1\u0176"+
    "\40\0\1\u0177\131\0\1\u0178\222\0\1\u0179\53\0\1\u0121"+
    "\104\0\1\u017a\213\0\1\u017b\131\0\1\u017c\132\0\1\u017d"+
    "\31\0\1\u017e\126\0\1\u017f\126\0\1\331\221\0\1\u0180"+
    "\121\0\1\331\37\0\1\u0181\217\0\1\u0182\124\0\1\u0183"+
    "\37\0\1\u0184\213\0\1\u0185\45\0\1\u0186\212\0\1\u0187"+
    "\43\0\1\u0188\121\0\1\u0189\221\0\1\u018a\120\0\1\u018b"+
    "\136\0\1\u0178\117\0\1\u018c\41\0\1\u018d\225\0\1\u018e"+
    "\32\0\1\u018f\221\0\1\u0190\34\0\1\u0191\214\0\1\u0192"+
    "\130\0\1\u0193\133\0\1\u0194\111\0\1\u0195\132\0\1\331"+
    "\35\0\1\u0196\132\0\1\u0197\212\0\1\u0198\36\0\1\u0199"+
    "\222\0\1\u019a\121\0\1\u0191\135\0\1\u019b\32\0\1\u019c"+
    "\130\0\1\u019d\222\0\1\331\32\0\1\u019e\217\0\1\u019f"+
    "\36\0\1\u01a0\216\0\1\u0191\117\0\1\u01a1\144\0\1\u0178"+
    "\13\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[26187];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\5\1\1\0\2\1\11\0\1\11\1\1\1\11"+
    "\1\1\1\11\10\1\1\11\40\1\10\11\1\1\1\11"+
    "\2\1\1\11\3\1\2\11\1\1\1\11\1\1\1\11"+
    "\7\1\2\11\52\1\1\11\30\1\1\11\1\1\1\11"+
    "\1\1\2\11\4\1\4\0\2\1\1\11\1\1\7\0"+
    "\1\1\1\11\1\0\14\1\1\11\6\1\1\0\1\11"+
    "\2\0\3\1\1\11\3\1\1\11\1\0\1\11\3\0"+
    "\3\1\2\0\2\1\1\0\1\1\1\11\2\1\1\0"+
    "\2\1\13\0\1\1\3\0\13\1\1\0\5\1\1\0"+
    "\1\1\2\0\3\1\1\0\1\1\1\0\1\11\2\1"+
    "\2\0\1\1\10\0\6\1\13\0\5\1\2\0\1\11"+
    "\3\0\1\11\5\1\13\0\1\11\1\1\1\0\2\1"+
    "\11\0\1\1\1\0\2\1\71\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[417];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    public void setTokenStart(int position){zzCurrentPos = zzStartRead = position;}
    public int getNextTokenStart(){ return zzMarkedPos;}
    public boolean isLastToken(){ return zzMarkedPos == zzEndRead; }

    public void yybegin_YYINITIAL(){yybegin(YYINITIAL);}
    public void yybegin_LEX_MULTILINE(){yybegin(LEX_MULTILINE);}
    public void yybegin_LEX_MULTILINE_TOKEN(){yybegin(LEX_MULTILINE_TOKEN);}
    public void yybegin_LEX_MULTILINE_WAITING(){yybegin(LEX_MULTILINE_WAITING);}
    public void yybegin_LEX_EOF(){yybegin(LEX_EOF);}
    public void yybegin_LEX_POD(){yybegin(LEX_POD);}

    public boolean yystate_LEX_MULTILINE_WAITING(){return yystate() == LEX_MULTILINE_WAITING;}

    public void yybegin_LEX_QUOTE_LIKE_CHARS(){yybegin(LEX_QUOTE_LIKE_CHARS);}
    public void yybegin_LEX_QUOTE_LIKE_OPENER(){yybegin(LEX_QUOTE_LIKE_OPENER);}
    public void yybegin_LEX_QUOTE_LIKE_CLOSER(){yybegin(LEX_QUOTE_LIKE_CLOSER);}
    public void yybegin_LEX_QUOTE_LIKE_WORDS(){yybegin(LEX_QUOTE_LIKE_WORDS);}
    public void yybegin_LEX_QUOTE_LIKE_LIST_OPENER(){yybegin(LEX_QUOTE_LIKE_LIST_OPENER);}
    public void yybegin_LEX_QUOTE_LIKE_LIST_CLOSER(){yybegin(LEX_QUOTE_LIKE_LIST_CLOSER);}


  public PerlLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PerlLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 200) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 64: 
          { yybegin(LEX_REQUIRE); return PerlFunctionUtil.getFunctionType(yytext().toString());
          }
        case 65: break;
        case 52: 
          { return PERL_ARRAY;
          }
        case 66: break;
        case 60: 
          { processPodOpener();break;
          }
        case 67: break;
        case 59: 
          { yypushback(1); return PERL_LABEL;
          }
        case 68: break;
        case 40: 
          { IElementType type = processQuoteLikeListQuote();
            if( type == null ) // disallowed sharp
                break;
            return type;
          }
        case 69: break;
        case 9: 
          { return PERL_NUMBER;
          }
        case 70: break;
        case 43: 
          { yybegin(YYINITIAL);return PERL_FUNCTION;
          }
        case 71: break;
        case 32: 
          { yybegin(YYINITIAL);
        return PERL_VERSION;
          }
        case 72: break;
        case 62: 
          { processDataOpener(); break;
          }
        case 73: break;
        case 11: 
          { return PERL_OPERATOR;
          }
        case 74: break;
        case 1: 
          { return TokenType.WHITE_SPACE;
          }
        case 75: break;
        case 46: 
          { return PERL_HASH;
          }
        case 76: break;
        case 13: 
          { return processQuoteLikeStringOpener();
          }
        case 77: break;
        case 42: 
          { IElementType tokenType = processQuoteLikeWord();
          if( tokenType != null )
                return tokenType;
          break;
          }
        case 78: break;
        case 19: 
          { return PERL_COMMA;
          }
        case 79: break;
        case 47: 
          { return processQuoteLikeListOpener();
          }
        case 80: break;
        case 37: 
          { return processQuoteLikeStringSpace();
          }
        case 81: break;
        case 57: 
          { yybegin(LEX_FUNCTION_DEFINITION); return PerlFunctionUtil.getFunctionType(yytext().toString());
          }
        case 82: break;
        case 3: 
          { if( isLastToken() )
        {
            endPodBlock();
        }
        break;
          }
        case 83: break;
        case 27: 
          { yybegin(LEX_PACKAGE_DEFINITION_BLOCK); return PERL_VERSION;
          }
        case 84: break;
        case 25: 
          { yybegin(LEX_PACKAGE_DEFINITION_VERSION); return PERL_PACKAGE;
          }
        case 85: break;
        case 63: 
          { yybegin(LEX_PACKAGE_DEFINITION); return PerlFunctionUtil.getFunctionType(yytext().toString());
          }
        case 86: break;
        case 56: 
          { return PERL_KEYWORD;
          }
        case 87: break;
        case 54: 
          { yypushback(2);
    return PerlPackageUtil.getPackageType(yytext().toString());
          }
        case 88: break;
        case 8: 
          { return processSemicolon();
          }
        case 89: break;
        case 30: 
          { if( isLastToken() )
        {
            return endMultiline();
        }
        break;
          }
        case 90: break;
        case 45: 
          { return PERL_GLOB;
          }
        case 91: break;
        case 2: 
          { if( isLastToken() )
            return endDataBlock();
        break;
          }
        case 92: break;
        case 49: 
          { return PERL_DEPACKAGE;
          }
        case 93: break;
        case 34: 
          { yypushback(1);yybegin(YYINITIAL);break;
          }
        case 94: break;
        case 16: 
          { return PERL_COMMENT;
          }
        case 95: break;
        case 33: 
          { yybegin(LEX_PACKAGE_USE_VERSION);
        return PerlPackageUtil.getPackageType(yytext().toString());
          }
        case 96: break;
        case 55: 
          { return processMultilineOpener();
          }
        case 97: break;
        case 35: 
          { yybegin(YYINITIAL);
        return PerlPackageUtil.getPackageType(yytext().toString());
          }
        case 98: break;
        case 7: 
          { return processNewLine();
          }
        case 99: break;
        case 5: 
          { yybegin(YYINITIAL);return PERL_MULTILINE_MARKER_END;
          }
        case 100: break;
        case 28: 
          { yybegin(YYINITIAL); return PERL_LBRACE;
          }
        case 101: break;
        case 50: 
          { return PERL_STRING;
          }
        case 102: break;
        case 38: 
          { IElementType tokenType = processQuoteLikeChar();
          if( tokenType != null )
                return tokenType;
          break;
          }
        case 103: break;
        case 17: 
          { return PERL_LPAREN;
          }
        case 104: break;
        case 12: 
          { return PERL_SIGIL_HASH;
          }
        case 105: break;
        case 10: 
          { return PERL_FUNCTION;
          }
        case 106: break;
        case 6: 
          { return TokenType.BAD_CHARACTER;
          }
        case 107: break;
        case 51: 
          { return PERL_SCALAR;
          }
        case 108: break;
        case 24: 
          { yybegin(YYINITIAL);  return TokenType.BAD_CHARACTER;
          }
        case 109: break;
        case 18: 
          { return PERL_RPAREN;
          }
        case 110: break;
        case 44: 
          { yybegin(LEX_DEREFERENCE);return PERL_DEREFERENCE;
          }
        case 111: break;
        case 14: 
          { return PERL_SIGIL_SCALAR;
          }
        case 112: break;
        case 15: 
          { return PERL_SIGIL_ARRAY;
          }
        case 113: break;
        case 39: 
          { yybegin(YYINITIAL); return PERL_QUOTE;
          }
        case 114: break;
        case 31: 
          { yypushback(1); yybegin(YYINITIAL); break;
          }
        case 115: break;
        case 4: 
          { if( isMultilineEnd() || isLastToken())
        {
            return endMultiline();
        }
        break;
          }
        case 116: break;
        case 48: 
          { yybegin(LEX_PACKAGE_USE); return PerlFunctionUtil.getFunctionType(yytext().toString());
          }
        case 117: break;
        case 26: 
          { yybegin(YYINITIAL);
        return TokenType.BAD_CHARACTER;
          }
        case 118: break;
        case 36: 
          { IElementType type = processQuoteLikeQuote();
            if( type == null ) // disallowed sharp
                break;
            return type;
          }
        case 119: break;
        case 58: 
          { yybegin(LEX_PACKAGE_USE);return PerlFunctionUtil.getFunctionType(yytext().toString());
          }
        case 120: break;
        case 53: 
          { yypushback(2);
    return PERL_PACKAGE;
          }
        case 121: break;
        case 41: 
          { return processQuoteLikeListSpace();
          }
        case 122: break;
        case 22: 
          { return PERL_LBRACE;
          }
        case 123: break;
        case 23: 
          { return PERL_RBRACE;
          }
        case 124: break;
        case 61: 
          { return endPodBlock();
          }
        case 125: break;
        case 29: 
          { yybegin(YYINITIAL); return TokenType.BAD_CHARACTER;
          }
        case 126: break;
        case 21: 
          { return PERL_RBRACK;
          }
        case 127: break;
        case 20: 
          { return PERL_LBRACK;
          }
        case 128: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
