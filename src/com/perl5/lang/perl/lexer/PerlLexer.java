/* The following code was generated by JFlex 1.4.3 on 25.04.15 0:23 */

package com.perl5.lang.perl.lexer;

/*
    http://jflex.de/manual.html
    http://www2.cs.tum.edu/projects/cup

*/

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import org.jetbrains.annotations.NotNull;
import com.perl5.lang.perl.lexer.helpers.PerlFunction;
import com.perl5.lang.perl.lexer.helpers.PerlScalar;
import com.perl5.lang.perl.lexer.helpers.PerlHash;
import com.perl5.lang.perl.lexer.helpers.PerlGlob;
import com.perl5.lang.perl.lexer.helpers.PerlArray;
import com.perl5.lang.perl.lexer.helpers.PerlPackage;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 25.04.15 0:23 from the specification file
 * <tt>C:/Repository/Perl5-IDEA/src/com/perl5/lang/perl/lexer/Perl.flex</tt>
 */
public class PerlLexer extends PerlLexerProto implements FlexLexer, PerlElementTypes {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int FUNCTION_DEFINITION = 8;
  public static final int LEX_REQUIRE = 12;
  public static final int PACKAGE_INSTANCE_CALL = 18;
  public static final int PACKAGE_USE = 10;
  public static final int LEX_DEREFERENCE = 28;
  public static final int LEX_MULTILINE_TOKEN = 26;
  public static final int LEX_PACKAGE_DEFINITION_BLOCK = 6;
  public static final int LEX_MULTILINE = 24;
  public static final int LEX_EOF = 20;
  public static final int LEX_PACKAGE_DEFINITION = 2;
  public static final int PACKAGE_STATIC_CALL = 16;
  public static final int YYINITIAL = 0;
  public static final int PACKAGE_USE_PARAMS = 14;
  public static final int LEX_PACKAGE_DEFINITION_VERSION = 4;
  public static final int LEX_POD = 22;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\17\1\70\1\15"+
    "\1\56\1\51\1\53\1\76\1\16\1\63\1\64\1\54\1\67\1\65"+
    "\1\47\1\55\1\73\1\5\1\31\1\31\1\31\1\31\5\5\1\46"+
    "\1\4\1\21\1\22\1\50\1\72\1\52\1\13\2\6\1\12\1\10"+
    "\10\6\1\11\5\6\1\14\6\6\1\61\1\72\1\62\1\72\1\7"+
    "\1\0\1\30\1\37\1\40\1\25\1\27\1\44\1\42\1\26\1\34"+
    "\1\6\1\41\1\75\1\36\1\43\1\24\1\23\1\66\1\33\1\20"+
    "\1\35\1\45\1\32\1\6\1\74\2\6\1\57\1\77\1\60\1\71"+
    "\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\3\1\6\0\1\2\1\3\1\4\1\5\1\0"+
    "\2\6\1\7\1\1\1\10\1\11\1\12\1\11\2\6"+
    "\1\12\2\13\11\12\3\13\2\6\2\13\1\6\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\10\13"+
    "\2\24\2\1\1\25\2\26\1\27\1\30\1\26\1\31"+
    "\2\32\1\11\1\33\1\13\1\11\1\34\1\11\1\35"+
    "\1\11\1\36\1\11\1\37\1\11\1\40\1\2\3\3"+
    "\2\4\1\41\1\12\3\0\1\11\1\0\1\42\1\0"+
    "\1\36\1\12\2\13\7\0\1\12\1\13\3\12\1\43"+
    "\1\12\1\44\1\11\1\45\1\46\1\0\1\47\1\0"+
    "\1\50\1\0\1\51\1\0\1\13\1\14\5\0\1\3"+
    "\1\12\1\52\1\53\1\11\2\12\1\54\13\0\2\12"+
    "\1\55\1\0\2\52\1\3\1\0\2\12\2\0\1\56"+
    "\5\0\2\12\1\57\2\12\1\60\1\61\1\56\3\0"+
    "\2\12\1\57\1\12\1\0\2\12\1\62\1\0\1\63"+
    "\1\64\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[198];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\u0100\0\u0140\0\u0180\0\u01c0"+
    "\0\u0200\0\u0240\0\u0280\0\u02c0\0\u0300\0\u0340\0\u0380\0\u03c0"+
    "\0\u0400\0\u03c0\0\u0440\0\u03c0\0\u0480\0\u04c0\0\u0500\0\u0540"+
    "\0\u0580\0\u05c0\0\u0600\0\u0640\0\u0680\0\u06c0\0\u0700\0\u0740"+
    "\0\u0780\0\u07c0\0\u0800\0\u0840\0\u0880\0\u08c0\0\u0900\0\u0940"+
    "\0\u0980\0\u09c0\0\u0a00\0\u0a40\0\u0a80\0\u0ac0\0\u03c0\0\u03c0"+
    "\0\u03c0\0\u03c0\0\u03c0\0\u03c0\0\u03c0\0\u0b00\0\u0b40\0\u0b80"+
    "\0\u03c0\0\u0bc0\0\u0c00\0\u0c40\0\u0c80\0\u03c0\0\u0cc0\0\u03c0"+
    "\0\u0d00\0\u0d40\0\u03c0\0\u0cc0\0\u03c0\0\u0d80\0\u0dc0\0\u03c0"+
    "\0\u03c0\0\u0cc0\0\u0e00\0\u0e40\0\u0e80\0\u0ec0\0\u0f00\0\u0f40"+
    "\0\u0f80\0\u0fc0\0\u1000\0\u1040\0\u1080\0\u10c0\0\u1100\0\u03c0"+
    "\0\u1140\0\u03c0\0\u1180\0\u11c0\0\u1200\0\u03c0\0\u1240\0\u1280"+
    "\0\u12c0\0\u1300\0\u1340\0\u0540\0\u03c0\0\u0580\0\u03c0\0\u1380"+
    "\0\u13c0\0\u1400\0\u1440\0\u1480\0\u14c0\0\u1500\0\u1540\0\u1580"+
    "\0\u15c0\0\u1600\0\u04c0\0\u1640\0\u1680\0\u16c0\0\u1700\0\u1740"+
    "\0\u03c0\0\u1780\0\u03c0\0\u17c0\0\u0980\0\u1800\0\u09c0\0\u1840"+
    "\0\u0a00\0\u1880\0\u18c0\0\u1900\0\u03c0\0\u0cc0\0\u1940\0\u0dc0"+
    "\0\u1980\0\u19c0\0\u1a00\0\u1700\0\u1a40\0\u03c0\0\u1300\0\u1a80"+
    "\0\u1ac0\0\u04c0\0\u13c0\0\u1b00\0\u1b40\0\u1b80\0\u1bc0\0\u1c00"+
    "\0\u1c40\0\u1c80\0\u1cc0\0\u1d00\0\u1d40\0\u1d80\0\u1dc0\0\u04c0"+
    "\0\u1e00\0\u1e40\0\u1e80\0\u1ec0\0\u1f00\0\u1f40\0\u1f80\0\u1fc0"+
    "\0\u2000\0\u2040\0\u2080\0\u20c0\0\u2100\0\u2140\0\u2180\0\u21c0"+
    "\0\u2200\0\u2240\0\u2280\0\u22c0\0\u03c0\0\u03c0\0\u03c0\0\u2300"+
    "\0\u2340\0\u2380\0\u23c0\0\u2400\0\u03c0\0\u2440\0\u2480\0\u24c0"+
    "\0\u2500\0\u04c0\0\u2540\0\u04c0\0\u04c0\0\u2580";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[198];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\5\26\1\30\1\31\1\23\1\32\1\33\1\34\1\35"+
    "\1\36\2\26\1\37\1\40\1\25\1\26\1\41\4\26"+
    "\1\42\1\26\1\43\1\44\1\26\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\26\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\1\43\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\1\76\10\102\2\76\1\101"+
    "\1\102\2\76\23\102\20\76\1\102\5\76\2\102\2\76"+
    "\1\103\1\104\1\100\1\101\1\105\1\106\11\103\1\101"+
    "\11\103\1\106\1\107\24\103\1\110\20\103\1\111\1\112"+
    "\1\100\1\101\1\105\12\111\1\101\37\111\1\110\20\111"+
    "\1\20\1\21\1\22\1\23\1\24\1\113\1\114\1\113"+
    "\5\114\1\30\1\31\1\23\1\114\1\33\1\115\6\114"+
    "\1\113\14\114\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\114\1\66\1\67\1\70\1\71\1\72"+
    "\2\114\1\74\1\75\1\20\1\21\1\22\1\23\1\24"+
    "\1\116\1\117\1\116\5\117\1\30\1\31\1\23\1\117"+
    "\1\33\1\115\6\117\1\116\14\117\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\117\1\66\1\67"+
    "\1\70\1\71\1\72\2\117\1\74\1\75\1\20\1\21"+
    "\1\22\1\23\1\24\1\120\1\121\1\120\5\121\1\30"+
    "\1\31\1\23\1\121\1\33\1\115\6\121\1\120\14\121"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\121\1\66\1\67\1\70\1\71\1\72\2\121\1\74"+
    "\1\75\1\20\1\21\1\22\1\23\1\24\1\122\1\123"+
    "\1\122\5\123\1\30\1\31\1\23\1\123\1\33\1\115"+
    "\6\123\1\122\14\123\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\123\1\66\1\67\1\70\1\71"+
    "\1\72\2\123\1\74\1\75\1\20\1\21\1\22\1\23"+
    "\1\24\1\124\1\125\1\124\5\125\1\30\1\31\1\23"+
    "\1\125\1\33\1\115\6\125\1\124\14\125\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\125\1\66"+
    "\1\67\1\70\1\71\1\72\2\125\1\74\1\75\1\20"+
    "\1\21\1\22\1\23\1\24\1\126\1\127\1\126\5\127"+
    "\1\30\1\31\1\23\1\127\1\33\1\115\6\127\1\126"+
    "\14\127\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\127\1\66\1\67\1\70\1\71\1\72\2\127"+
    "\1\74\1\75\2\13\1\130\75\13\2\131\1\132\17\131"+
    "\1\133\55\131\1\134\1\135\1\136\75\134\2\16\1\0"+
    "\75\16\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\25\5\26\1\30\1\31\1\23\1\26\1\33\1\115"+
    "\1\26\1\36\2\26\1\37\1\40\1\25\6\26\1\42"+
    "\1\26\1\43\1\137\2\26\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\26\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\43\1\74\1\75\102\0\1\22"+
    "\100\0\1\23\13\0\1\23\65\0\1\25\1\26\1\25"+
    "\5\26\3\0\1\26\2\0\6\26\1\25\14\26\1\140"+
    "\1\141\5\0\1\142\10\0\1\26\5\0\2\26\7\0"+
    "\10\26\3\0\1\26\2\0\23\26\1\140\1\141\16\0"+
    "\1\26\5\0\2\26\7\0\1\25\1\26\1\143\5\26"+
    "\3\0\1\26\2\0\6\26\1\25\14\26\1\140\1\141"+
    "\5\0\1\142\10\0\1\26\5\0\2\26\2\0\1\144"+
    "\2\0\12\144\1\145\62\144\1\146\2\0\13\146\1\147"+
    "\61\146\5\0\10\26\3\0\1\26\2\0\22\26\1\150"+
    "\1\140\1\141\16\0\1\26\5\0\2\26\23\0\1\151"+
    "\1\152\77\0\1\71\1\153\1\154\1\0\1\155\1\156"+
    "\4\0\1\157\2\0\1\160\4\0\1\161\3\0\1\65"+
    "\20\0\1\71\13\0\10\26\3\0\1\26\2\0\5\26"+
    "\1\162\15\26\1\140\1\141\16\0\1\26\5\0\2\26"+
    "\7\0\10\26\3\0\1\26\2\0\10\26\1\163\12\26"+
    "\1\140\1\141\16\0\1\26\5\0\2\26\7\0\10\26"+
    "\3\0\1\26\2\0\23\26\1\140\1\141\16\0\1\163"+
    "\5\0\2\26\7\0\10\26\3\0\1\26\2\0\20\26"+
    "\1\164\2\26\1\140\1\141\16\0\1\26\5\0\2\26"+
    "\7\0\10\26\3\0\1\26\2\0\4\26\1\165\16\26"+
    "\1\140\1\141\16\0\1\26\5\0\2\26\7\0\10\26"+
    "\3\0\1\26\2\0\13\26\1\166\7\26\1\140\1\141"+
    "\16\0\1\26\5\0\2\26\7\0\10\26\3\0\1\26"+
    "\2\0\4\26\1\163\5\26\1\163\10\26\1\140\1\141"+
    "\16\0\1\26\5\0\2\26\7\0\10\26\3\0\1\26"+
    "\2\0\1\26\1\167\2\26\1\163\16\26\1\140\1\141"+
    "\16\0\1\26\5\0\2\26\7\0\10\26\3\0\1\170"+
    "\2\0\23\26\1\140\1\141\16\0\1\26\5\0\2\26"+
    "\50\0\1\171\36\0\1\172\1\0\1\172\12\0\1\71"+
    "\6\0\1\172\15\0\1\71\1\173\51\0\1\71\25\0"+
    "\1\71\34\0\10\174\3\0\1\174\2\0\23\174\3\0"+
    "\1\175\14\0\1\174\5\0\2\174\7\0\10\176\3\0"+
    "\1\176\2\0\23\176\3\0\1\177\14\0\1\176\5\0"+
    "\2\176\7\0\10\200\3\0\1\200\2\0\23\200\3\0"+
    "\1\201\14\0\1\200\5\0\2\200\7\0\10\202\3\0"+
    "\1\202\1\0\1\71\23\202\3\0\1\203\2\0\1\71"+
    "\11\0\1\202\5\0\2\202\57\0\1\204\22\0\2\56"+
    "\1\205\75\56\22\0\1\71\44\0\1\71\32\0\1\71"+
    "\46\0\1\71\77\0\1\71\101\0\1\71\11\0\10\26"+
    "\3\0\1\26\2\0\1\26\1\36\21\26\1\140\1\141"+
    "\16\0\1\26\5\0\2\26\100\0\1\71\100\0\1\71"+
    "\2\0\1\100\76\0\1\206\1\100\1\101\13\0\1\101"+
    "\65\0\10\102\3\0\1\102\2\0\23\102\1\207\17\0"+
    "\1\102\5\0\2\102\7\0\1\106\1\0\1\106\21\0"+
    "\1\106\23\0\1\210\27\0\1\106\23\0\1\106\53\0"+
    "\1\113\1\114\1\113\5\114\3\0\1\114\2\0\6\114"+
    "\1\113\14\114\1\140\1\141\5\0\1\142\10\0\1\114"+
    "\5\0\2\114\7\0\10\114\3\0\1\114\2\0\23\114"+
    "\1\140\1\141\16\0\1\114\5\0\2\114\24\0\1\71"+
    "\25\0\1\65\20\0\1\71\13\0\1\116\1\117\1\116"+
    "\5\117\3\0\1\117\2\0\6\117\1\116\14\117\1\211"+
    "\1\141\5\0\1\142\10\0\1\117\5\0\2\117\7\0"+
    "\10\117\3\0\1\117\2\0\23\117\1\211\1\141\16\0"+
    "\1\117\5\0\2\117\7\0\1\120\1\121\1\120\5\121"+
    "\3\0\1\121\2\0\6\121\1\120\14\121\1\212\1\141"+
    "\5\0\1\142\10\0\1\121\5\0\2\121\7\0\10\121"+
    "\3\0\1\121\2\0\23\121\1\212\1\141\16\0\1\121"+
    "\5\0\2\121\7\0\1\122\1\123\1\122\5\123\3\0"+
    "\1\123\2\0\6\123\1\122\14\123\1\140\1\141\5\0"+
    "\1\142\10\0\1\123\5\0\2\123\7\0\10\123\3\0"+
    "\1\123\2\0\23\123\1\140\1\141\16\0\1\123\5\0"+
    "\2\123\7\0\1\124\1\125\1\124\5\125\3\0\1\125"+
    "\2\0\6\125\1\124\14\125\1\140\1\141\5\0\1\142"+
    "\10\0\1\125\5\0\2\125\7\0\10\125\3\0\1\125"+
    "\2\0\23\125\1\140\1\141\16\0\1\125\5\0\2\125"+
    "\7\0\1\126\1\127\1\126\5\127\3\0\1\127\2\0"+
    "\6\127\1\126\14\127\1\140\1\141\5\0\1\142\10\0"+
    "\1\127\5\0\2\127\7\0\10\127\3\0\1\127\2\0"+
    "\23\127\1\140\1\141\16\0\1\127\5\0\2\127\2\0"+
    "\2\131\1\132\77\131\1\132\35\131\1\213\37\131\2\134"+
    "\1\0\77\134\1\136\75\134\5\0\10\26\3\0\1\26"+
    "\2\0\1\26\1\214\2\26\1\163\16\26\1\140\1\141"+
    "\16\0\1\26\5\0\2\26\50\0\1\215\101\0\1\216"+
    "\34\0\1\217\1\0\1\217\21\0\1\217\53\0\1\25"+
    "\1\26\1\25\1\220\1\26\1\221\2\26\3\0\1\26"+
    "\2\0\6\26\1\25\14\26\1\140\1\141\5\0\1\142"+
    "\10\0\1\26\5\0\2\26\7\0\10\26\3\0\1\26"+
    "\2\0\14\26\1\222\6\26\1\140\1\141\16\0\1\26"+
    "\5\0\2\26\5\0\1\223\11\0\1\224\1\225\1\223"+
    "\130\0\1\71\53\0\1\226\105\0\1\227\74\0\1\230"+
    "\113\0\1\231\71\0\1\232\71\0\1\233\1\234\73\0"+
    "\1\235\60\0\10\26\3\0\1\26\2\0\15\26\1\236"+
    "\5\26\1\140\1\141\16\0\1\26\5\0\2\26\7\0"+
    "\10\26\3\0\1\26\2\0\2\26\1\163\20\26\1\140"+
    "\1\141\16\0\1\26\5\0\2\26\7\0\10\26\3\0"+
    "\1\26\2\0\23\26\1\140\1\141\16\0\1\237\5\0"+
    "\2\26\7\0\10\26\3\0\1\26\2\0\1\163\22\26"+
    "\1\140\1\141\16\0\1\26\5\0\2\26\7\0\10\26"+
    "\3\0\1\26\2\0\12\26\1\163\10\26\1\140\1\141"+
    "\16\0\1\26\5\0\2\26\7\0\10\26\3\0\1\26"+
    "\2\0\4\26\1\240\16\26\1\140\1\141\16\0\1\26"+
    "\5\0\2\26\7\0\1\172\1\0\1\172\21\0\1\172"+
    "\23\0\1\142\27\0\10\174\3\0\1\174\2\0\23\174"+
    "\20\0\1\174\5\0\2\174\7\0\10\176\3\0\1\176"+
    "\2\0\23\176\20\0\1\176\5\0\2\176\7\0\10\200"+
    "\3\0\1\200\2\0\23\200\20\0\1\200\5\0\2\200"+
    "\7\0\10\202\3\0\1\202\2\0\23\202\20\0\1\202"+
    "\5\0\2\202\7\0\10\202\3\0\1\202\2\0\23\202"+
    "\3\0\1\203\14\0\1\202\5\0\2\202\57\0\1\71"+
    "\70\0\1\241\77\0\1\242\77\0\1\243\31\0\2\131"+
    "\1\132\42\131\1\244\32\131\5\0\10\245\3\0\1\245"+
    "\2\0\23\245\20\0\1\245\5\0\2\245\7\0\4\26"+
    "\1\246\3\26\3\0\1\26\2\0\23\26\1\140\1\141"+
    "\16\0\1\26\5\0\2\26\7\0\6\26\1\247\1\26"+
    "\3\0\1\26\2\0\23\26\1\140\1\141\16\0\1\26"+
    "\5\0\2\26\2\0\1\250\2\0\12\250\4\0\57\250"+
    "\1\251\2\0\12\251\4\0\57\251\25\0\1\252\101\0"+
    "\1\235\100\0\1\253\74\0\1\252\12\0\1\254\66\0"+
    "\1\255\112\0\1\256\75\0\1\257\72\0\1\252\51\0"+
    "\10\26\3\0\1\26\2\0\16\26\1\260\4\26\1\140"+
    "\1\141\16\0\1\26\5\0\2\26\7\0\10\26\3\0"+
    "\1\26\2\0\22\26\1\261\1\140\1\141\16\0\1\26"+
    "\5\0\2\26\7\0\10\102\3\0\1\102\2\0\23\102"+
    "\20\0\1\102\5\0\2\102\7\0\10\117\3\0\1\117"+
    "\2\0\23\117\20\0\1\117\5\0\2\117\7\0\10\121"+
    "\3\0\1\121\2\0\23\121\20\0\1\121\5\0\2\121"+
    "\2\0\2\131\1\132\32\131\1\262\42\131\5\0\10\245"+
    "\3\0\1\245\2\0\23\245\1\140\1\141\16\0\1\245"+
    "\5\0\2\245\7\0\5\26\1\263\2\26\3\0\1\26"+
    "\2\0\23\26\1\140\1\141\16\0\1\26\5\0\2\26"+
    "\7\0\7\26\1\264\3\0\1\26\2\0\23\26\1\140"+
    "\1\141\16\0\1\26\5\0\2\26\2\0\1\250\2\0"+
    "\12\250\1\265\3\0\57\250\1\251\2\0\12\251\1\0"+
    "\1\266\2\0\57\251\2\252\1\267\75\252\25\0\1\270"+
    "\76\0\1\271\111\0\1\252\75\0\1\272\104\0\1\252"+
    "\43\0\10\26\3\0\1\26\2\0\5\26\1\273\15\26"+
    "\1\140\1\141\16\0\1\26\5\0\2\26\7\0\10\26"+
    "\3\0\1\26\2\0\11\26\1\274\11\26\1\140\1\141"+
    "\16\0\1\26\5\0\2\26\2\0\2\262\1\275\75\262"+
    "\5\0\2\26\1\276\5\26\3\0\1\26\2\0\23\26"+
    "\1\140\1\141\16\0\1\26\5\0\2\26\7\0\6\26"+
    "\1\263\1\26\3\0\1\26\2\0\23\26\1\140\1\141"+
    "\16\0\1\26\5\0\2\26\33\0\1\252\73\0\1\277"+
    "\115\0\1\252\41\0\10\26\3\0\1\26\2\0\17\26"+
    "\1\300\3\26\1\140\1\141\16\0\1\26\5\0\2\26"+
    "\7\0\10\26\3\0\1\26\2\0\10\26\1\301\12\26"+
    "\1\140\1\141\16\0\1\26\5\0\2\26\7\0\2\26"+
    "\1\302\5\26\3\0\1\26\2\0\23\26\1\140\1\141"+
    "\16\0\1\26\5\0\2\26\36\0\1\303\50\0\10\26"+
    "\3\0\1\26\2\0\4\26\1\304\16\26\1\140\1\141"+
    "\16\0\1\26\5\0\2\26\7\0\10\26\3\0\1\26"+
    "\2\0\4\26\1\305\16\26\1\140\1\141\16\0\1\26"+
    "\5\0\2\26\45\0\1\306\76\0\1\252\35\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9664];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\3\1\6\0\4\1\1\0\1\11\1\1\1\11"+
    "\1\1\1\11\32\1\7\11\3\1\1\11\4\1\1\11"+
    "\1\1\1\11\2\1\1\11\1\1\1\11\2\1\2\11"+
    "\16\1\1\11\1\1\1\11\3\1\1\11\1\1\3\0"+
    "\1\1\1\0\1\11\1\0\1\11\3\1\7\0\7\1"+
    "\1\11\1\1\1\11\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\11\5\0\3\1\1\11"+
    "\4\1\13\0\3\1\1\0\3\1\1\0\2\1\2\0"+
    "\1\1\5\0\5\1\3\11\3\0\2\1\1\11\1\1"+
    "\1\0\3\1\1\0\2\1\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[198];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    public void setTokenStart(int position){zzCurrentPos = zzStartRead = position;}
    public int getNextTokenStart(){ return zzMarkedPos;}
    public boolean isLastToken(){ return zzMarkedPos == zzEndRead; }

    public void yybegin_LEX_MULTILINE(){yybegin(LEX_MULTILINE);}
    public void yybegin_YYINITIAL(){yybegin(YYINITIAL);}
    public void yybegin_LEX_MULTILINE_TOKEN(){yybegin(LEX_MULTILINE_TOKEN);}

	protected int dataBlockStart = 0;

	protected void StartDataBlock()
	{
		dataBlockStart = zzStartRead;
        yybegin(LEX_EOF);
	}

	protected int podBlockStart = 0;

	protected void StartPodBlock()
	{
		podBlockStart = zzStartRead;
        yybegin(LEX_POD);
	}


  public PerlLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PerlLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 162) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 5: 
          { yybegin(YYINITIAL);return PERL_MULTILINE_MARKER;
          }
        case 53: break;
        case 28: 
          { yybegin(PACKAGE_USE_PARAMS);
        return PerlPackage.getPackageType(yytext().toString()); // @todo wtf it's not being resolved without package?
          }
        case 54: break;
        case 10: 
          { return PerlFunction.getFunctionType(yytext().toString());
          }
        case 55: break;
        case 9: 
          { return PERL_NUMBER;
          }
        case 56: break;
        case 8: 
          { //    if( !isWaitingMultiLine() )
        yybegin(YYINITIAL);
    return PERL_SEMI;
          }
        case 57: break;
        case 27: 
          { yybegin(YYINITIAL);return PERL_FUNCTION;
          }
        case 58: break;
        case 47: 
          { zzCurrentPos = zzStartRead = podBlockStart;
        yybegin(YYINITIAL);
        return PERL_POD;
          }
        case 59: break;
        case 49: 
          { prepareForMultiline(PERL_MULTILINE_SQ);return PERL_MULTILINE_MARKER;
          }
        case 60: break;
        case 41: 
          { return PerlGlob.getGlobType(yytext().toString());
          }
        case 61: break;
        case 11: 
          { return PERL_OPERATOR;
          }
        case 62: break;
        case 1: 
          { return TokenType.WHITE_SPACE;
          }
        case 63: break;
        case 19: 
          { return PERL_COMMA;
          }
        case 64: break;
        case 52: 
          { yybegin(LEX_REQUIRE);return PerlFunction.getFunctionType(yytext().toString());
          }
        case 65: break;
        case 38: 
          { return PerlScalar.getScalarType(yytext().toString());
          }
        case 66: break;
        case 24: 
          { yybegin(LEX_PACKAGE_DEFINITION_BLOCK); return PERL_VERSION;
          }
        case 67: break;
        case 21: 
          { yybegin(LEX_PACKAGE_DEFINITION_VERSION); return PERL_PACKAGE;
          }
        case 68: break;
        case 51: 
          { yybegin(LEX_PACKAGE_DEFINITION); return PerlFunction.getFunctionType(yytext().toString());
          }
        case 69: break;
        case 43: 
          { yybegin(PACKAGE_INSTANCE_CALL);
    yypushback(2);
    return PERL_PACKAGE;
          }
        case 70: break;
        case 40: 
          { return PerlHash.getHashType(yytext().toString());
          }
        case 71: break;
        case 33: 
          { if( isLastToken() )
        {
            return endMultiline();
        }
        break;
          }
        case 72: break;
        case 42: 
          { yybegin(PACKAGE_STATIC_CALL);
    yypushback(2);
    return PERL_PACKAGE;
          }
        case 73: break;
        case 36: 
          { return PERL_DEPACKAGE;
          }
        case 74: break;
        case 46: 
          { StartPodBlock();break;
          }
        case 75: break;
        case 12: 
          { return PERL_COMMENT;
          }
        case 76: break;
        case 34: 
          { return PERL_DQ_STRING;
          }
        case 77: break;
        case 7: 
          { if( isWaitingMultiLine() ) // this could be done using lexical state, like prepared or smth
    {
        startMultiLine();
    }
    return PERL_NEWLINE;
          }
        case 78: break;
        case 25: 
          { yybegin(YYINITIAL); return PERL_LBRACE;
          }
        case 79: break;
        case 30: 
          { return PERL_SQ_STRING;
          }
        case 80: break;
        case 17: 
          { return PERL_LPAREN;
          }
        case 81: break;
        case 6: 
          { return TokenType.BAD_CHARACTER;
          }
        case 82: break;
        case 31: 
          { return PERL_STATIC_METHOD_CALL;
          }
        case 83: break;
        case 20: 
          { yybegin(YYINITIAL);  return TokenType.BAD_CHARACTER;
          }
        case 84: break;
        case 18: 
          { return PERL_RPAREN;
          }
        case 85: break;
        case 37: 
          { yybegin(LEX_DEREFERENCE);return PERL_DEREFERENCE;
          }
        case 86: break;
        case 39: 
          { return PerlArray.getArrayType(yytext().toString());
          }
        case 87: break;
        case 45: 
          { yybegin(PACKAGE_USE);return PerlFunction.getFunctionType(yytext().toString());
          }
        case 88: break;
        case 2: 
          { if( zzMarkedPos == zzEndRead )
        {
            zzCurrentPos = zzStartRead = dataBlockStart;
            return PERL_COMMENT_BLOCK;
        }
        break;
          }
        case 89: break;
        case 23: 
          { yybegin(YYINITIAL);return PERL_SEMI;
          }
        case 90: break;
        case 4: 
          { if( isMultilineEnd() || isLastToken())
        {
            return endMultiline();
        }
        break;
          }
        case 91: break;
        case 44: 
          { yybegin(FUNCTION_DEFINITION); return PerlFunction.getFunctionType(yytext().toString());
          }
        case 92: break;
        case 32: 
          { return PERL_INSTANCE_METHOD_CALL;
          }
        case 93: break;
        case 22: 
          { yybegin(YYINITIAL);
        return TokenType.BAD_CHARACTER;
          }
        case 94: break;
        case 3: 
          { if( zzMarkedPos == zzEndRead )
        {
            zzCurrentPos = zzStartRead = podBlockStart;
            return PERL_POD;
        }
        break;
          }
        case 95: break;
        case 29: 
          { return PERL_PACKAGE;
          }
        case 96: break;
        case 48: 
          { prepareForMultiline(PERL_MULTILINE_DQ);return PERL_MULTILINE_MARKER;
          }
        case 97: break;
        case 35: 
          { yybegin(PACKAGE_USE); return PerlFunction.getFunctionType(yytext().toString());
          }
        case 98: break;
        case 13: 
          { return PERL_LBRACE;
          }
        case 99: break;
        case 14: 
          { return PERL_RBRACE;
          }
        case 100: break;
        case 50: 
          { StartDataBlock(); break;
          }
        case 101: break;
        case 26: 
          { yybegin(YYINITIAL); return TokenType.BAD_CHARACTER;
          }
        case 102: break;
        case 16: 
          { return PERL_RBRACK;
          }
        case 103: break;
        case 15: 
          { return PERL_LBRACK;
          }
        case 104: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
