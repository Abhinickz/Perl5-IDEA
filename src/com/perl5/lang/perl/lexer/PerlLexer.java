/* The following code was generated by JFlex 1.4.3 on 25.04.15 14:29 */

package com.perl5.lang.perl.lexer;

/*
    http://jflex.de/manual.html
    http://www2.cs.tum.edu/projects/cup

*/

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import org.jetbrains.annotations.NotNull;
import com.perl5.lang.perl.lexer.helpers.PerlFunction;
import com.perl5.lang.perl.lexer.helpers.PerlScalar;
import com.perl5.lang.perl.lexer.helpers.PerlHash;
import com.perl5.lang.perl.lexer.helpers.PerlGlob;
import com.perl5.lang.perl.lexer.helpers.PerlArray;
import com.perl5.lang.perl.lexer.helpers.PerlPackage;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 25.04.15 14:29 from the specification file
 * <tt>C:/Repository/Perl5-IDEA/src/com/perl5/lang/perl/lexer/Perl.flex</tt>
 */
public class PerlLexer extends PerlLexerProto implements FlexLexer, PerlElementTypes {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int LEX_REQUIRE = 22;
  public static final int LEX_PACKAGE_USE = 16;
  public static final int LEX_DEREFERENCE = 26;
  public static final int LEX_PACKAGE_USE_VERSION = 20;
  public static final int LEX_MULTILINE_TOKEN = 14;
  public static final int LEX_PACKAGE_DEFINITION_BLOCK = 6;
  public static final int LEX_PACKAGE_USE_PARAMS = 18;
  public static final int LEX_MULTILINE = 12;
  public static final int LEX_EOF = 8;
  public static final int LEX_PACKAGE_DEFINITION = 2;
  public static final int LEX_FUNCTION_DEFINITION = 24;
  public static final int YYINITIAL = 0;
  public static final int LEX_PACKAGE_DEFINITION_VERSION = 4;
  public static final int LEX_POD = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\56\1\22\1\15"+
    "\1\70\1\66\1\27\1\44\1\16\1\76\1\77\1\21\1\17\1\71"+
    "\1\20\1\46\1\26\1\5\1\61\1\61\1\61\1\61\5\5\1\47"+
    "\1\4\1\31\1\25\1\32\1\24\1\67\1\13\2\6\1\12\1\10"+
    "\10\6\1\11\5\6\1\14\6\6\1\74\1\24\1\75\1\24\1\7"+
    "\1\0\1\51\1\63\1\41\1\52\1\36\1\54\1\35\1\60\1\55"+
    "\1\6\1\64\1\33\1\42\1\40\1\50\1\43\1\37\1\53\1\57"+
    "\1\34\1\65\1\62\1\6\1\30\2\6\1\72\1\45\1\73\1\23"+
    "\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\3\1\1\2\1\3\1\4\1\5\6\0\2\6"+
    "\1\7\1\1\1\10\1\11\1\12\1\11\2\6\10\13"+
    "\1\14\3\13\5\12\2\13\1\6\1\13\6\12\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\2\27\2\1\1\30\2\31\1\32\1\33\1\31"+
    "\1\34\2\35\1\2\3\3\2\4\1\36\2\37\1\40"+
    "\2\41\20\37\1\41\2\37\2\42\1\13\1\40\3\43"+
    "\2\44\1\45\2\46\20\44\1\46\2\44\2\47\1\12"+
    "\3\0\1\11\1\0\1\50\1\0\1\42\1\11\1\51"+
    "\1\52\10\0\1\53\1\0\3\13\1\54\2\12\1\13"+
    "\1\55\5\12\1\56\1\0\1\57\1\0\1\17\3\0"+
    "\1\3\2\0\2\40\2\0\1\45\1\12\1\60\1\11"+
    "\1\60\2\12\15\0\3\12\1\61\1\62\3\0\1\3"+
    "\1\40\1\60\1\0\1\45\1\60\2\0\2\12\2\0"+
    "\1\63\7\0\3\12\2\0\1\64\2\12\2\0\1\63"+
    "\3\0\1\65\1\66\3\12\2\0\1\64\1\12\1\0"+
    "\2\12\1\67\1\0\1\70\1\71\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[267];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\u0100\0\u0140\0\u0180\0\u01c0"+
    "\0\u0200\0\u0240\0\u0280\0\u02c0\0\u0300\0\u0340\0\u0380\0\u03c0"+
    "\0\u0380\0\u0400\0\u0380\0\u0440\0\u0480\0\u04c0\0\u0500\0\u0540"+
    "\0\u0580\0\u05c0\0\u0600\0\u0640\0\u0680\0\u0380\0\u06c0\0\u0700"+
    "\0\u0740\0\u0780\0\u07c0\0\u0800\0\u0840\0\u0880\0\u08c0\0\u0900"+
    "\0\u0940\0\u0980\0\u09c0\0\u0a00\0\u0a40\0\u0a80\0\u0ac0\0\u0b00"+
    "\0\u0b40\0\u0b80\0\u0bc0\0\u0c00\0\u0c40\0\u0c80\0\u0380\0\u0380"+
    "\0\u0380\0\u0380\0\u0380\0\u0380\0\u0380\0\u0380\0\u0cc0\0\u0380"+
    "\0\u0d00\0\u0d40\0\u0380\0\u0cc0\0\u0380\0\u0d80\0\u0dc0\0\u0380"+
    "\0\u0380\0\u0cc0\0\u0380\0\u0e00\0\u0380\0\u0e40\0\u0e80\0\u0ec0"+
    "\0\u0380\0\u0380\0\u03c0\0\u0f00\0\u0f40\0\u0f80\0\u0500\0\u0540"+
    "\0\u0580\0\u05c0\0\u0600\0\u0640\0\u0680\0\u0fc0\0\u0700\0\u0740"+
    "\0\u07c0\0\u0800\0\u0980\0\u09c0\0\u0a00\0\u0a40\0\u1000\0\u0c00"+
    "\0\u0c40\0\u1040\0\u1080\0\u0fc0\0\u10c0\0\u1100\0\u1140\0\u1180"+
    "\0\u0380\0\u03c0\0\u11c0\0\u1200\0\u1240\0\u0500\0\u0540\0\u0580"+
    "\0\u05c0\0\u0600\0\u0640\0\u0680\0\u0fc0\0\u0700\0\u0740\0\u07c0"+
    "\0\u0800\0\u0980\0\u09c0\0\u0a00\0\u0a40\0\u1280\0\u0c00\0\u0c40"+
    "\0\u12c0\0\u1300\0\u1340\0\u1380\0\u13c0\0\u1400\0\u1440\0\u0500"+
    "\0\u0380\0\u0540\0\u0380\0\u1480\0\u0380\0\u14c0\0\u1500\0\u1540"+
    "\0\u1580\0\u15c0\0\u1600\0\u1640\0\u1680\0\u16c0\0\u1700\0\u0740"+
    "\0\u1740\0\u1780\0\u0480\0\u17c0\0\u1800\0\u1840\0\u1880\0\u0380"+
    "\0\u18c0\0\u1900\0\u1940\0\u1980\0\u19c0\0\u1a00\0\u0c00\0\u1a40"+
    "\0\u0c40\0\u0380\0\u0cc0\0\u1a80\0\u0dc0\0\u1ac0\0\u1b00\0\u1b40"+
    "\0\u1b80\0\u1bc0\0\u1c00\0\u1c40\0\u1c80\0\u17c0\0\u0380\0\u13c0"+
    "\0\u1cc0\0\u1d00\0\u1d40\0\u1d80\0\u1dc0\0\u1e00\0\u1e40\0\u1e80"+
    "\0\u1ec0\0\u1f00\0\u1f40\0\u1f80\0\u1fc0\0\u1780\0\u2000\0\u2040"+
    "\0\u2080\0\u20c0\0\u2100\0\u0480\0\u0480\0\u2140\0\u2180\0\u21c0"+
    "\0\u2200\0\u2240\0\u2280\0\u22c0\0\u2300\0\u2340\0\u2380\0\u23c0"+
    "\0\u2400\0\u2440\0\u2480\0\u24c0\0\u2500\0\u2540\0\u2580\0\u25c0"+
    "\0\u2600\0\u2640\0\u2680\0\u26c0\0\u2700\0\u2740\0\u2780\0\u27c0"+
    "\0\u2800\0\u2840\0\u2880\0\u28c0\0\u14c0\0\u2900\0\u0380\0\u2940"+
    "\0\u2980\0\u1700\0\u0380\0\u0380\0\u29c0\0\u2a00\0\u2a40\0\u1a00"+
    "\0\u1a40\0\u0380\0\u2a80\0\u2ac0\0\u2b00\0\u2b40\0\u0480\0\u2b80"+
    "\0\u0480\0\u0480\0\u2bc0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[267];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\5\25\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\25\1\45\1\46\1\25\1\47\1\50\1\25\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\2\25\1\22\1\62\1\25\1\24\3\25\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74"+
    "\1\75\1\76\1\77\1\100\1\101\1\76\10\102\13\76"+
    "\1\102\2\76\11\102\4\76\6\102\1\101\7\102\12\76"+
    "\1\103\1\104\1\100\1\101\1\105\1\106\50\103\1\101"+
    "\2\103\1\106\1\107\7\103\1\110\5\103\1\111\1\112"+
    "\1\100\1\101\1\105\51\111\1\101\13\111\1\110\5\111"+
    "\2\5\1\113\75\5\2\114\1\115\22\114\1\116\52\114"+
    "\1\117\1\120\1\121\75\117\2\10\1\0\75\10\1\122"+
    "\1\123\1\21\1\22\1\23\1\124\1\125\1\126\5\125"+
    "\1\127\1\130\1\131\1\132\1\133\1\134\1\135\1\122"+
    "\1\136\1\137\1\140\1\125\1\141\1\142\11\125\1\143"+
    "\1\144\1\145\1\146\6\125\1\22\2\125\1\124\1\147"+
    "\3\125\1\150\1\151\1\66\1\67\6\122\1\17\1\20"+
    "\1\21\1\22\1\23\1\152\1\153\1\152\5\153\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\154"+
    "\1\40\1\41\1\153\1\43\1\44\11\153\1\52\1\53"+
    "\1\54\1\55\6\153\1\22\2\153\1\152\4\153\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74"+
    "\1\75\1\17\1\20\1\21\1\22\1\23\1\155\1\156"+
    "\1\157\5\156\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\154\1\40\1\41\1\156\1\43\1\44"+
    "\11\156\1\52\1\53\1\54\1\55\6\156\1\22\2\156"+
    "\1\155\1\160\3\156\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\74\1\75\1\161\1\162\1\21"+
    "\1\22\1\23\1\163\1\164\1\165\5\164\1\166\1\167"+
    "\1\170\1\171\1\172\1\173\1\174\1\161\1\175\1\176"+
    "\1\177\1\164\1\200\1\201\11\164\1\202\1\203\1\204"+
    "\1\205\6\164\1\22\2\164\1\163\1\206\3\164\1\207"+
    "\1\210\1\66\1\67\6\161\1\17\1\20\1\21\1\22"+
    "\1\23\1\211\1\212\1\211\5\212\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\154\1\40\1\41"+
    "\1\212\1\43\1\44\11\212\1\52\1\53\1\54\1\55"+
    "\6\212\1\22\2\212\1\211\4\212\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\24\5\25"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\154\1\40\1\41\1\42\1\43\1\44\1\45\1\25"+
    "\1\45\1\46\1\25\1\213\1\50\2\25\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\3\25\1\22\2\25"+
    "\1\24\4\25\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\1\75\102\0\1\21\100\0\1\22"+
    "\52\0\1\22\26\0\1\24\1\25\1\24\5\25\3\0"+
    "\1\214\7\0\1\25\2\0\11\25\2\0\1\215\1\216"+
    "\6\25\1\0\2\25\1\24\4\25\17\0\10\25\3\0"+
    "\1\214\7\0\1\25\2\0\11\25\3\0\1\216\6\25"+
    "\1\0\7\25\17\0\1\24\1\25\1\217\5\25\3\0"+
    "\1\214\7\0\1\25\2\0\11\25\2\0\1\215\1\216"+
    "\6\25\1\0\2\25\1\24\4\25\12\0\1\220\2\0"+
    "\12\220\1\221\62\220\1\222\2\0\13\222\1\223\61\222"+
    "\17\0\1\36\5\0\1\36\57\0\1\224\1\0\1\224"+
    "\10\0\1\36\4\0\1\36\4\0\1\225\26\0\1\224"+
    "\23\0\10\226\4\0\1\36\3\0\1\36\2\0\1\226"+
    "\2\0\11\226\4\0\6\226\1\0\7\226\1\227\34\0"+
    "\1\36\1\0\1\36\75\0\1\36\77\0\1\36\1\0"+
    "\1\36\4\0\1\67\3\0\1\230\4\0\1\231\4\0"+
    "\1\232\3\0\1\233\1\234\2\0\1\235\2\0\1\236"+
    "\42\0\1\36\56\0\10\237\13\0\1\237\2\0\11\237"+
    "\4\0\6\237\1\0\7\237\1\240\16\0\10\25\3\0"+
    "\1\214\7\0\1\25\2\0\11\25\3\0\1\216\1\56"+
    "\5\25\1\0\7\25\37\0\1\241\3\0\1\242\73\0"+
    "\1\36\4\0\1\36\52\0\10\25\3\0\1\214\7\0"+
    "\1\25\2\0\1\25\1\243\1\25\1\243\5\25\3\0"+
    "\1\216\6\25\1\0\7\25\17\0\10\25\3\0\1\214"+
    "\7\0\1\25\2\0\4\25\1\243\4\25\3\0\1\216"+
    "\6\25\1\0\7\25\17\0\10\25\3\0\1\214\7\0"+
    "\1\25\2\0\3\25\1\243\5\25\3\0\1\216\1\244"+
    "\5\25\1\0\7\25\17\0\10\25\3\0\1\214\7\0"+
    "\1\25\2\0\7\25\1\245\1\25\3\0\1\216\6\25"+
    "\1\0\7\25\17\0\10\25\3\0\1\214\7\0\1\25"+
    "\2\0\11\25\3\0\1\216\1\25\1\246\4\25\1\0"+
    "\7\25\56\0\1\36\100\0\1\36\100\0\1\247\100\0"+
    "\1\250\35\0\10\25\3\0\1\214\7\0\1\25\2\0"+
    "\11\25\3\0\1\216\3\25\1\243\2\25\1\0\7\25"+
    "\17\0\10\25\3\0\1\214\7\0\1\25\2\0\5\25"+
    "\1\251\3\25\3\0\1\216\6\25\1\0\7\25\17\0"+
    "\10\25\3\0\1\214\7\0\1\25\2\0\3\25\1\252"+
    "\5\25\3\0\1\216\6\25\1\0\7\25\17\0\10\25"+
    "\3\0\1\214\7\0\1\25\2\0\3\25\1\253\5\25"+
    "\3\0\1\216\6\25\1\0\7\25\17\0\10\25\3\0"+
    "\1\214\7\0\1\25\2\0\11\25\3\0\1\216\6\25"+
    "\1\0\6\25\1\254\17\0\10\25\3\0\1\214\7\0"+
    "\1\25\2\0\11\25\3\0\1\216\6\25\1\0\1\255"+
    "\6\25\17\0\10\256\13\0\1\256\2\0\11\256\4\0"+
    "\6\256\1\0\7\256\1\257\16\0\10\260\13\0\1\260"+
    "\2\0\11\260\4\0\6\260\1\0\7\260\1\261\11\0"+
    "\2\66\1\262\75\66\2\0\1\100\76\0\1\263\1\100"+
    "\1\101\52\0\1\101\26\0\10\102\13\0\1\102\2\0"+
    "\11\102\3\0\1\264\6\102\1\0\7\102\17\0\1\106"+
    "\1\0\1\106\36\0\1\265\12\0\1\106\23\0\1\106"+
    "\53\0\1\106\16\0\2\114\1\115\77\114\1\115\36\114"+
    "\1\266\36\114\2\117\1\0\77\117\1\121\75\117\5\0"+
    "\1\124\1\125\1\124\5\125\3\0\1\214\7\0\1\125"+
    "\2\0\11\125\2\0\1\267\1\270\6\125\1\0\2\125"+
    "\1\124\4\125\17\0\10\125\3\0\1\214\7\0\1\125"+
    "\2\0\11\125\3\0\1\270\6\125\1\0\7\125\17\0"+
    "\1\126\1\125\1\126\5\125\3\0\1\214\7\0\1\125"+
    "\2\0\11\125\2\0\1\215\1\270\6\125\1\0\2\125"+
    "\1\126\4\125\35\0\1\36\1\0\1\36\4\0\1\67"+
    "\52\0\1\271\7\125\3\0\1\214\7\0\1\125\2\0"+
    "\11\125\3\0\1\270\6\125\1\0\2\125\1\271\4\125"+
    "\17\0\1\152\1\153\1\152\5\153\3\0\1\214\7\0"+
    "\1\153\2\0\11\153\2\0\1\215\1\216\6\153\1\0"+
    "\2\153\1\152\4\153\17\0\10\153\3\0\1\214\7\0"+
    "\1\153\2\0\11\153\3\0\1\216\6\153\1\0\7\153"+
    "\17\0\1\155\1\156\1\155\5\156\3\0\1\214\7\0"+
    "\1\156\2\0\11\156\2\0\1\267\1\216\6\156\1\0"+
    "\2\156\1\155\4\156\17\0\10\156\3\0\1\214\7\0"+
    "\1\156\2\0\11\156\3\0\1\216\6\156\1\0\7\156"+
    "\17\0\1\157\1\156\1\157\5\156\3\0\1\214\7\0"+
    "\1\156\2\0\11\156\2\0\1\215\1\216\6\156\1\0"+
    "\2\156\1\157\4\156\17\0\1\272\7\156\3\0\1\214"+
    "\7\0\1\156\2\0\11\156\3\0\1\216\6\156\1\0"+
    "\2\156\1\272\4\156\17\0\1\163\1\164\1\163\5\164"+
    "\3\0\1\214\7\0\1\164\2\0\11\164\2\0\1\273"+
    "\1\274\6\164\1\0\2\164\1\163\4\164\17\0\10\164"+
    "\3\0\1\214\7\0\1\164\2\0\11\164\3\0\1\274"+
    "\6\164\1\0\7\164\17\0\1\165\1\164\1\165\5\164"+
    "\3\0\1\214\7\0\1\164\2\0\11\164\2\0\1\215"+
    "\1\274\6\164\1\0\2\164\1\165\4\164\17\0\1\275"+
    "\7\164\3\0\1\214\7\0\1\164\2\0\11\164\3\0"+
    "\1\274\6\164\1\0\2\164\1\275\4\164\17\0\1\211"+
    "\1\212\1\211\5\212\3\0\1\214\7\0\1\212\2\0"+
    "\11\212\2\0\1\215\1\216\6\212\1\0\2\212\1\211"+
    "\4\212\17\0\10\212\3\0\1\214\7\0\1\212\2\0"+
    "\11\212\3\0\1\216\6\212\1\0\7\212\17\0\10\25"+
    "\3\0\1\214\7\0\1\25\2\0\3\25\1\243\5\25"+
    "\3\0\1\216\1\276\5\25\1\0\7\25\44\0\1\277"+
    "\52\0\1\300\1\0\1\300\51\0\1\300\65\0\1\301"+
    "\35\0\1\24\1\25\1\24\1\302\1\25\1\303\2\25"+
    "\3\0\1\214\7\0\1\25\2\0\11\25\2\0\1\215"+
    "\1\216\6\25\1\0\2\25\1\24\4\25\17\0\1\224"+
    "\1\0\1\224\36\0\1\215\12\0\1\224\23\0\10\226"+
    "\13\0\1\226\2\0\11\226\3\0\1\304\6\226\1\0"+
    "\7\226\17\0\10\226\13\0\1\226\2\0\11\226\4\0"+
    "\6\226\1\0\7\226\1\227\51\0\1\305\107\0\1\306"+
    "\111\0\1\307\65\0\1\310\63\0\1\311\101\0\1\312"+
    "\77\0\1\313\12\0\1\314\33\0\10\237\13\0\1\237"+
    "\2\0\11\237\3\0\1\315\6\237\1\0\7\237\44\0"+
    "\1\36\50\0\1\316\11\0\1\317\1\320\37\0\1\316"+
    "\26\0\10\25\3\0\1\214\7\0\1\25\2\0\1\25"+
    "\1\243\7\25\3\0\1\216\6\25\1\0\7\25\17\0"+
    "\10\25\3\0\1\214\7\0\1\25\2\0\10\25\1\243"+
    "\3\0\1\216\6\25\1\0\7\25\17\0\10\25\3\0"+
    "\1\214\7\0\1\25\2\0\6\25\1\321\2\25\3\0"+
    "\1\216\6\25\1\0\7\25\60\0\1\36\36\0\10\25"+
    "\3\0\1\214\7\0\1\25\2\0\11\25\3\0\1\216"+
    "\2\25\1\243\3\25\1\0\7\25\17\0\10\25\3\0"+
    "\1\214\7\0\1\25\2\0\11\25\3\0\1\216\4\25"+
    "\1\322\1\25\1\0\7\25\17\0\10\25\3\0\1\214"+
    "\7\0\1\25\2\0\4\25\1\323\4\25\3\0\1\216"+
    "\6\25\1\0\7\25\17\0\10\25\3\0\1\214\7\0"+
    "\1\25\2\0\11\25\3\0\1\216\6\25\1\0\4\25"+
    "\1\324\2\25\17\0\10\25\3\0\1\214\7\0\1\25"+
    "\2\0\3\25\1\325\5\25\3\0\1\216\6\25\1\0"+
    "\7\25\17\0\10\256\13\0\1\256\2\0\11\256\3\0"+
    "\1\326\6\256\1\0\7\256\17\0\10\260\13\0\1\260"+
    "\2\0\11\260\3\0\1\327\6\260\1\0\7\260\61\0"+
    "\1\330\30\0\2\114\1\115\62\114\1\331\12\114\5\0"+
    "\1\332\1\0\1\300\51\0\1\332\65\0\1\333\35\0"+
    "\1\271\1\125\1\271\5\125\3\0\1\214\7\0\1\125"+
    "\2\0\11\125\2\0\1\334\1\270\6\125\1\0\2\125"+
    "\1\271\4\125\17\0\1\272\1\156\1\272\5\156\3\0"+
    "\1\214\7\0\1\156\2\0\11\156\2\0\1\334\1\216"+
    "\6\156\1\0\2\156\1\272\4\156\17\0\1\335\1\0"+
    "\1\300\51\0\1\335\65\0\1\336\35\0\1\275\1\164"+
    "\1\275\5\164\3\0\1\214\7\0\1\164\2\0\11\164"+
    "\2\0\1\337\1\274\6\164\1\0\2\164\1\275\4\164"+
    "\17\0\10\340\13\0\1\340\2\0\11\340\4\0\6\340"+
    "\1\0\7\340\17\0\4\25\1\341\3\25\3\0\1\214"+
    "\7\0\1\25\2\0\11\25\3\0\1\216\6\25\1\0"+
    "\7\25\17\0\6\25\1\342\1\25\3\0\1\214\7\0"+
    "\1\25\2\0\11\25\3\0\1\216\6\25\1\0\7\25"+
    "\61\0\1\343\71\0\1\344\10\0\1\345\77\0\1\345"+
    "\63\0\1\310\114\0\1\345\62\0\1\346\112\0\1\347"+
    "\63\0\1\350\103\0\1\351\105\0\1\352\30\0\1\353"+
    "\2\0\12\353\2\0\37\353\2\0\20\353\1\354\2\0"+
    "\12\354\2\0\37\354\2\0\20\354\5\0\10\25\3\0"+
    "\1\214\7\0\1\25\2\0\11\25\3\0\1\216\6\25"+
    "\1\0\5\25\1\355\1\25\17\0\10\25\3\0\1\214"+
    "\7\0\1\25\2\0\11\25\3\0\1\216\5\25\1\356"+
    "\1\0\7\25\17\0\10\25\3\0\1\214\7\0\1\25"+
    "\2\0\11\25\3\0\1\216\6\25\1\0\6\25\1\357"+
    "\61\0\1\360\77\0\1\361\35\0\10\102\13\0\1\102"+
    "\2\0\11\102\4\0\6\102\1\0\7\102\12\0\2\114"+
    "\1\115\31\114\1\362\43\114\5\0\1\332\1\0\1\332"+
    "\36\0\1\334\12\0\1\332\23\0\10\125\13\0\1\125"+
    "\2\0\11\125\4\0\6\125\1\0\7\125\17\0\1\332"+
    "\53\0\1\332\23\0\1\335\1\0\1\335\36\0\1\337"+
    "\12\0\1\335\23\0\10\164\13\0\1\164\2\0\11\164"+
    "\4\0\6\164\1\0\7\164\17\0\1\335\53\0\1\335"+
    "\23\0\10\340\3\0\1\214\7\0\1\340\2\0\11\340"+
    "\3\0\1\216\6\340\1\0\7\340\17\0\5\25\1\363"+
    "\2\25\3\0\1\214\7\0\1\25\2\0\11\25\3\0"+
    "\1\216\6\25\1\0\7\25\17\0\7\25\1\364\3\0"+
    "\1\214\7\0\1\25\2\0\11\25\3\0\1\216\6\25"+
    "\1\0\7\25\17\0\10\365\13\0\1\365\2\0\11\365"+
    "\4\0\6\365\1\0\7\365\62\0\1\366\27\0\2\345"+
    "\1\367\75\345\42\0\1\345\107\0\1\370\102\0\1\371"+
    "\106\0\1\345\20\0\10\372\13\0\1\372\2\0\11\372"+
    "\4\0\6\372\1\0\7\372\12\0\1\353\2\0\12\353"+
    "\1\373\1\0\37\353\2\0\20\353\1\354\2\0\12\354"+
    "\1\0\1\374\37\354\2\0\20\354\5\0\10\25\3\0"+
    "\1\214\7\0\1\25\2\0\11\25\3\0\1\216\1\25"+
    "\1\375\4\25\1\0\7\25\17\0\10\25\3\0\1\214"+
    "\7\0\1\25\2\0\5\25\1\376\3\25\3\0\1\216"+
    "\6\25\1\0\7\25\17\0\10\25\3\0\1\214\7\0"+
    "\1\25\2\0\11\25\3\0\1\216\5\25\1\377\1\0"+
    "\7\25\17\0\10\u0100\13\0\1\u0100\2\0\11\u0100\4\0"+
    "\6\u0100\1\0\7\u0100\17\0\10\u0101\13\0\1\u0101\2\0"+
    "\11\u0101\4\0\6\u0101\1\0\7\u0101\12\0\2\362\1\u0102"+
    "\75\362\5\0\2\25\1\u0103\5\25\3\0\1\214\7\0"+
    "\1\25\2\0\11\25\3\0\1\216\6\25\1\0\7\25"+
    "\17\0\6\25\1\363\1\25\3\0\1\214\7\0\1\25"+
    "\2\0\11\25\3\0\1\216\6\25\1\0\7\25\64\0"+
    "\1\u0104\106\0\1\345\56\0\1\345\44\0\10\25\3\0"+
    "\1\214\7\0\1\25\2\0\2\25\1\u0105\6\25\3\0"+
    "\1\216\6\25\1\0\7\25\17\0\10\25\3\0\1\214"+
    "\7\0\1\25\2\0\3\25\1\251\5\25\3\0\1\216"+
    "\6\25\1\0\7\25\17\0\10\25\3\0\1\214\7\0"+
    "\1\25\2\0\11\25\3\0\1\216\3\25\1\u0106\2\25"+
    "\1\0\7\25\17\0\2\25\1\u0107\5\25\3\0\1\214"+
    "\7\0\1\25\2\0\11\25\3\0\1\216\6\25\1\0"+
    "\7\25\67\0\1\u0108\27\0\10\25\3\0\1\214\7\0"+
    "\1\25\2\0\3\25\1\u0109\5\25\3\0\1\216\6\25"+
    "\1\0\7\25\17\0\10\25\3\0\1\214\7\0\1\25"+
    "\2\0\3\25\1\u010a\5\25\3\0\1\216\6\25\1\0"+
    "\7\25\52\0\1\u010b\74\0\1\345\42\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11264];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\7\1\6\0\1\11\1\1\1\11\1\1\1\11"+
    "\12\1\1\11\30\1\10\11\1\1\1\11\2\1\1\11"+
    "\1\1\1\11\2\1\2\11\1\1\1\11\1\1\1\11"+
    "\3\1\2\11\36\1\1\11\32\1\3\0\1\1\1\0"+
    "\1\11\1\0\1\11\1\1\1\11\1\1\10\0\1\1"+
    "\1\0\7\1\1\11\6\1\1\0\1\1\1\0\1\11"+
    "\3\0\1\1\2\0\2\1\2\0\2\1\1\11\4\1"+
    "\15\0\5\1\3\0\3\1\1\0\2\1\2\0\2\1"+
    "\2\0\1\1\7\0\3\1\2\0\3\1\2\0\1\11"+
    "\3\0\2\11\3\1\2\0\1\11\1\1\1\0\3\1"+
    "\1\0\2\1\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[267];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    public void setTokenStart(int position){zzCurrentPos = zzStartRead = position;}
    public int getNextTokenStart(){ return zzMarkedPos;}
    public boolean isLastToken(){ return zzMarkedPos == zzEndRead; }

    public void yybegin_LEX_MULTILINE(){yybegin(LEX_MULTILINE);}
    public void yybegin_YYINITIAL(){yybegin(YYINITIAL);}
    public void yybegin_LEX_MULTILINE_TOKEN(){yybegin(LEX_MULTILINE_TOKEN);}

	protected int dataBlockStart = 0;

	protected void StartDataBlock()
	{
		dataBlockStart = zzStartRead;
        yybegin(LEX_EOF);
	}

	protected int podBlockStart = 0;

	protected void StartPodBlock()
	{
		podBlockStart = zzStartRead;
        yybegin(LEX_POD);
	}


  public PerlLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PerlLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 162) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 50: 
          { yybegin(LEX_PACKAGE_USE);return PerlFunction.getFunctionType(yytext().toString());
          }
        case 58: break;
        case 5: 
          { yybegin(YYINITIAL);return PERL_MULTILINE_MARKER;
          }
        case 59: break;
        case 10: 
          { return PerlFunction.getFunctionType(yytext().toString());
          }
        case 60: break;
        case 9: 
          { return PERL_NUMBER;
          }
        case 61: break;
        case 37: 
          { yybegin(YYINITIAL);
        return PERL_VERSION;
          }
        case 62: break;
        case 52: 
          { zzCurrentPos = zzStartRead = podBlockStart;
        yybegin(YYINITIAL);
        return PERL_POD;
          }
        case 63: break;
        case 49: 
          { yybegin(LEX_FUNCTION_DEFINITION); return PerlFunction.getFunctionType(yytext().toString());
          }
        case 64: break;
        case 54: 
          { prepareForMultiline(PERL_MULTILINE_SQ);return PERL_MULTILINE_MARKER;
          }
        case 65: break;
        case 42: 
          { return PerlGlob.getGlobType(yytext().toString());
          }
        case 66: break;
        case 11: 
          { return PERL_OPERATOR;
          }
        case 67: break;
        case 1: 
          { return TokenType.WHITE_SPACE;
          }
        case 68: break;
        case 16: 
          { return PERL_COMMA;
          }
        case 69: break;
        case 32: 
          { yybegin(LEX_PACKAGE_USE_PARAMS);
        return PERL_VERSION;
          }
        case 70: break;
        case 46: 
          { return PerlScalar.getScalarType(yytext().toString());
          }
        case 71: break;
        case 44: 
          { yybegin(LEX_PACKAGE_USE); return PerlFunction.getFunctionType(yytext().toString());
          }
        case 72: break;
        case 27: 
          { yybegin(LEX_PACKAGE_DEFINITION_BLOCK); return PERL_VERSION;
          }
        case 73: break;
        case 48: 
          { yypushback(2);
    return PerlPackage.getPackageType(yytext().toString());
          }
        case 74: break;
        case 56: 
          { yybegin(LEX_PACKAGE_DEFINITION); return PerlFunction.getFunctionType(yytext().toString());
          }
        case 75: break;
        case 43: 
          { return PerlHash.getHashType(yytext().toString());
          }
        case 76: break;
        case 30: 
          { if( isLastToken() )
        {
            return endMultiline();
        }
        break;
          }
        case 77: break;
        case 45: 
          { return PERL_DEPACKAGE;
          }
        case 78: break;
        case 36: 
          { yypushback(1);yybegin(YYINITIAL);break;
          }
        case 79: break;
        case 51: 
          { StartPodBlock();break;
          }
        case 80: break;
        case 15: 
          { return PERL_COMMENT;
          }
        case 81: break;
        case 40: 
          { return PERL_DQ_STRING;
          }
        case 82: break;
        case 28: 
          { yybegin(YYINITIAL); return PERL_LBRACE;
          }
        case 83: break;
        case 34: 
          { return PERL_SQ_STRING;
          }
        case 84: break;
        case 21: 
          { return PERL_LPAREN;
          }
        case 85: break;
        case 12: 
          { return PERL_SIGIL_HASH;
          }
        case 86: break;
        case 7: 
          { if( isWaitingMultiLine() ) // this could be done using lexical state, like prepared or smth
    {
        startMultiLine();
    }
    return TokenType.NEW_LINE_INDENT;
          }
        case 87: break;
        case 6: 
          { return TokenType.BAD_CHARACTER;
          }
        case 88: break;
        case 23: 
          { yybegin(YYINITIAL);  return TokenType.BAD_CHARACTER;
          }
        case 89: break;
        case 22: 
          { return PERL_RPAREN;
          }
        case 90: break;
        case 41: 
          { yybegin(LEX_DEREFERENCE);return PERL_DEREFERENCE;
          }
        case 91: break;
        case 13: 
          { return PERL_SIGIL_SCALAR;
          }
        case 92: break;
        case 47: 
          { return PerlArray.getArrayType(yytext().toString());
          }
        case 93: break;
        case 38: 
          { yybegin(YYINITIAL);
        return PerlPackage.getPackageType(yytext().toString());
          }
        case 94: break;
        case 14: 
          { return PERL_SIGIL_ARRAY;
          }
        case 95: break;
        case 57: 
          { yybegin(LEX_REQUIRE); return PerlFunction.getFunctionType(yytext().toString());
          }
        case 96: break;
        case 8: 
          { yybegin(YYINITIAL);
    return PERL_SEMI;
          }
        case 97: break;
        case 2: 
          { if( zzMarkedPos == zzEndRead )
        {
            zzCurrentPos = zzStartRead = dataBlockStart;
            return PERL_COMMENT_BLOCK;
        }
        break;
          }
        case 98: break;
        case 31: 
          { yypushback(1); yybegin(YYINITIAL); break;
          }
        case 99: break;
        case 26: 
          { yybegin(YYINITIAL);return PERL_SEMI;
          }
        case 100: break;
        case 4: 
          { if( isMultilineEnd() || isLastToken())
        {
            return endMultiline();
        }
        break;
          }
        case 101: break;
        case 25: 
          { yybegin(YYINITIAL);
        return TokenType.BAD_CHARACTER;
          }
        case 102: break;
        case 24: 
          { yybegin(LEX_PACKAGE_DEFINITION_VERSION); return PerlPackage.getPackageType(yytext().toString());
          }
        case 103: break;
        case 3: 
          { if( zzMarkedPos == zzEndRead )
        {
            zzCurrentPos = zzStartRead = podBlockStart;
            return PERL_POD;
        }
        break;
          }
        case 104: break;
        case 33: 
          { yybegin(LEX_PACKAGE_USE_VERSION);
        return PerlPackage.getPackageType(yytext().toString());
          }
        case 105: break;
        case 53: 
          { prepareForMultiline(PERL_MULTILINE_DQ);return PERL_MULTILINE_MARKER;
          }
        case 106: break;
        case 17: 
          { return PERL_LBRACE;
          }
        case 107: break;
        case 18: 
          { return PERL_RBRACE;
          }
        case 108: break;
        case 55: 
          { StartDataBlock(); break;
          }
        case 109: break;
        case 39: 
          { yybegin(YYINITIAL);return PERL_FUNCTION_USER;
          }
        case 110: break;
        case 29: 
          { yybegin(YYINITIAL); return TokenType.BAD_CHARACTER;
          }
        case 111: break;
        case 20: 
          { return PERL_RBRACK;
          }
        case 112: break;
        case 35: 
          { yybegin(LEX_PACKAGE_USE_PARAMS);
        return PERL_SQ_STRING;
          }
        case 113: break;
        case 19: 
          { return PERL_LBRACK;
          }
        case 114: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
