/* The following code was generated by JFlex 1.4.3 on 30.04.15 21:09 */

package com.perl5.lang.perl.lexer;

/*
    http://jflex.de/manual.html
    http://www2.cs.tum.edu/projects/cup

*/

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import org.jetbrains.annotations.NotNull;
import com.perl5.lang.perl.util.PerlFunctionUtil;
import com.perl5.lang.perl.util.PerlScalarUtil;
import com.perl5.lang.perl.util.PerlHashUtil;
import com.perl5.lang.perl.util.PerlGlobUtil;
import com.perl5.lang.perl.util.PerlArrayUtil;
import com.perl5.lang.perl.util.PerlPackageUtil;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 30.04.15 21:09 from the specification file
 * <tt>C:/Repository/Perl5-IDEA/src/com/perl5/lang/perl/lexer/Perl.flex</tt>
 */
public class PerlLexer extends PerlLexerProto implements FlexLexer, PerlElementTypes {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int LEX_MULTILINE_WAITING = 12;
  public static final int LEX_REQUIRE = 24;
  public static final int LEX_PACKAGE_USE = 18;
  public static final int LEX_DEREFERENCE = 28;
  public static final int LEX_PACKAGE_USE_VERSION = 22;
  public static final int LEX_MULTILINE_TOKEN = 16;
  public static final int LEX_PACKAGE_DEFINITION_BLOCK = 6;
  public static final int LEX_PACKAGE_USE_PARAMS = 20;
  public static final int LEX_MULTILINE = 14;
  public static final int LEX_EOF = 8;
  public static final int LEX_PACKAGE_DEFINITION = 2;
  public static final int LEX_FUNCTION_DEFINITION = 26;
  public static final int YYINITIAL = 0;
  public static final int LEX_PACKAGE_DEFINITION_VERSION = 4;
  public static final int LEX_POD = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13,  6, 6
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\62\1\23\1\16"+
    "\1\115\1\71\1\30\1\45\1\17\1\116\1\117\1\22\1\20\1\120"+
    "\1\21\1\50\1\27\1\5\1\64\1\64\1\64\1\64\3\5\1\110"+
    "\1\5\1\52\1\4\1\32\1\26\1\33\1\51\1\72\1\13\1\77"+
    "\1\103\1\12\1\10\1\107\1\76\1\112\1\75\2\6\1\104\1\102"+
    "\1\11\1\106\1\114\1\6\1\74\1\100\1\14\1\105\1\113\1\73"+
    "\1\111\1\101\1\6\1\121\1\25\1\122\1\47\1\7\1\15\1\54"+
    "\1\66\1\42\1\55\1\37\1\57\1\36\1\63\1\60\1\6\1\67"+
    "\1\34\1\43\1\41\1\53\1\44\1\40\1\56\1\61\1\35\1\70"+
    "\1\65\1\6\1\31\1\123\1\6\1\124\1\46\1\125\1\24\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\3\1\1\2\1\3\1\0\1\4\1\5\5\0"+
    "\2\6\1\7\1\1\1\10\1\11\1\12\1\11\3\6"+
    "\10\13\1\14\3\13\7\12\2\13\1\6\1\13\10\12"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\2\27\2\1\1\30\2\31\1\32\1\31"+
    "\1\33\2\34\1\2\3\3\1\13\3\12\2\4\1\35"+
    "\2\36\1\37\2\40\21\36\1\40\2\36\2\41\1\37"+
    "\3\42\2\43\1\44\2\45\21\43\1\45\2\43\2\46"+
    "\4\0\1\11\1\0\1\41\2\0\1\11\1\47\1\50"+
    "\7\0\2\51\1\0\3\13\2\12\1\52\3\12\1\13"+
    "\1\53\11\12\3\54\2\55\1\0\1\17\3\0\1\3"+
    "\2\12\2\0\2\37\2\0\1\44\1\0\1\56\1\11"+
    "\1\57\2\12\13\0\1\60\3\0\1\12\1\61\5\12"+
    "\1\62\2\12\1\63\1\0\5\54\1\0\1\54\2\0"+
    "\1\3\1\37\1\57\1\0\1\44\1\57\1\0\1\64"+
    "\1\0\2\12\2\0\1\65\10\0\6\12\13\0\1\66"+
    "\1\40\1\45\2\12\2\0\1\65\3\0\2\60\4\12"+
    "\13\0\1\66\1\12\1\0\2\12\11\0\1\67\1\0"+
    "\1\70\1\71\71\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[393];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\126\0\254\0\u0102\0\u0158\0\u01ae\0\u0204\0\u025a"+
    "\0\u02b0\0\u0306\0\u035c\0\u03b2\0\u0408\0\u045e\0\u04b4\0\u050a"+
    "\0\u04b4\0\u0560\0\u04b4\0\u05b6\0\u060c\0\u0662\0\u06b8\0\u070e"+
    "\0\u0764\0\u07ba\0\u0810\0\u0866\0\u08bc\0\u0912\0\u04b4\0\u0968"+
    "\0\u09be\0\u0a14\0\u0a6a\0\u0ac0\0\u0b16\0\u0b6c\0\u0bc2\0\u0c18"+
    "\0\u0c6e\0\u0cc4\0\u0d1a\0\u0d70\0\u0dc6\0\u0e1c\0\u0e72\0\u0ec8"+
    "\0\u0f1e\0\u0f74\0\u0fca\0\u1020\0\u1076\0\u10cc\0\u1122\0\u1178"+
    "\0\u11ce\0\u1224\0\u127a\0\u04b4\0\u04b4\0\u04b4\0\u04b4\0\u04b4"+
    "\0\u04b4\0\u04b4\0\u04b4\0\u12d0\0\u04b4\0\u1326\0\u137c\0\u04b4"+
    "\0\u12d0\0\u13d2\0\u1428\0\u04b4\0\u04b4\0\u12d0\0\u04b4\0\u147e"+
    "\0\u04b4\0\u14d4\0\u152a\0\u1580\0\u15d6\0\u162c\0\u1682\0\u16d8"+
    "\0\u04b4\0\u04b4\0\u050a\0\u172e\0\u1784\0\u17da\0\u06b8\0\u070e"+
    "\0\u0764\0\u07ba\0\u0810\0\u0866\0\u08bc\0\u0912\0\u152a\0\u09be"+
    "\0\u0a14\0\u0ac0\0\u0b16\0\u0dc6\0\u0e1c\0\u0e72\0\u0ec8\0\u1830"+
    "\0\u11ce\0\u1224\0\u1886\0\u18dc\0\u1932\0\u1988\0\u19de\0\u1a34"+
    "\0\u04b4\0\u050a\0\u1a8a\0\u1ae0\0\u1b36\0\u06b8\0\u070e\0\u0764"+
    "\0\u07ba\0\u0810\0\u0866\0\u08bc\0\u0912\0\u152a\0\u09be\0\u0a14"+
    "\0\u0ac0\0\u0b16\0\u0dc6\0\u0e1c\0\u0e72\0\u0ec8\0\u1b8c\0\u11ce"+
    "\0\u1224\0\u1be2\0\u1c38\0\u1c8e\0\u1ce4\0\u1d3a\0\u1d90\0\u1de6"+
    "\0\u06b8\0\u04b4\0\u070e\0\u0764\0\u1e3c\0\u04b4\0\u1e92\0\u1ee8"+
    "\0\u1f3e\0\u1f94\0\u1fea\0\u2040\0\u2096\0\u20ec\0\u2142\0\u04b4"+
    "\0\u2198\0\u21ee\0\u2244\0\u060c\0\u229a\0\u22f0\0\u2346\0\u239c"+
    "\0\u23f2\0\u2448\0\u249e\0\u04b4\0\u24f4\0\u254a\0\u25a0\0\u25f6"+
    "\0\u264c\0\u26a2\0\u26f8\0\u274e\0\u27a4\0\u04b4\0\u27fa\0\u2850"+
    "\0\u28a6\0\u04b4\0\u28fc\0\u04b4\0\u12d0\0\u2952\0\u1428\0\u29a8"+
    "\0\u2346\0\u29fe\0\u2a54\0\u2aaa\0\u2b00\0\u2b56\0\u2bac\0\u2c02"+
    "\0\u2c58\0\u2cae\0\u04b4\0\u1d3a\0\u2d04\0\u2d5a\0\u2db0\0\u2e06"+
    "\0\u2e5c\0\u2eb2\0\u2f08\0\u2f5e\0\u2fb4\0\u300a\0\u3060\0\u30b6"+
    "\0\u310c\0\u2244\0\u3162\0\u31b8\0\u320e\0\u3264\0\u32ba\0\u060c"+
    "\0\u3310\0\u3366\0\u33bc\0\u3412\0\u3468\0\u060c\0\u34be\0\u3514"+
    "\0\u060c\0\u356a\0\u35c0\0\u3616\0\u366c\0\u36c2\0\u3718\0\u376e"+
    "\0\u37c4\0\u381a\0\u3870\0\u38c6\0\u391c\0\u3972\0\u39c8\0\u3a1e"+
    "\0\u3a74\0\u3aca\0\u04b4\0\u3b20\0\u3b76\0\u3bcc\0\u3c22\0\u3c78"+
    "\0\u3cce\0\u3d24\0\u3d7a\0\u3dd0\0\u3e26\0\u3e7c\0\u3ed2\0\u3f28"+
    "\0\u3f7e\0\u3fd4\0\u402a\0\u4080\0\u40d6\0\u412c\0\u4182\0\u41d8"+
    "\0\u422e\0\u4284\0\u42da\0\u4330\0\u4386\0\u43dc\0\u4432\0\u4488"+
    "\0\u44de\0\u4534\0\u458a\0\u45e0\0\u4636\0\u468c\0\u46e2\0\u1e92"+
    "\0\u4738\0\u04b4\0\u478e\0\u47e4\0\u2142\0\u3ed2\0\u04b4\0\u483a"+
    "\0\u4890\0\u48e6\0\u493c\0\u27fa\0\u4992\0\u49e8\0\u4a3e\0\u4a94"+
    "\0\u4aea\0\u4b40\0\u4b96\0\u4bec\0\u4c42\0\u28a6\0\u04b4\0\u4c98"+
    "\0\u4cee\0\u4d44\0\u4d9a\0\u4df0\0\u4e46\0\u4e9c\0\u4ef2\0\u4f48"+
    "\0\u4f9e\0\u4ff4\0\u504a\0\u50a0\0\u060c\0\u50f6\0\u060c\0\u060c"+
    "\0\u514c\0\u51a2\0\u51f8\0\u524e\0\u52a4\0\u52fa\0\u5350\0\u53a6"+
    "\0\u53fc\0\u5452\0\u54a8\0\u54fe\0\u5554\0\u55aa\0\u5600\0\u5656"+
    "\0\u56ac\0\u5702\0\u5758\0\u57ae\0\u5804\0\u585a\0\u58b0\0\u5906"+
    "\0\u595c\0\u59b2\0\u5a08\0\u5a5e\0\u5ab4\0\u5b0a\0\u5b60\0\u5bb6"+
    "\0\u5c0c\0\u5c62\0\u5cb8\0\u5d0e\0\u5d64\0\u5dba\0\u5e10\0\u5e66"+
    "\0\u5ebc\0\u5f12\0\u5f68\0\u5fbe\0\u6014\0\u606a\0\u60c0\0\u6116"+
    "\0\u616c\0\u61c2\0\u6218\0\u626e\0\u62c4\0\u631a\0\u6370\0\u63c6"+
    "\0\u641c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[393];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\5\25\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\25\1\47\1\50\1\25\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\37\1\57\1\37\1\60\1\61"+
    "\1\62\1\63\1\64\2\25\1\65\1\22\1\25\1\24"+
    "\1\66\1\25\1\67\1\70\1\71\1\72\15\25\1\24"+
    "\4\25\1\73\1\74\1\75\1\76\1\77\1\100\1\25"+
    "\1\101\1\102\1\103\1\104\1\105\1\106\1\103\10\107"+
    "\14\103\1\107\2\103\11\107\6\103\7\107\1\106\6\107"+
    "\2\103\22\107\6\103\1\107\2\103\1\110\1\111\1\105"+
    "\1\106\1\23\1\112\54\110\1\106\1\110\1\112\1\113"+
    "\22\110\1\112\13\110\1\114\1\110\1\115\1\116\1\105"+
    "\1\106\1\23\55\115\1\106\41\115\1\114\1\115\2\5"+
    "\1\117\123\5\2\120\1\121\23\120\1\122\77\120\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\24\5\25"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\123\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\25\1\47\1\50\1\25\1\124\1\52\1\53\1\25"+
    "\1\55\1\56\1\37\1\57\1\37\1\60\1\61\1\62"+
    "\1\63\1\125\2\25\1\126\1\22\1\25\1\24\1\66"+
    "\1\25\1\67\1\25\1\71\1\72\15\25\1\24\4\25"+
    "\1\73\1\74\1\75\1\76\1\77\1\100\1\25\1\101"+
    "\1\102\1\127\1\130\1\131\123\127\2\11\1\0\123\11"+
    "\1\132\1\133\1\21\1\22\1\23\1\134\1\135\1\136"+
    "\5\135\1\137\1\140\1\141\1\142\1\143\1\144\1\145"+
    "\1\146\1\132\1\147\1\150\1\151\1\135\1\152\1\153"+
    "\11\135\1\154\1\155\1\132\1\156\1\132\1\157\7\135"+
    "\1\22\1\135\1\134\1\160\3\135\1\161\1\162\15\135"+
    "\1\134\4\135\1\73\2\132\1\76\2\132\1\135\2\132"+
    "\1\17\1\20\1\21\1\22\1\23\1\163\1\164\1\163"+
    "\5\164\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\123\1\41\1\42\1\164\1\44\1\45"+
    "\11\164\1\55\1\56\1\37\1\57\1\37\1\60\7\164"+
    "\1\22\1\164\1\163\4\164\1\71\1\72\15\164\1\163"+
    "\4\164\1\73\1\74\1\75\1\76\1\77\1\100\1\164"+
    "\1\101\1\102\1\17\1\20\1\21\1\22\1\23\1\165"+
    "\1\166\1\167\5\166\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\123\1\41\1\42\1\166"+
    "\1\44\1\45\11\166\1\55\1\56\1\37\1\57\1\37"+
    "\1\60\7\166\1\22\1\166\1\165\1\170\3\166\1\71"+
    "\1\72\15\166\1\165\4\166\1\73\1\74\1\75\1\76"+
    "\1\77\1\100\1\166\1\101\1\102\1\171\1\172\1\21"+
    "\1\22\1\23\1\173\1\174\1\175\5\174\1\176\1\177"+
    "\1\200\1\201\1\202\1\203\1\204\1\205\1\171\1\206"+
    "\1\207\1\210\1\174\1\211\1\212\11\174\1\213\1\214"+
    "\1\171\1\215\1\171\1\216\7\174\1\22\1\174\1\173"+
    "\1\217\3\174\1\220\1\221\15\174\1\173\4\174\1\73"+
    "\2\171\1\76\2\171\1\174\2\171\1\17\1\20\1\21"+
    "\1\22\1\23\1\222\1\223\1\222\5\223\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\123"+
    "\1\41\1\42\1\223\1\44\1\45\11\223\1\55\1\56"+
    "\1\37\1\57\1\37\1\60\7\223\1\22\1\223\1\222"+
    "\4\223\1\71\1\72\15\223\1\222\4\223\1\73\1\74"+
    "\1\75\1\76\1\77\1\100\1\223\1\101\1\102\130\0"+
    "\1\21\126\0\1\22\56\0\1\22\50\0\1\24\1\25"+
    "\1\24\5\25\2\0\1\224\1\0\1\225\7\0\1\25"+
    "\2\0\11\25\3\0\1\226\1\0\1\227\7\25\1\0"+
    "\1\25\1\24\4\25\2\0\15\25\1\24\4\25\6\0"+
    "\1\25\7\0\10\25\2\0\1\224\1\0\1\225\7\0"+
    "\1\25\2\0\11\25\5\0\1\227\7\25\1\0\6\25"+
    "\2\0\22\25\6\0\1\25\7\0\1\24\1\25\1\230"+
    "\5\25\2\0\1\224\1\0\1\225\7\0\1\25\2\0"+
    "\11\25\3\0\1\226\1\0\1\227\7\25\1\0\1\25"+
    "\1\24\4\25\2\0\15\25\1\24\4\25\6\0\1\25"+
    "\2\0\1\231\2\0\12\231\1\232\110\231\1\233\2\0"+
    "\13\233\1\232\107\233\1\234\2\0\14\234\1\232\106\234"+
    "\20\0\1\37\5\0\1\37\104\0\1\235\1\0\1\235"+
    "\11\0\1\37\4\0\1\37\4\0\1\236\30\0\1\235"+
    "\23\0\1\235\22\0\10\237\5\0\1\37\3\0\1\37"+
    "\2\0\1\237\2\0\11\237\6\0\7\237\1\0\6\237"+
    "\2\0\22\237\6\0\1\237\26\0\1\37\1\0\1\37"+
    "\123\0\1\37\125\0\1\37\1\0\1\37\4\0\1\76"+
    "\3\0\1\240\4\0\1\241\6\0\1\242\3\0\1\243"+
    "\1\244\2\0\1\245\2\0\1\246\66\0\1\37\103\0"+
    "\10\247\3\0\2\250\1\0\1\250\5\0\1\247\2\0"+
    "\11\247\2\0\1\251\3\0\7\247\1\0\6\247\2\0"+
    "\22\247\6\0\1\247\7\0\10\25\2\0\1\224\1\0"+
    "\1\225\7\0\1\25\2\0\11\25\5\0\1\227\1\61"+
    "\6\25\1\0\6\25\2\0\22\25\6\0\1\25\30\0"+
    "\1\252\3\0\1\253\121\0\1\37\4\0\1\37\77\0"+
    "\10\25\2\0\1\224\1\0\1\225\7\0\1\25\2\0"+
    "\1\25\1\254\1\25\1\254\5\25\5\0\1\227\7\25"+
    "\1\0\6\25\2\0\22\25\6\0\1\25\7\0\10\25"+
    "\2\0\1\224\1\0\1\225\7\0\1\25\2\0\1\25"+
    "\1\254\1\25\1\254\5\25\5\0\1\227\3\25\1\255"+
    "\3\25\1\0\6\25\2\0\22\25\6\0\1\25\7\0"+
    "\10\25\2\0\1\224\1\0\1\225\7\0\1\256\2\0"+
    "\4\25\1\254\4\25\5\0\1\227\7\25\1\0\6\25"+
    "\2\0\22\25\6\0\1\25\7\0\10\25\2\0\1\224"+
    "\1\0\1\225\7\0\1\25\2\0\3\25\1\254\5\25"+
    "\5\0\1\227\1\257\6\25\1\0\6\25\2\0\22\25"+
    "\6\0\1\25\7\0\10\25\2\0\1\224\1\0\1\225"+
    "\7\0\1\25\2\0\7\25\1\260\1\25\5\0\1\227"+
    "\7\25\1\0\6\25\2\0\22\25\6\0\1\25\7\0"+
    "\10\25\2\0\1\224\1\0\1\225\7\0\1\25\2\0"+
    "\11\25\5\0\1\227\1\25\1\261\5\25\1\0\6\25"+
    "\2\0\22\25\6\0\1\25\7\0\10\25\2\0\1\224"+
    "\1\0\1\225\7\0\1\25\2\0\11\25\5\0\1\227"+
    "\1\25\1\262\5\25\1\0\6\25\2\0\22\25\6\0"+
    "\1\25\47\0\1\37\126\0\1\37\127\0\1\263\127\0"+
    "\1\264\60\0\10\25\2\0\1\224\1\0\1\225\7\0"+
    "\1\25\2\0\11\25\5\0\1\227\3\25\1\254\3\25"+
    "\1\0\6\25\2\0\22\25\6\0\1\25\7\0\10\25"+
    "\2\0\1\224\1\0\1\225\7\0\1\25\2\0\5\25"+
    "\1\265\3\25\5\0\1\227\7\25\1\0\6\25\2\0"+
    "\22\25\6\0\1\25\7\0\10\25\2\0\1\224\1\0"+
    "\1\225\7\0\1\25\2\0\3\25\1\266\5\25\5\0"+
    "\1\227\7\25\1\0\6\25\2\0\22\25\6\0\1\25"+
    "\7\0\10\25\2\0\1\224\1\0\1\225\7\0\1\25"+
    "\2\0\3\25\1\267\5\25\5\0\1\227\7\25\1\0"+
    "\6\25\2\0\22\25\6\0\1\25\7\0\10\25\2\0"+
    "\1\224\1\0\1\225\7\0\1\25\2\0\6\25\1\270"+
    "\2\25\5\0\1\227\1\271\6\25\1\0\5\25\1\272"+
    "\2\0\22\25\6\0\1\25\7\0\10\25\2\0\1\224"+
    "\1\0\1\225\7\0\1\25\2\0\11\25\5\0\1\227"+
    "\1\25\1\273\5\25\1\0\6\25\2\0\22\25\6\0"+
    "\1\25\7\0\10\25\2\0\1\224\1\0\1\225\7\0"+
    "\1\25\2\0\3\25\1\274\5\25\5\0\1\227\7\25"+
    "\1\0\6\25\2\0\22\25\6\0\1\25\7\0\10\25"+
    "\2\0\1\224\1\0\1\225\7\0\1\25\2\0\11\25"+
    "\5\0\1\227\6\25\1\275\1\0\6\25\2\0\22\25"+
    "\6\0\1\25\6\0\1\276\10\277\10\276\1\0\3\276"+
    "\1\277\2\276\11\277\2\276\1\300\3\276\7\277\1\0"+
    "\6\277\2\276\22\277\6\276\1\277\7\0\10\301\3\0"+
    "\2\302\1\0\1\302\5\0\1\301\2\0\11\301\2\0"+
    "\1\303\3\0\7\301\1\0\6\301\2\0\22\301\6\0"+
    "\1\301\2\0\2\73\1\304\123\73\2\0\1\105\124\0"+
    "\1\305\1\105\1\106\56\0\1\106\50\0\10\107\14\0"+
    "\1\107\2\0\11\107\5\0\1\306\7\107\1\0\6\107"+
    "\2\0\22\107\6\0\1\107\7\0\1\112\1\0\1\112"+
    "\40\0\1\307\13\0\1\112\23\0\1\112\22\0\1\112"+
    "\56\0\1\112\23\0\1\112\15\0\2\120\1\121\125\120"+
    "\1\121\37\120\1\310\63\120\24\0\1\37\1\0\1\37"+
    "\4\0\1\76\77\0\10\25\2\0\1\224\1\0\1\225"+
    "\7\0\1\25\2\0\3\25\1\254\5\25\5\0\1\227"+
    "\1\311\6\25\1\0\6\25\2\0\22\25\6\0\1\25"+
    "\7\0\10\25\2\0\1\224\1\0\1\225\7\0\1\25"+
    "\2\0\3\25\1\312\5\25\5\0\1\227\7\25\1\0"+
    "\6\25\2\0\22\25\6\0\1\25\7\0\10\25\2\0"+
    "\1\224\1\0\1\225\7\0\1\25\2\0\6\25\1\270"+
    "\2\25\5\0\1\227\1\271\6\25\1\0\6\25\2\0"+
    "\22\25\6\0\1\25\2\0\2\127\1\0\125\127\1\131"+
    "\123\127\5\0\1\134\1\135\1\134\5\135\2\0\1\224"+
    "\1\0\1\225\7\0\1\135\2\0\11\135\3\0\1\313"+
    "\1\0\1\314\7\135\1\0\1\135\1\134\4\135\2\0"+
    "\15\135\1\134\4\135\6\0\1\135\7\0\10\135\2\0"+
    "\1\224\1\0\1\225\7\0\1\135\2\0\11\135\5\0"+
    "\1\314\7\135\1\0\6\135\2\0\22\135\6\0\1\135"+
    "\7\0\1\136\1\135\1\136\5\135\2\0\1\224\1\0"+
    "\1\225\7\0\1\135\2\0\11\135\3\0\1\226\1\0"+
    "\1\314\7\135\1\0\1\135\1\136\4\135\2\0\15\135"+
    "\1\136\4\135\6\0\1\135\7\0\1\315\7\135\2\0"+
    "\1\224\1\0\1\225\7\0\1\135\2\0\11\135\5\0"+
    "\1\314\7\135\1\0\1\135\1\315\4\135\2\0\15\135"+
    "\1\315\4\135\6\0\1\135\7\0\1\163\1\164\1\163"+
    "\5\164\2\0\1\224\1\0\1\225\7\0\1\164\2\0"+
    "\11\164\3\0\1\226\1\0\1\227\7\164\1\0\1\164"+
    "\1\163\4\164\2\0\15\164\1\163\4\164\6\0\1\164"+
    "\7\0\10\164\2\0\1\224\1\0\1\225\7\0\1\164"+
    "\2\0\11\164\5\0\1\227\7\164\1\0\6\164\2\0"+
    "\22\164\6\0\1\164\7\0\1\165\1\166\1\165\5\166"+
    "\2\0\1\224\1\0\1\225\7\0\1\166\2\0\11\166"+
    "\3\0\1\313\1\0\1\227\7\166\1\0\1\166\1\165"+
    "\4\166\2\0\15\166\1\165\4\166\6\0\1\166\7\0"+
    "\10\166\2\0\1\224\1\0\1\225\7\0\1\166\2\0"+
    "\11\166\5\0\1\227\7\166\1\0\6\166\2\0\22\166"+
    "\6\0\1\166\7\0\1\167\1\166\1\167\5\166\2\0"+
    "\1\224\1\0\1\225\7\0\1\166\2\0\11\166\3\0"+
    "\1\226\1\0\1\227\7\166\1\0\1\166\1\167\4\166"+
    "\2\0\15\166\1\167\4\166\6\0\1\166\7\0\1\316"+
    "\7\166\2\0\1\224\1\0\1\225\7\0\1\166\2\0"+
    "\11\166\5\0\1\227\7\166\1\0\1\166\1\316\4\166"+
    "\2\0\15\166\1\316\4\166\6\0\1\166\7\0\1\173"+
    "\1\174\1\173\5\174\2\0\1\224\1\0\1\225\7\0"+
    "\1\174\2\0\11\174\3\0\1\317\1\0\1\320\7\174"+
    "\1\0\1\174\1\173\4\174\2\0\15\174\1\173\4\174"+
    "\6\0\1\174\7\0\10\174\2\0\1\224\1\0\1\225"+
    "\7\0\1\174\2\0\11\174\5\0\1\320\7\174\1\0"+
    "\6\174\2\0\22\174\6\0\1\174\7\0\1\175\1\174"+
    "\1\175\5\174\2\0\1\224\1\0\1\225\7\0\1\174"+
    "\2\0\11\174\3\0\1\226\1\0\1\320\7\174\1\0"+
    "\1\174\1\175\4\174\2\0\15\174\1\175\4\174\6\0"+
    "\1\174\7\0\1\321\7\174\2\0\1\224\1\0\1\225"+
    "\7\0\1\174\2\0\11\174\5\0\1\320\7\174\1\0"+
    "\1\174\1\321\4\174\2\0\15\174\1\321\4\174\6\0"+
    "\1\174\7\0\1\222\1\223\1\222\5\223\2\0\1\224"+
    "\1\0\1\225\7\0\1\223\2\0\11\223\3\0\1\226"+
    "\1\0\1\227\7\223\1\0\1\223\1\222\4\223\2\0"+
    "\15\223\1\222\4\223\6\0\1\223\7\0\10\223\2\0"+
    "\1\224\1\0\1\225\7\0\1\223\2\0\11\223\5\0"+
    "\1\227\7\223\1\0\6\223\2\0\22\223\6\0\1\223"+
    "\54\0\1\322\106\0\1\323\77\0\1\324\1\0\1\324"+
    "\54\0\1\324\23\0\1\324\67\0\1\325\60\0\1\24"+
    "\1\25\1\24\1\326\1\25\1\327\2\25\2\0\1\224"+
    "\1\0\1\225\7\0\1\25\2\0\11\25\3\0\1\226"+
    "\1\0\1\227\7\25\1\0\1\25\1\24\4\25\2\0"+
    "\15\25\1\24\4\25\6\0\1\25\7\0\1\235\1\0"+
    "\1\235\40\0\1\226\13\0\1\235\23\0\1\235\22\0"+
    "\10\237\14\0\1\237\2\0\11\237\5\0\1\330\7\237"+
    "\1\0\6\237\2\0\22\237\6\0\1\237\43\0\1\331"+
    "\137\0\1\332\137\0\1\333\113\0\1\334\107\0\1\335"+
    "\127\0\1\336\125\0\1\337\14\0\1\340\56\0\10\247"+
    "\14\0\1\247\2\0\11\247\5\0\1\341\7\247\1\0"+
    "\6\247\2\0\22\247\6\0\1\247\114\0\1\250\46\0"+
    "\1\37\75\0\1\342\1\0\10\343\1\344\1\345\1\346"+
    "\11\0\1\343\2\0\11\343\6\0\7\343\1\342\6\343"+
    "\2\0\22\343\6\0\1\343\7\0\10\25\2\0\1\224"+
    "\1\0\1\225\7\0\1\25\2\0\3\25\1\261\5\25"+
    "\5\0\1\227\7\25\1\0\6\25\2\0\22\25\6\0"+
    "\1\25\7\0\10\25\2\0\1\224\1\0\1\225\7\0"+
    "\1\25\2\0\11\25\5\0\1\227\5\25\1\347\1\25"+
    "\1\0\6\25\2\0\22\25\6\0\1\25\7\0\10\25"+
    "\2\0\1\224\1\0\1\225\7\0\1\25\2\0\1\25"+
    "\1\254\7\25\5\0\1\227\7\25\1\0\6\25\2\0"+
    "\22\25\6\0\1\25\7\0\10\25\2\0\1\224\1\0"+
    "\1\225\7\0\1\25\2\0\10\25\1\254\5\0\1\227"+
    "\7\25\1\0\6\25\2\0\22\25\6\0\1\25\7\0"+
    "\10\25\2\0\1\224\1\0\1\225\7\0\1\25\2\0"+
    "\10\25\1\350\5\0\1\227\7\25\1\0\6\25\2\0"+
    "\22\25\6\0\1\25\7\0\10\25\2\0\1\224\1\0"+
    "\1\225\7\0\1\25\2\0\6\25\1\351\2\25\5\0"+
    "\1\227\7\25\1\0\6\25\2\0\22\25\6\0\1\25"+
    "\52\0\1\37\62\0\10\25\2\0\1\224\1\0\1\225"+
    "\7\0\1\25\2\0\11\25\5\0\1\227\2\25\1\254"+
    "\4\25\1\0\6\25\2\0\22\25\6\0\1\25\7\0"+
    "\10\25\2\0\1\224\1\0\1\225\7\0\1\25\2\0"+
    "\11\25\5\0\1\227\4\25\1\352\2\25\1\0\6\25"+
    "\2\0\22\25\6\0\1\25\7\0\10\25\2\0\1\224"+
    "\1\0\1\225\7\0\1\25\2\0\4\25\1\353\4\25"+
    "\5\0\1\227\4\25\1\254\2\25\1\0\6\25\2\0"+
    "\22\25\6\0\1\25\7\0\10\25\2\0\1\224\1\0"+
    "\1\225\7\0\1\25\2\0\11\25\5\0\1\227\1\25"+
    "\1\354\5\25\1\0\6\25\2\0\22\25\6\0\1\25"+
    "\7\0\10\25\2\0\1\224\1\0\1\225\7\0\1\25"+
    "\2\0\11\25\5\0\1\227\3\25\1\355\3\25\1\0"+
    "\6\25\2\0\22\25\6\0\1\25\7\0\10\25\2\0"+
    "\1\224\1\0\1\225\7\0\1\25\2\0\11\25\5\0"+
    "\1\227\7\25\1\0\3\25\1\356\2\25\2\0\22\25"+
    "\6\0\1\25\7\0\10\25\2\0\1\224\1\0\1\225"+
    "\7\0\1\25\2\0\1\357\10\25\5\0\1\227\7\25"+
    "\1\0\6\25\2\0\22\25\6\0\1\25\7\0\10\25"+
    "\2\0\1\224\1\0\1\225\7\0\1\25\2\0\11\25"+
    "\5\0\1\227\7\25\1\0\6\25\2\0\22\25\6\0"+
    "\1\360\7\0\10\25\2\0\1\224\1\0\1\225\7\0"+
    "\1\25\2\0\3\25\1\361\5\25\5\0\1\227\7\25"+
    "\1\0\6\25\2\0\22\25\6\0\1\25\7\0\10\277"+
    "\14\0\1\277\2\0\11\277\5\0\1\362\7\277\1\0"+
    "\6\277\2\0\22\277\6\0\1\277\12\0\1\363\3\276"+
    "\1\364\56\0\1\365\1\366\1\276\2\0\1\276\1\0"+
    "\1\276\1\367\1\276\1\370\1\371\1\276\1\0\4\276"+
    "\16\0\10\301\14\0\1\301\2\0\11\301\5\0\1\372"+
    "\7\301\1\0\6\301\2\0\22\301\6\0\1\301\114\0"+
    "\1\302\65\0\1\373\53\0\2\120\1\121\65\120\1\374"+
    "\35\120\5\0\10\25\2\0\1\224\1\0\1\225\7\0"+
    "\1\25\2\0\11\25\5\0\1\227\4\25\1\254\2\25"+
    "\1\0\6\25\2\0\22\25\6\0\1\25\7\0\1\375"+
    "\1\0\1\324\54\0\1\375\23\0\1\375\67\0\1\376"+
    "\60\0\1\315\1\135\1\315\5\135\2\0\1\224\1\0"+
    "\1\225\7\0\1\135\2\0\11\135\3\0\1\377\1\0"+
    "\1\314\7\135\1\0\1\135\1\315\4\135\2\0\15\135"+
    "\1\315\4\135\6\0\1\135\7\0\1\316\1\166\1\316"+
    "\5\166\2\0\1\224\1\0\1\225\7\0\1\166\2\0"+
    "\11\166\3\0\1\377\1\0\1\227\7\166\1\0\1\166"+
    "\1\316\4\166\2\0\15\166\1\316\4\166\6\0\1\166"+
    "\7\0\1\u0100\1\0\1\324\54\0\1\u0100\23\0\1\u0100"+
    "\67\0\1\u0101\60\0\1\321\1\174\1\321\5\174\2\0"+
    "\1\224\1\0\1\225\7\0\1\174\2\0\11\174\3\0"+
    "\1\u0102\1\0\1\320\7\174\1\0\1\174\1\321\4\174"+
    "\2\0\15\174\1\321\4\174\6\0\1\174\21\0\1\u0103"+
    "\113\0\10\u0104\14\0\1\u0104\2\0\11\u0104\6\0\7\u0104"+
    "\1\0\6\u0104\2\0\22\u0104\6\0\1\u0104\7\0\4\25"+
    "\1\u0105\3\25\2\0\1\224\1\0\1\225\7\0\1\25"+
    "\2\0\11\25\5\0\1\227\7\25\1\0\6\25\2\0"+
    "\22\25\6\0\1\25\7\0\6\25\1\u0106\1\25\2\0"+
    "\1\224\1\0\1\225\7\0\1\25\2\0\11\25\5\0"+
    "\1\227\7\25\1\0\6\25\2\0\22\25\6\0\1\25"+
    "\54\0\1\u0107\115\0\1\u0108\12\0\1\u0109\125\0\1\u0109"+
    "\107\0\1\334\144\0\1\u0109\106\0\1\u010a\142\0\1\u010b"+
    "\107\0\1\u010c\131\0\1\u010d\135\0\1\u010e\60\0\10\343"+
    "\14\0\1\343\2\0\11\343\6\0\7\343\1\0\6\343"+
    "\2\0\22\343\6\0\1\343\2\0\1\u010f\2\0\13\u010f"+
    "\2\0\41\u010f\2\0\43\u010f\1\u0110\2\0\13\u0110\2\0"+
    "\41\u0110\2\0\43\u0110\1\u0111\2\0\13\u0111\2\0\41\u0111"+
    "\2\0\43\u0111\5\0\10\25\2\0\1\224\1\0\1\225"+
    "\7\0\1\25\2\0\11\25\5\0\1\227\6\25\1\u0112"+
    "\1\0\6\25\2\0\22\25\6\0\1\25\7\0\10\25"+
    "\2\0\1\224\1\0\1\225\7\0\1\25\2\0\11\25"+
    "\5\0\1\227\7\25\1\0\4\25\1\u0113\1\25\2\0"+
    "\22\25\6\0\1\25\7\0\10\25\2\0\1\224\1\0"+
    "\1\225\7\0\1\25\2\0\11\25\5\0\1\227\5\25"+
    "\1\u0114\1\25\1\0\6\25\2\0\22\25\6\0\1\25"+
    "\7\0\10\25\2\0\1\224\1\0\1\225\7\0\1\25"+
    "\2\0\11\25\5\0\1\227\7\25\1\0\5\25\1\u0115"+
    "\2\0\22\25\6\0\1\25\7\0\10\25\2\0\1\224"+
    "\1\0\1\225\7\0\1\25\2\0\1\u0116\10\25\5\0"+
    "\1\227\7\25\1\0\6\25\2\0\22\25\6\0\1\25"+
    "\7\0\10\25\2\0\1\224\1\0\1\225\7\0\1\25"+
    "\2\0\1\25\1\350\7\25\5\0\1\227\7\25\1\0"+
    "\6\25\2\0\22\25\6\0\1\25\7\0\10\25\2\0"+
    "\1\224\1\0\1\225\7\0\1\25\2\0\11\25\5\0"+
    "\1\227\7\25\1\0\5\25\1\u0117\2\0\22\25\6\0"+
    "\1\25\7\0\10\25\2\0\1\224\1\0\1\225\7\0"+
    "\1\25\2\0\11\25\5\0\1\227\6\25\1\350\1\0"+
    "\6\25\2\0\22\25\6\0\1\25\54\0\1\u0118\64\0"+
    "\1\u0119\127\0\1\u011a\125\0\1\u011b\61\0\1\u011c\40\0"+
    "\1\u011d\227\0\1\u011e\24\0\1\u011f\2\0\1\u0120\225\0"+
    "\1\u0121\63\0\1\u0122\60\0\10\107\14\0\1\107\2\0"+
    "\11\107\6\0\7\107\1\0\6\107\2\0\22\107\6\0"+
    "\1\107\2\0\2\120\1\121\32\120\1\u0123\70\120\5\0"+
    "\1\375\1\0\1\375\40\0\1\377\13\0\1\375\23\0"+
    "\1\375\22\0\10\u0124\14\0\1\u0124\2\0\11\u0124\6\0"+
    "\7\u0124\1\0\6\u0124\2\0\22\u0124\6\0\1\u0124\7\0"+
    "\1\375\56\0\1\375\23\0\1\375\22\0\1\u0100\1\0"+
    "\1\u0100\40\0\1\u0102\13\0\1\u0100\23\0\1\u0100\22\0"+
    "\10\u0125\14\0\1\u0125\2\0\11\u0125\6\0\7\u0125\1\0"+
    "\6\u0125\2\0\22\u0125\6\0\1\u0125\7\0\1\u0100\56\0"+
    "\1\u0100\23\0\1\u0100\22\0\10\u0104\4\0\1\225\7\0"+
    "\1\u0104\2\0\11\u0104\5\0\1\227\7\u0104\1\0\6\u0104"+
    "\2\0\22\u0104\6\0\1\u0104\7\0\5\25\1\u0126\2\25"+
    "\2\0\1\224\1\0\1\225\7\0\1\25\2\0\11\25"+
    "\5\0\1\227\7\25\1\0\6\25\2\0\22\25\6\0"+
    "\1\25\7\0\7\25\1\u0127\2\0\1\224\1\0\1\225"+
    "\7\0\1\25\2\0\11\25\5\0\1\227\7\25\1\0"+
    "\6\25\2\0\22\25\6\0\1\25\7\0\10\u0128\14\0"+
    "\1\u0128\2\0\11\u0128\6\0\7\u0128\1\0\6\u0128\2\0"+
    "\22\u0128\6\0\1\u0128\55\0\1\u0129\52\0\2\u0109\1\u012a"+
    "\123\u0109\43\0\1\u0109\137\0\1\u012b\130\0\1\u012c\134\0"+
    "\1\u0109\43\0\10\u012d\14\0\1\u012d\2\0\11\u012d\6\0"+
    "\7\u012d\1\0\6\u012d\2\0\22\u012d\6\0\1\u012d\2\0"+
    "\1\u010f\2\0\12\u010f\1\u012e\2\0\41\u010f\2\0\43\u010f"+
    "\1\u0110\2\0\13\u0110\1\u012f\1\0\41\u0110\2\0\43\u0110"+
    "\1\u0111\2\0\13\u0111\1\0\1\u012f\41\u0111\2\0\43\u0111"+
    "\5\0\10\25\2\0\1\224\1\0\1\225\7\0\1\25"+
    "\2\0\1\25\1\u0130\7\25\5\0\1\227\7\25\1\0"+
    "\6\25\2\0\22\25\6\0\1\25\7\0\10\25\2\0"+
    "\1\224\1\0\1\225\7\0\1\25\2\0\11\25\5\0"+
    "\1\227\1\25\1\u0131\5\25\1\0\6\25\2\0\22\25"+
    "\6\0\1\25\7\0\10\25\2\0\1\224\1\0\1\225"+
    "\7\0\1\25\2\0\5\25\1\u0132\3\25\5\0\1\227"+
    "\7\25\1\0\6\25\2\0\22\25\6\0\1\25\7\0"+
    "\10\25\2\0\1\224\1\0\1\225\7\0\1\25\2\0"+
    "\11\25\5\0\1\227\5\25\1\u0133\1\25\1\0\6\25"+
    "\2\0\22\25\6\0\1\25\7\0\10\25\2\0\1\224"+
    "\1\0\1\225\7\0\1\25\2\0\11\25\5\0\1\227"+
    "\1\25\1\61\5\25\1\0\6\25\2\0\22\25\6\0"+
    "\1\25\7\0\10\25\2\0\1\224\1\0\1\225\7\0"+
    "\1\25\2\0\3\25\1\360\5\25\5\0\1\227\7\25"+
    "\1\0\6\25\2\0\22\25\6\0\1\25\7\0\10\u0134"+
    "\14\0\1\u0134\2\0\11\u0134\6\0\7\u0134\1\0\6\u0134"+
    "\2\0\22\u0134\6\0\1\u0134\105\0\1\u0135\117\0\1\u0136"+
    "\124\0\1\u0137\43\0\1\u0138\122\0\1\u0139\213\0\1\u013a"+
    "\125\0\1\u013b\137\0\1\u013c\26\0\1\u013d\122\0\10\u013e"+
    "\14\0\1\u013e\2\0\11\u013e\6\0\7\u013e\1\0\6\u013e"+
    "\2\0\22\u013e\6\0\1\u013e\2\0\2\u0123\1\u013f\123\u0123"+
    "\5\0\10\u0124\4\0\1\225\7\0\1\u0124\2\0\11\u0124"+
    "\5\0\1\314\7\u0124\1\0\6\u0124\2\0\22\u0124\6\0"+
    "\1\u0124\7\0\10\u0125\4\0\1\225\7\0\1\u0125\2\0"+
    "\11\u0125\5\0\1\320\7\u0125\1\0\6\u0125\2\0\22\u0125"+
    "\6\0\1\u0125\7\0\2\25\1\u0140\5\25\2\0\1\224"+
    "\1\0\1\225\7\0\1\25\2\0\11\25\5\0\1\227"+
    "\7\25\1\0\6\25\2\0\22\25\6\0\1\25\7\0"+
    "\6\25\1\u0126\1\25\2\0\1\224\1\0\1\225\7\0"+
    "\1\25\2\0\11\25\5\0\1\227\7\25\1\0\6\25"+
    "\2\0\22\25\6\0\1\25\57\0\1\u0141\134\0\1\u0109"+
    "\102\0\1\u0109\71\0\10\25\2\0\1\224\1\0\1\225"+
    "\7\0\1\25\2\0\11\25\5\0\1\227\6\25\1\254"+
    "\1\0\6\25\2\0\22\25\6\0\1\25\7\0\10\25"+
    "\2\0\1\224\1\0\1\225\7\0\1\25\2\0\2\25"+
    "\1\u0142\6\25\5\0\1\227\7\25\1\0\6\25\2\0"+
    "\22\25\6\0\1\25\7\0\10\25\2\0\1\224\1\0"+
    "\1\225\7\0\1\25\2\0\3\25\1\265\5\25\5\0"+
    "\1\227\7\25\1\0\6\25\2\0\22\25\6\0\1\25"+
    "\7\0\10\25\2\0\1\224\1\0\1\225\7\0\1\25"+
    "\2\0\11\25\5\0\1\227\3\25\1\u0143\3\25\1\0"+
    "\6\25\2\0\22\25\6\0\1\25\110\0\1\u0144\30\0"+
    "\1\u0145\125\0\1\u0146\124\0\1\u0147\127\0\1\u0148\1\0"+
    "\1\u0149\215\0\1\u014a\124\0\1\u014b\132\0\1\u014c\26\0"+
    "\1\276\121\0\2\25\1\u014d\5\25\2\0\1\224\1\0"+
    "\1\225\7\0\1\25\2\0\11\25\5\0\1\227\7\25"+
    "\1\0\6\25\2\0\22\25\6\0\1\25\62\0\1\u014e"+
    "\52\0\10\25\2\0\1\224\1\0\1\225\7\0\1\25"+
    "\2\0\3\25\1\u014f\5\25\5\0\1\227\7\25\1\0"+
    "\6\25\2\0\22\25\6\0\1\25\7\0\10\25\2\0"+
    "\1\224\1\0\1\225\7\0\1\25\2\0\3\25\1\u0150"+
    "\5\25\5\0\1\227\7\25\1\0\6\25\2\0\22\25"+
    "\6\0\1\25\14\0\1\u0151\127\0\1\276\206\0\1\u0152"+
    "\37\0\1\u0153\126\0\1\u0154\211\0\1\u0155\43\0\1\u0156"+
    "\221\0\1\u0157\123\0\1\u0158\62\0\1\u0159\161\0\1\u015a"+
    "\41\0\1\u015b\214\0\1\u015c\124\0\1\u015d\123\0\1\u015e"+
    "\37\0\1\u015f\130\0\1\u0160\221\0\1\u0161\55\0\1\u0109"+
    "\100\0\1\u0162\212\0\1\u0163\130\0\1\u0164\131\0\1\u0165"+
    "\30\0\1\u0166\125\0\1\u0167\125\0\1\276\220\0\1\u0168"+
    "\120\0\1\276\36\0\1\u0169\216\0\1\u016a\123\0\1\u016b"+
    "\36\0\1\u016c\212\0\1\u016d\44\0\1\u016e\211\0\1\u016f"+
    "\42\0\1\u0170\120\0\1\u0171\220\0\1\u0172\117\0\1\u0173"+
    "\135\0\1\u0160\116\0\1\u0174\40\0\1\u0175\224\0\1\u0176"+
    "\31\0\1\u0177\220\0\1\u0178\33\0\1\u0179\213\0\1\u017a"+
    "\127\0\1\u017b\132\0\1\u017c\110\0\1\u017d\131\0\1\276"+
    "\34\0\1\u017e\131\0\1\u017f\211\0\1\u0180\35\0\1\u0181"+
    "\221\0\1\u0182\120\0\1\u0179\134\0\1\u0183\31\0\1\u0184"+
    "\127\0\1\u0185\221\0\1\276\31\0\1\u0186\216\0\1\u0187"+
    "\35\0\1\u0188\215\0\1\u0179\116\0\1\u0189\143\0\1\u0160"+
    "\12\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[25714];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\5\1\1\0\2\1\5\0\1\11\1\1\1\11"+
    "\1\1\1\11\13\1\1\11\34\1\10\11\1\1\1\11"+
    "\2\1\1\11\3\1\2\11\1\1\1\11\1\1\1\11"+
    "\7\1\2\11\36\1\1\11\32\1\4\0\1\1\1\0"+
    "\1\11\2\0\1\1\1\11\1\1\7\0\1\1\1\11"+
    "\1\0\12\1\1\11\11\1\1\11\3\1\1\11\1\0"+
    "\1\11\3\0\3\1\2\0\2\1\2\0\1\1\1\0"+
    "\1\11\4\1\13\0\1\1\3\0\13\1\1\0\5\1"+
    "\1\0\1\1\2\0\3\1\1\0\2\1\1\0\1\11"+
    "\1\0\2\1\2\0\1\1\10\0\6\1\13\0\5\1"+
    "\2\0\1\11\3\0\1\1\1\11\4\1\13\0\1\11"+
    "\1\1\1\0\2\1\11\0\1\1\1\0\2\1\71\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[393];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    public void setTokenStart(int position){zzCurrentPos = zzStartRead = position;}
    public int getNextTokenStart(){ return zzMarkedPos;}
    public boolean isLastToken(){ return zzMarkedPos == zzEndRead; }

    public void yybegin_YYINITIAL(){yybegin(YYINITIAL);}
    public void yybegin_LEX_MULTILINE(){yybegin(LEX_MULTILINE);}
    public void yybegin_LEX_MULTILINE_TOKEN(){yybegin(LEX_MULTILINE_TOKEN);}
    public void yybegin_LEX_MULTILINE_WAITING(){yybegin(LEX_MULTILINE_WAITING);}
    public void yybegin_LEX_EOF(){yybegin(LEX_EOF);}
    public void yybegin_LEX_POD(){yybegin(LEX_POD);}

    public boolean yystate_LEX_MULTILINE_WAITING(){return yystate() == LEX_MULTILINE_WAITING;}



  public PerlLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PerlLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 200) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 57: 
          { yybegin(LEX_REQUIRE); return PerlFunctionUtil.getFunctionType(yytext().toString());
          }
        case 58: break;
        case 45: 
          { return PERL_ARRAY;
          }
        case 59: break;
        case 53: 
          { processPodOpener();break;
          }
        case 60: break;
        case 52: 
          { yypushback(1); return PERL_LABEL;
          }
        case 61: break;
        case 9: 
          { return PERL_NUMBER;
          }
        case 62: break;
        case 38: 
          { yybegin(YYINITIAL);return PERL_FUNCTION;
          }
        case 63: break;
        case 36: 
          { yybegin(YYINITIAL);
        return PERL_VERSION;
          }
        case 64: break;
        case 34: 
          { yybegin(LEX_PACKAGE_USE_PARAMS);
        return PERL_STRING;
          }
        case 65: break;
        case 55: 
          { processDataOpener(); break;
          }
        case 66: break;
        case 11: 
          { return PERL_OPERATOR;
          }
        case 67: break;
        case 1: 
          { return TokenType.WHITE_SPACE;
          }
        case 68: break;
        case 41: 
          { return PERL_HASH;
          }
        case 69: break;
        case 18: 
          { return PERL_COMMA;
          }
        case 70: break;
        case 31: 
          { yybegin(LEX_PACKAGE_USE_PARAMS);
        return PERL_VERSION;
          }
        case 71: break;
        case 50: 
          { yybegin(LEX_FUNCTION_DEFINITION); return PerlFunctionUtil.getFunctionType(yytext().toString());
          }
        case 72: break;
        case 3: 
          { if( isLastToken() )
        {
            endPodBlock();
        }
        break;
          }
        case 73: break;
        case 26: 
          { yybegin(LEX_PACKAGE_DEFINITION_BLOCK); return PERL_VERSION;
          }
        case 74: break;
        case 24: 
          { yybegin(LEX_PACKAGE_DEFINITION_VERSION); return PERL_PACKAGE;
          }
        case 75: break;
        case 56: 
          { yybegin(LEX_PACKAGE_DEFINITION); return PerlFunctionUtil.getFunctionType(yytext().toString());
          }
        case 76: break;
        case 49: 
          { return PERL_KEYWORD;
          }
        case 77: break;
        case 47: 
          { yypushback(2);
    return PerlPackageUtil.getPackageType(yytext().toString());
          }
        case 78: break;
        case 8: 
          { return processSemicolon();
          }
        case 79: break;
        case 29: 
          { if( isLastToken() )
        {
            return endMultiline();
        }
        break;
          }
        case 80: break;
        case 40: 
          { return PERL_GLOB;
          }
        case 81: break;
        case 2: 
          { if( isLastToken() )
            return endDataBlock();
        break;
          }
        case 82: break;
        case 43: 
          { return PERL_DEPACKAGE;
          }
        case 83: break;
        case 35: 
          { yypushback(1);yybegin(YYINITIAL);break;
          }
        case 84: break;
        case 15: 
          { return PERL_COMMENT;
          }
        case 85: break;
        case 32: 
          { yybegin(LEX_PACKAGE_USE_VERSION);
        return PerlPackageUtil.getPackageType(yytext().toString());
          }
        case 86: break;
        case 48: 
          { return processMultilineOpener();
          }
        case 87: break;
        case 37: 
          { yybegin(YYINITIAL);
        return PerlPackageUtil.getPackageType(yytext().toString());
          }
        case 88: break;
        case 7: 
          { return processNewLine();
          }
        case 89: break;
        case 5: 
          { yybegin(YYINITIAL);return PERL_MULTILINE_MARKER_END;
          }
        case 90: break;
        case 27: 
          { yybegin(YYINITIAL); return PERL_LBRACE;
          }
        case 91: break;
        case 33: 
          { return PERL_STRING;
          }
        case 92: break;
        case 16: 
          { return PERL_LPAREN;
          }
        case 93: break;
        case 12: 
          { return PERL_SIGIL_HASH;
          }
        case 94: break;
        case 10: 
          { return PERL_FUNCTION;
          }
        case 95: break;
        case 6: 
          { return TokenType.BAD_CHARACTER;
          }
        case 96: break;
        case 44: 
          { return PERL_SCALAR;
          }
        case 97: break;
        case 23: 
          { yybegin(YYINITIAL);  return TokenType.BAD_CHARACTER;
          }
        case 98: break;
        case 17: 
          { return PERL_RPAREN;
          }
        case 99: break;
        case 39: 
          { yybegin(LEX_DEREFERENCE);return PERL_DEREFERENCE;
          }
        case 100: break;
        case 13: 
          { return PERL_SIGIL_SCALAR;
          }
        case 101: break;
        case 14: 
          { return PERL_SIGIL_ARRAY;
          }
        case 102: break;
        case 30: 
          { yypushback(1); yybegin(YYINITIAL); break;
          }
        case 103: break;
        case 4: 
          { if( isMultilineEnd() || isLastToken())
        {
            return endMultiline();
        }
        break;
          }
        case 104: break;
        case 42: 
          { yybegin(LEX_PACKAGE_USE); return PerlFunctionUtil.getFunctionType(yytext().toString());
          }
        case 105: break;
        case 25: 
          { yybegin(YYINITIAL);
        return TokenType.BAD_CHARACTER;
          }
        case 106: break;
        case 51: 
          { yybegin(LEX_PACKAGE_USE);return PerlFunctionUtil.getFunctionType(yytext().toString());
          }
        case 107: break;
        case 46: 
          { yypushback(2);
    return PERL_PACKAGE;
          }
        case 108: break;
        case 21: 
          { return PERL_LBRACE;
          }
        case 109: break;
        case 22: 
          { return PERL_RBRACE;
          }
        case 110: break;
        case 54: 
          { return endPodBlock();
          }
        case 111: break;
        case 28: 
          { yybegin(YYINITIAL); return TokenType.BAD_CHARACTER;
          }
        case 112: break;
        case 20: 
          { return PERL_RBRACK;
          }
        case 113: break;
        case 19: 
          { return PERL_LBRACK;
          }
        case 114: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
