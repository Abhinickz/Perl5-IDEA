/* The following code was generated by JFlex 1.4.3 on 01.05.15 8:02 */

package com.perl5.lang.perl.lexer;

/*
    http://jflex.de/manual.html
    http://www2.cs.tum.edu/projects/cup

*/

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import org.jetbrains.annotations.NotNull;
import com.perl5.lang.perl.util.PerlFunctionUtil;
import com.perl5.lang.perl.util.PerlScalarUtil;
import com.perl5.lang.perl.util.PerlHashUtil;
import com.perl5.lang.perl.util.PerlGlobUtil;
import com.perl5.lang.perl.util.PerlArrayUtil;
import com.perl5.lang.perl.util.PerlPackageUtil;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 01.05.15 8:02 from the specification file
 * <tt>C:/Repository/Perl5-IDEA/src/com/perl5/lang/perl/lexer/Perl.flex</tt>
 */
public class PerlLexer extends PerlLexerProto implements FlexLexer, PerlElementTypes {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int LEX_POD = 10;
  public static final int LEX_PACKAGE_USE_PARAMS = 20;
  public static final int LEX_MULTILINE = 14;
  public static final int LEX_QUOTE_LIKE_LIST_OPENER = 32;
  public static final int LEX_DEREFERENCE = 40;
  public static final int LEX_MULTILINE_WAITING = 12;
  public static final int LEX_QUOTE_LIKE_CHARS = 28;
  public static final int LEX_QUOTE_LIKE_WORDS = 34;
  public static final int LEX_PACKAGE_DEFINITION = 2;
  public static final int LEX_FUNCTION_DEFINITION = 38;
  public static final int LEX_PACKAGE_USE_VERSION = 22;
  public static final int LEX_PACKAGE_DEFINITION_VERSION = 4;
  public static final int LEX_QUOTE_LIKE_OPENER = 26;
  public static final int LEX_PACKAGE_DEFINITION_BLOCK = 6;
  public static final int LEX_PACKAGE_USE = 18;
  public static final int LEX_QUOTE_LIKE_CLOSER = 30;
  public static final int LEX_REQUIRE = 24;
  public static final int LEX_EOF = 8;
  public static final int YYINITIAL = 0;
  public static final int LEX_MULTILINE_TOKEN = 16;
  public static final int LEX_QUOTE_LIKE_LIST_CLOSER = 36;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 15, 15, 18, 18,  6, 6
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\60\1\20\1\57"+
    "\1\115\1\71\1\25\1\42\1\61\1\116\1\117\1\17\1\15\1\120"+
    "\1\16\1\45\1\24\1\5\1\64\1\64\1\64\1\64\3\5\1\110"+
    "\1\5\1\47\1\4\1\27\1\23\1\30\1\46\1\72\1\13\1\77"+
    "\1\103\1\12\1\10\1\107\1\76\1\112\1\75\2\6\1\104\1\102"+
    "\1\11\1\106\1\114\1\6\1\74\1\100\1\14\1\105\1\113\1\73"+
    "\1\111\1\101\1\6\1\121\1\22\1\122\1\44\1\7\1\62\1\51"+
    "\1\66\1\37\1\52\1\34\1\54\1\33\1\63\1\55\1\6\1\67"+
    "\1\31\1\40\1\36\1\50\1\41\1\35\1\53\1\56\1\32\1\70"+
    "\1\65\1\123\1\26\1\124\1\6\1\125\1\43\1\126\1\21\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\3\1\1\2\1\3\1\0\1\4\1\5\12\0"+
    "\2\6\1\7\1\1\1\10\1\11\1\12\1\11\10\13"+
    "\1\14\3\13\3\12\1\15\4\12\2\13\1\6\1\13"+
    "\5\12\3\6\3\12\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\2\30\2\1\1\31"+
    "\2\32\1\33\1\32\1\34\2\35\1\2\3\3\1\13"+
    "\3\12\2\4\1\36\2\37\1\40\2\41\21\37\1\41"+
    "\2\37\2\42\1\40\3\43\2\44\1\45\2\46\21\44"+
    "\1\46\2\44\1\47\1\50\2\51\1\52\1\53\1\54"+
    "\1\55\2\56\4\0\2\11\1\57\1\60\7\0\2\61"+
    "\1\0\3\13\2\12\1\15\1\62\1\63\3\12\1\13"+
    "\1\64\6\12\1\0\1\42\2\0\3\12\3\65\2\66"+
    "\1\0\1\20\3\0\1\3\2\12\2\0\2\40\2\0"+
    "\1\45\1\67\1\11\1\70\1\0\2\12\13\0\1\71"+
    "\3\0\1\12\1\72\5\12\1\73\2\12\1\74\1\0"+
    "\5\65\1\0\1\65\2\0\1\3\1\40\1\70\1\0"+
    "\1\45\1\70\2\0\1\75\2\12\2\0\1\76\10\0"+
    "\6\12\13\0\1\77\1\41\1\46\2\12\2\0\1\76"+
    "\3\0\2\71\4\12\13\0\1\77\1\12\1\0\2\12"+
    "\11\0\1\100\1\0\1\101\1\102\71\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[409];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\127\0\256\0\u0105\0\u015c\0\u01b3\0\u020a\0\u0261"+
    "\0\u02b8\0\u030f\0\u0366\0\u03bd\0\u0414\0\u046b\0\u04c2\0\u0519"+
    "\0\u0570\0\u05c7\0\u061e\0\u0675\0\u06cc\0\u0675\0\u0723\0\u0675"+
    "\0\u077a\0\u07d1\0\u0828\0\u087f\0\u08d6\0\u092d\0\u0984\0\u09db"+
    "\0\u0675\0\u0a32\0\u0a89\0\u0ae0\0\u0b37\0\u0b8e\0\u0be5\0\u0c3c"+
    "\0\u0c93\0\u0cea\0\u0d41\0\u0d98\0\u0def\0\u0e46\0\u0e9d\0\u0ef4"+
    "\0\u0f4b\0\u0fa2\0\u0ff9\0\u1050\0\u10a7\0\u10fe\0\u1155\0\u11ac"+
    "\0\u1203\0\u125a\0\u12b1\0\u1308\0\u135f\0\u13b6\0\u140d\0\u1464"+
    "\0\u14bb\0\u0675\0\u0675\0\u0675\0\u0675\0\u0675\0\u0675\0\u0675"+
    "\0\u0675\0\u1512\0\u0675\0\u1569\0\u15c0\0\u0675\0\u1512\0\u1617"+
    "\0\u166e\0\u0675\0\u0675\0\u1512\0\u0675\0\u16c5\0\u0675\0\u171c"+
    "\0\u1773\0\u17ca\0\u1821\0\u1878\0\u18cf\0\u1926\0\u0675\0\u0675"+
    "\0\u06cc\0\u197d\0\u19d4\0\u1a2b\0\u087f\0\u08d6\0\u092d\0\u0984"+
    "\0\u09db\0\u1773\0\u0a89\0\u0ae0\0\u0b8e\0\u0be5\0\u0ef4\0\u0f4b"+
    "\0\u0fa2\0\u0ff9\0\u1203\0\u125a\0\u12b1\0\u1a82\0\u140d\0\u1464"+
    "\0\u1ad9\0\u1b30\0\u1b87\0\u1bde\0\u1c35\0\u1c8c\0\u0675\0\u06cc"+
    "\0\u1ce3\0\u1d3a\0\u1d91\0\u087f\0\u08d6\0\u092d\0\u0984\0\u09db"+
    "\0\u1773\0\u0a89\0\u0ae0\0\u0b8e\0\u0be5\0\u0ef4\0\u0f4b\0\u0fa2"+
    "\0\u0ff9\0\u1203\0\u125a\0\u12b1\0\u1de8\0\u140d\0\u1464\0\u0675"+
    "\0\u1e3f\0\u0675\0\u1e96\0\u0675\0\u0675\0\u1eed\0\u1f44\0\u1f9b"+
    "\0\u1ff2\0\u2049\0\u20a0\0\u20f7\0\u214e\0\u21a5\0\u21fc\0\u0675"+
    "\0\u2253\0\u22aa\0\u2301\0\u2358\0\u23af\0\u2406\0\u245d\0\u24b4"+
    "\0\u250b\0\u0675\0\u2562\0\u25b9\0\u2610\0\u07d1\0\u2667\0\u26be"+
    "\0\u07d1\0\u07d1\0\u2715\0\u276c\0\u27c3\0\u281a\0\u2871\0\u0675"+
    "\0\u28c8\0\u291f\0\u2976\0\u29cd\0\u2a24\0\u2a7b\0\u1203\0\u0675"+
    "\0\u125a\0\u12b1\0\u2ad2\0\u2b29\0\u2b80\0\u0675\0\u2bd7\0\u2c2e"+
    "\0\u2c85\0\u0675\0\u2cdc\0\u0675\0\u1512\0\u2d33\0\u166e\0\u2d8a"+
    "\0\u2715\0\u2de1\0\u2e38\0\u2e8f\0\u2ee6\0\u2f3d\0\u2f94\0\u2feb"+
    "\0\u3042\0\u0675\0\u20a0\0\u3099\0\u30f0\0\u3147\0\u319e\0\u31f5"+
    "\0\u324c\0\u32a3\0\u32fa\0\u3351\0\u33a8\0\u33ff\0\u3456\0\u34ad"+
    "\0\u3504\0\u2610\0\u355b\0\u35b2\0\u3609\0\u3660\0\u36b7\0\u07d1"+
    "\0\u370e\0\u3765\0\u37bc\0\u3813\0\u386a\0\u07d1\0\u38c1\0\u3918"+
    "\0\u07d1\0\u396f\0\u39c6\0\u3a1d\0\u3a74\0\u3acb\0\u3b22\0\u3b79"+
    "\0\u3bd0\0\u3c27\0\u3c7e\0\u3cd5\0\u3d2c\0\u3d83\0\u3dda\0\u3e31"+
    "\0\u3e88\0\u3edf\0\u3f36\0\u0675\0\u3f8d\0\u3fe4\0\u403b\0\u4092"+
    "\0\u40e9\0\u4140\0\u4197\0\u41ee\0\u4245\0\u429c\0\u42f3\0\u434a"+
    "\0\u43a1\0\u43f8\0\u444f\0\u44a6\0\u44fd\0\u4554\0\u45ab\0\u4602"+
    "\0\u4659\0\u46b0\0\u4707\0\u475e\0\u47b5\0\u480c\0\u4863\0\u48ba"+
    "\0\u4911\0\u4968\0\u49bf\0\u4a16\0\u4a6d\0\u4ac4\0\u4b1b\0\u2253"+
    "\0\u4b72\0\u0675\0\u4bc9\0\u4c20\0\u250b\0\u0675\0\u43a1\0\u4c77"+
    "\0\u4cce\0\u4d25\0\u4d7c\0\u2bd7\0\u4dd3\0\u4e2a\0\u4e81\0\u4ed8"+
    "\0\u4f2f\0\u4f86\0\u4fdd\0\u5034\0\u508b\0\u2c85\0\u0675\0\u50e2"+
    "\0\u5139\0\u5190\0\u51e7\0\u523e\0\u5295\0\u52ec\0\u5343\0\u539a"+
    "\0\u53f1\0\u5448\0\u549f\0\u54f6\0\u07d1\0\u554d\0\u07d1\0\u07d1"+
    "\0\u55a4\0\u55fb\0\u5652\0\u56a9\0\u5700\0\u5757\0\u57ae\0\u5805"+
    "\0\u585c\0\u58b3\0\u590a\0\u5961\0\u59b8\0\u5a0f\0\u5a66\0\u5abd"+
    "\0\u5b14\0\u5b6b\0\u5bc2\0\u5c19\0\u5c70\0\u5cc7\0\u5d1e\0\u5d75"+
    "\0\u5dcc\0\u5e23\0\u5e7a\0\u5ed1\0\u5f28\0\u5f7f\0\u5fd6\0\u602d"+
    "\0\u6084\0\u60db\0\u6132\0\u6189\0\u61e0\0\u6237\0\u628e\0\u62e5"+
    "\0\u633c\0\u6393\0\u63ea\0\u6441\0\u6498\0\u64ef\0\u6546\0\u659d"+
    "\0\u65f4\0\u664b\0\u66a2\0\u66f9\0\u6750\0\u67a7\0\u67fe\0\u6855"+
    "\0\u68ac";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[409];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\5\32\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\32\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\41\1\62\1\41\1\63\1\64\1\65\1\66\1\67"+
    "\2\32\1\70\1\71\1\27\1\72\1\73\1\32\1\31"+
    "\1\74\1\32\1\75\1\76\1\77\1\100\15\32\1\31"+
    "\4\32\1\101\1\102\1\103\1\104\1\105\1\106\2\32"+
    "\1\107\1\110\1\111\1\112\1\113\1\114\1\111\10\115"+
    "\11\111\1\115\2\111\11\115\6\111\7\115\1\111\1\114"+
    "\2\111\6\115\2\111\22\115\6\111\2\115\2\111\1\116"+
    "\1\117\1\113\1\114\1\30\1\120\52\116\1\114\3\116"+
    "\1\120\1\121\22\116\1\120\14\116\1\122\1\116\1\123"+
    "\1\124\1\113\1\114\1\30\53\123\1\114\44\123\1\122"+
    "\1\123\2\5\1\125\124\5\2\126\1\127\20\126\1\130"+
    "\103\126\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\31\5\32\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\131\1\43\1\44\1\45\1\46\1\47\1\50\1\32"+
    "\1\51\1\52\1\53\1\132\1\55\1\56\1\32\1\60"+
    "\1\61\1\41\1\62\1\41\1\63\1\64\1\65\1\66"+
    "\1\133\2\32\1\134\1\71\1\27\1\72\1\73\1\32"+
    "\1\31\1\74\1\32\1\75\1\32\1\77\1\100\15\32"+
    "\1\31\4\32\1\101\1\102\1\103\1\104\1\105\1\106"+
    "\2\32\1\107\1\110\1\135\1\136\1\137\124\135\2\11"+
    "\1\0\124\11\1\140\1\141\1\26\1\27\1\30\1\142"+
    "\1\143\1\144\5\143\1\145\1\146\1\147\1\150\1\151"+
    "\1\140\1\152\1\153\1\154\1\143\1\155\1\156\11\143"+
    "\1\157\1\160\1\140\1\161\1\140\1\162\7\143\1\163"+
    "\1\27\1\164\1\165\1\143\1\142\1\166\3\143\1\167"+
    "\1\170\15\143\1\142\4\143\1\101\2\140\1\104\2\140"+
    "\2\143\2\140\1\24\1\25\1\26\1\27\1\30\1\171"+
    "\1\172\1\171\5\172\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\131\1\43\1\44\1\172\1\46\1\47\11\172"+
    "\1\60\1\61\1\41\1\62\1\41\1\63\7\172\1\71"+
    "\1\27\1\72\1\73\1\172\1\171\4\172\1\77\1\100"+
    "\15\172\1\171\4\172\1\101\1\102\1\103\1\104\1\105"+
    "\1\106\2\172\1\107\1\110\1\24\1\25\1\26\1\27"+
    "\1\30\1\173\1\174\1\175\5\174\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\131\1\43\1\44\1\174\1\46"+
    "\1\47\11\174\1\60\1\61\1\41\1\62\1\41\1\63"+
    "\7\174\1\71\1\27\1\72\1\73\1\174\1\173\1\176"+
    "\3\174\1\77\1\100\15\174\1\173\4\174\1\101\1\102"+
    "\1\103\1\104\1\105\1\106\2\174\1\107\1\110\1\177"+
    "\1\200\1\26\1\27\1\30\1\201\1\202\1\203\5\202"+
    "\1\204\1\205\1\206\1\207\1\210\1\177\1\211\1\212"+
    "\1\213\1\202\1\214\1\215\11\202\1\216\1\217\1\177"+
    "\1\220\1\177\1\221\7\202\1\222\1\27\1\223\1\224"+
    "\1\202\1\201\1\225\3\202\1\226\1\227\15\202\1\201"+
    "\4\202\1\101\2\177\1\104\2\177\2\202\2\177\1\230"+
    "\3\231\54\230\1\231\46\230\1\232\1\233\125\232\2\234"+
    "\1\0\124\234\1\235\3\236\54\235\1\236\46\235\1\237"+
    "\3\236\54\237\1\236\46\237\1\24\1\25\1\26\1\27"+
    "\1\30\1\240\1\241\1\240\5\241\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\131\1\43\1\44\1\241\1\46"+
    "\1\47\11\241\1\60\1\61\1\41\1\62\1\41\1\63"+
    "\7\241\1\71\1\27\1\72\1\73\1\241\1\240\4\241"+
    "\1\77\1\100\15\241\1\240\4\241\1\101\1\102\1\103"+
    "\1\104\1\105\1\106\2\241\1\107\1\110\131\0\1\26"+
    "\127\0\1\27\54\0\1\27\53\0\1\31\1\32\1\31"+
    "\5\32\1\0\1\242\7\0\1\32\2\0\11\32\3\0"+
    "\1\243\1\0\1\244\7\32\2\0\1\245\1\0\1\32"+
    "\1\31\4\32\2\0\15\32\1\31\4\32\6\0\2\32"+
    "\7\0\10\32\1\0\1\242\7\0\1\32\2\0\11\32"+
    "\5\0\1\244\7\32\2\0\1\245\1\0\6\32\2\0"+
    "\22\32\6\0\2\32\7\0\1\31\1\32\1\246\5\32"+
    "\1\0\1\242\7\0\1\32\2\0\11\32\3\0\1\243"+
    "\1\0\1\244\7\32\2\0\1\245\1\0\1\32\1\31"+
    "\4\32\2\0\15\32\1\31\4\32\6\0\2\32\17\0"+
    "\1\41\5\0\1\41\110\0\1\247\1\0\1\247\6\0"+
    "\1\41\4\0\1\41\4\0\1\250\33\0\1\247\23\0"+
    "\1\247\23\0\10\251\2\0\1\41\3\0\1\41\2\0"+
    "\1\251\2\0\11\251\6\0\7\251\4\0\6\251\2\0"+
    "\22\251\6\0\2\251\23\0\1\41\1\0\1\41\124\0"+
    "\1\41\126\0\1\41\1\0\1\41\4\0\1\104\3\0"+
    "\1\252\4\0\1\253\6\0\1\254\3\0\1\255\1\256"+
    "\5\0\1\257\2\0\1\260\64\0\1\41\107\0\10\261"+
    "\2\262\1\0\1\262\5\0\1\261\2\0\11\261\2\0"+
    "\1\263\3\0\7\261\4\0\6\261\2\0\22\261\6\0"+
    "\2\261\7\0\10\32\1\0\1\242\7\0\1\32\2\0"+
    "\11\32\5\0\1\244\1\64\6\32\2\0\1\245\1\0"+
    "\6\32\2\0\22\32\6\0\2\32\25\0\1\264\3\0"+
    "\1\265\122\0\1\41\4\0\1\41\103\0\10\32\1\0"+
    "\1\242\7\0\1\32\2\0\1\32\1\266\1\32\1\266"+
    "\5\32\5\0\1\244\7\32\2\0\1\245\1\0\6\32"+
    "\2\0\22\32\6\0\2\32\7\0\10\32\1\0\1\242"+
    "\7\0\1\32\2\0\1\32\1\266\1\32\1\266\5\32"+
    "\5\0\1\244\3\32\1\267\3\32\2\0\1\245\1\0"+
    "\6\32\2\0\22\32\6\0\2\32\7\0\10\32\1\0"+
    "\1\242\7\0\1\270\2\0\4\32\1\266\4\32\5\0"+
    "\1\244\7\32\2\0\1\245\1\0\6\32\2\0\22\32"+
    "\6\0\2\32\7\0\10\32\1\0\1\242\7\0\1\271"+
    "\2\0\4\32\1\271\4\32\5\0\1\244\7\32\2\0"+
    "\1\245\1\0\6\32\2\0\22\32\6\0\1\272\1\32"+
    "\7\0\10\32\1\0\1\242\7\0\1\32\2\0\3\32"+
    "\1\266\5\32\5\0\1\244\1\273\6\32\2\0\1\245"+
    "\1\0\6\32\2\0\22\32\6\0\2\32\7\0\10\32"+
    "\1\0\1\242\7\0\1\32\2\0\7\32\1\274\1\32"+
    "\5\0\1\244\7\32\2\0\1\245\1\0\6\32\2\0"+
    "\22\32\6\0\2\32\7\0\10\32\1\0\1\242\7\0"+
    "\1\32\2\0\11\32\5\0\1\244\1\32\1\275\5\32"+
    "\2\0\1\245\1\0\6\32\2\0\22\32\6\0\2\32"+
    "\7\0\10\32\1\0\1\242\7\0\1\32\2\0\11\32"+
    "\5\0\1\244\1\32\1\276\5\32\2\0\1\245\1\0"+
    "\6\32\2\0\22\32\6\0\2\32\44\0\1\41\127\0"+
    "\1\41\130\0\1\277\130\0\1\300\64\0\10\32\1\0"+
    "\1\242\7\0\1\32\2\0\11\32\5\0\1\244\3\32"+
    "\1\266\3\32\2\0\1\245\1\0\6\32\2\0\22\32"+
    "\6\0\2\32\7\0\10\32\1\0\1\242\7\0\1\32"+
    "\2\0\5\32\1\301\3\32\5\0\1\244\7\32\2\0"+
    "\1\245\1\0\6\32\2\0\22\32\6\0\2\32\7\0"+
    "\10\32\1\0\1\242\7\0\1\32\2\0\3\32\1\302"+
    "\5\32\5\0\1\244\7\32\2\0\1\245\1\0\6\32"+
    "\2\0\22\32\6\0\2\32\7\0\10\32\1\0\1\242"+
    "\7\0\1\32\2\0\3\32\1\303\5\32\5\0\1\244"+
    "\7\32\2\0\1\245\1\0\6\32\2\0\22\32\6\0"+
    "\2\32\7\0\10\32\1\0\1\242\7\0\1\32\2\0"+
    "\6\32\1\304\2\32\5\0\1\244\1\305\6\32\2\0"+
    "\1\245\1\0\5\32\1\306\2\0\22\32\6\0\2\32"+
    "\2\0\1\307\2\0\54\307\1\310\47\307\1\311\2\0"+
    "\56\311\1\310\45\311\1\312\2\0\57\312\1\310\44\312"+
    "\5\0\10\32\1\0\1\242\7\0\1\32\2\0\11\32"+
    "\5\0\1\244\1\32\1\313\5\32\2\0\1\245\1\0"+
    "\6\32\2\0\22\32\6\0\2\32\7\0\10\32\1\0"+
    "\1\242\7\0\1\32\2\0\3\32\1\314\5\32\5\0"+
    "\1\244\7\32\2\0\1\245\1\0\6\32\2\0\22\32"+
    "\6\0\2\32\7\0\10\32\1\0\1\242\7\0\1\32"+
    "\2\0\11\32\5\0\1\244\6\32\1\315\2\0\1\245"+
    "\1\0\6\32\2\0\22\32\6\0\2\32\6\0\1\316"+
    "\10\317\5\316\1\0\3\316\1\317\2\316\11\317\2\316"+
    "\1\320\3\316\7\317\1\316\1\0\2\316\6\317\2\316"+
    "\22\317\6\316\2\317\7\0\10\321\2\322\1\0\1\322"+
    "\5\0\1\321\2\0\11\321\2\0\1\323\3\0\7\321"+
    "\4\0\6\321\2\0\22\321\6\0\2\321\2\0\2\101"+
    "\1\324\124\101\2\0\1\113\125\0\1\325\1\113\1\114"+
    "\54\0\1\114\53\0\10\115\11\0\1\115\2\0\11\115"+
    "\5\0\1\326\7\115\4\0\6\115\2\0\22\115\6\0"+
    "\2\115\7\0\1\120\1\0\1\120\35\0\1\327\16\0"+
    "\1\120\23\0\1\120\23\0\1\120\56\0\1\120\23\0"+
    "\1\120\16\0\2\126\1\127\126\126\1\127\34\126\1\330"+
    "\67\126\21\0\1\41\1\0\1\41\4\0\1\104\103\0"+
    "\10\32\1\0\1\242\7\0\1\32\2\0\3\32\1\266"+
    "\5\32\5\0\1\244\1\331\6\32\2\0\1\245\1\0"+
    "\6\32\2\0\22\32\6\0\2\32\7\0\10\32\1\0"+
    "\1\242\7\0\1\32\2\0\3\32\1\332\5\32\5\0"+
    "\1\244\7\32\2\0\1\245\1\0\6\32\2\0\22\32"+
    "\6\0\2\32\7\0\10\32\1\0\1\242\7\0\1\32"+
    "\2\0\6\32\1\304\2\32\5\0\1\244\1\305\6\32"+
    "\2\0\1\245\1\0\6\32\2\0\22\32\6\0\2\32"+
    "\2\0\2\135\1\0\126\135\1\137\124\135\5\0\1\142"+
    "\1\143\1\142\5\143\1\0\1\242\7\0\1\143\2\0"+
    "\11\143\3\0\1\333\1\0\1\334\7\143\2\0\1\245"+
    "\1\0\1\143\1\142\4\143\2\0\15\143\1\142\4\143"+
    "\6\0\2\143\7\0\10\143\1\0\1\242\7\0\1\143"+
    "\2\0\11\143\5\0\1\334\7\143\2\0\1\245\1\0"+
    "\6\143\2\0\22\143\6\0\2\143\7\0\1\144\1\143"+
    "\1\144\5\143\1\0\1\242\7\0\1\143\2\0\11\143"+
    "\3\0\1\243\1\0\1\334\7\143\2\0\1\245\1\0"+
    "\1\143\1\144\4\143\2\0\15\143\1\144\4\143\6\0"+
    "\2\143\7\0\1\335\7\143\1\0\1\242\7\0\1\143"+
    "\2\0\11\143\5\0\1\334\7\143\2\0\1\245\1\0"+
    "\1\143\1\335\4\143\2\0\15\143\1\335\4\143\6\0"+
    "\2\143\7\0\1\171\1\172\1\171\5\172\1\0\1\242"+
    "\7\0\1\172\2\0\11\172\3\0\1\243\1\0\1\244"+
    "\7\172\2\0\1\245\1\0\1\172\1\171\4\172\2\0"+
    "\15\172\1\171\4\172\6\0\2\172\7\0\10\172\1\0"+
    "\1\242\7\0\1\172\2\0\11\172\5\0\1\244\7\172"+
    "\2\0\1\245\1\0\6\172\2\0\22\172\6\0\2\172"+
    "\7\0\1\173\1\174\1\173\5\174\1\0\1\242\7\0"+
    "\1\174\2\0\11\174\3\0\1\333\1\0\1\244\7\174"+
    "\2\0\1\245\1\0\1\174\1\173\4\174\2\0\15\174"+
    "\1\173\4\174\6\0\2\174\7\0\10\174\1\0\1\242"+
    "\7\0\1\174\2\0\11\174\5\0\1\244\7\174\2\0"+
    "\1\245\1\0\6\174\2\0\22\174\6\0\2\174\7\0"+
    "\1\175\1\174\1\175\5\174\1\0\1\242\7\0\1\174"+
    "\2\0\11\174\3\0\1\243\1\0\1\244\7\174\2\0"+
    "\1\245\1\0\1\174\1\175\4\174\2\0\15\174\1\175"+
    "\4\174\6\0\2\174\7\0\1\336\7\174\1\0\1\242"+
    "\7\0\1\174\2\0\11\174\5\0\1\244\7\174\2\0"+
    "\1\245\1\0\1\174\1\336\4\174\2\0\15\174\1\336"+
    "\4\174\6\0\2\174\7\0\1\201\1\202\1\201\5\202"+
    "\1\0\1\242\7\0\1\202\2\0\11\202\3\0\1\337"+
    "\1\0\1\340\7\202\2\0\1\245\1\0\1\202\1\201"+
    "\4\202\2\0\15\202\1\201\4\202\6\0\2\202\7\0"+
    "\10\202\1\0\1\242\7\0\1\202\2\0\11\202\5\0"+
    "\1\340\7\202\2\0\1\245\1\0\6\202\2\0\22\202"+
    "\6\0\2\202\7\0\1\203\1\202\1\203\5\202\1\0"+
    "\1\242\7\0\1\202\2\0\11\202\3\0\1\243\1\0"+
    "\1\340\7\202\2\0\1\245\1\0\1\202\1\203\4\202"+
    "\2\0\15\202\1\203\4\202\6\0\2\202\7\0\1\341"+
    "\7\202\1\0\1\242\7\0\1\202\2\0\11\202\5\0"+
    "\1\340\7\202\2\0\1\245\1\0\1\202\1\341\4\202"+
    "\2\0\15\202\1\341\4\202\6\0\2\202\3\0\3\231"+
    "\54\0\1\231\50\0\1\232\125\0\3\236\54\0\1\236"+
    "\46\0\1\237\3\0\54\237\1\0\46\237\5\0\1\240"+
    "\1\241\1\240\5\241\1\0\1\242\7\0\1\241\2\0"+
    "\11\241\3\0\1\243\1\0\1\244\7\241\2\0\1\245"+
    "\1\0\1\241\1\240\4\241\2\0\15\241\1\240\4\241"+
    "\6\0\2\241\7\0\10\241\1\0\1\242\7\0\1\241"+
    "\2\0\11\241\5\0\1\244\7\241\2\0\1\245\1\0"+
    "\6\241\2\0\22\241\6\0\2\241\32\0\1\342\103\0"+
    "\1\343\1\0\1\343\54\0\1\343\23\0\1\343\65\0"+
    "\1\344\126\0\1\345\64\0\1\31\1\32\1\31\1\346"+
    "\1\32\1\347\2\32\1\0\1\242\7\0\1\32\2\0"+
    "\11\32\3\0\1\243\1\0\1\244\7\32\2\0\1\245"+
    "\1\0\1\32\1\31\4\32\2\0\15\32\1\31\4\32"+
    "\6\0\2\32\7\0\1\247\1\0\1\247\35\0\1\243"+
    "\16\0\1\247\23\0\1\247\23\0\10\251\11\0\1\251"+
    "\2\0\11\251\5\0\1\350\7\251\4\0\6\251\2\0"+
    "\22\251\6\0\2\251\40\0\1\351\140\0\1\352\143\0"+
    "\1\353\111\0\1\354\110\0\1\355\130\0\1\356\126\0"+
    "\1\357\14\0\1\360\62\0\10\261\11\0\1\261\2\0"+
    "\11\261\5\0\1\361\7\261\4\0\6\261\2\0\22\261"+
    "\6\0\2\261\114\0\1\262\44\0\1\41\101\0\1\362"+
    "\1\0\10\363\11\0\1\363\2\0\11\363\6\0\7\363"+
    "\1\364\1\362\1\365\1\366\6\363\2\0\22\363\6\0"+
    "\2\363\7\0\10\32\1\0\1\242\7\0\1\32\2\0"+
    "\3\32\1\275\5\32\5\0\1\244\7\32\2\0\1\245"+
    "\1\0\6\32\2\0\22\32\6\0\2\32\7\0\10\32"+
    "\1\0\1\242\7\0\1\32\2\0\11\32\5\0\1\244"+
    "\5\32\1\367\1\32\2\0\1\245\1\0\6\32\2\0"+
    "\22\32\6\0\2\32\7\0\10\32\1\0\1\242\7\0"+
    "\1\32\2\0\1\32\1\266\7\32\5\0\1\244\7\32"+
    "\2\0\1\245\1\0\6\32\2\0\22\32\6\0\2\32"+
    "\7\0\10\32\1\0\1\242\7\0\1\32\2\0\10\32"+
    "\1\266\5\0\1\244\7\32\2\0\1\245\1\0\6\32"+
    "\2\0\22\32\6\0\2\32\7\0\10\32\1\0\1\242"+
    "\7\0\1\32\2\0\10\32\1\370\5\0\1\244\7\32"+
    "\2\0\1\245\1\0\6\32\2\0\22\32\6\0\2\32"+
    "\7\0\10\32\1\0\1\242\7\0\1\32\2\0\6\32"+
    "\1\371\2\32\5\0\1\244\7\32\2\0\1\245\1\0"+
    "\6\32\2\0\22\32\6\0\2\32\47\0\1\41\66\0"+
    "\10\32\1\0\1\242\7\0\1\32\2\0\11\32\5\0"+
    "\1\244\2\32\1\266\4\32\2\0\1\245\1\0\6\32"+
    "\2\0\22\32\6\0\2\32\7\0\10\32\1\0\1\242"+
    "\7\0\1\32\2\0\11\32\5\0\1\244\4\32\1\372"+
    "\2\32\2\0\1\245\1\0\6\32\2\0\22\32\6\0"+
    "\2\32\7\0\10\32\1\0\1\242\7\0\1\32\2\0"+
    "\4\32\1\373\4\32\5\0\1\244\4\32\1\266\2\32"+
    "\2\0\1\245\1\0\6\32\2\0\22\32\6\0\2\32"+
    "\7\0\10\32\1\0\1\242\7\0\1\32\2\0\11\32"+
    "\5\0\1\244\1\32\1\374\5\32\2\0\1\245\1\0"+
    "\6\32\2\0\22\32\6\0\2\32\7\0\10\32\1\0"+
    "\1\242\7\0\1\32\2\0\11\32\5\0\1\244\3\32"+
    "\1\375\3\32\2\0\1\245\1\0\6\32\2\0\22\32"+
    "\6\0\2\32\7\0\10\32\1\0\1\242\7\0\1\32"+
    "\2\0\11\32\5\0\1\244\7\32\2\0\1\245\1\0"+
    "\3\32\1\376\2\32\2\0\22\32\6\0\2\32\7\0"+
    "\10\32\1\0\1\242\7\0\1\32\2\0\1\377\10\32"+
    "\5\0\1\244\7\32\2\0\1\245\1\0\6\32\2\0"+
    "\22\32\6\0\2\32\7\0\10\32\1\0\1\242\7\0"+
    "\1\32\2\0\11\32\5\0\1\244\7\32\2\0\1\245"+
    "\1\0\6\32\2\0\22\32\6\0\1\32\1\u0100\7\0"+
    "\10\32\1\0\1\242\7\0\1\32\2\0\3\32\1\u0101"+
    "\5\32\5\0\1\244\7\32\2\0\1\245\1\0\6\32"+
    "\2\0\22\32\6\0\2\32\7\0\10\317\11\0\1\317"+
    "\2\0\11\317\5\0\1\u0102\7\317\4\0\6\317\2\0"+
    "\22\317\6\0\2\317\12\0\1\u0103\3\316\1\u0104\56\0"+
    "\1\u0105\1\u0106\1\316\2\0\1\316\1\0\1\316\1\u0107"+
    "\1\316\1\u0108\1\u0109\1\316\1\0\4\316\17\0\10\321"+
    "\11\0\1\321\2\0\11\321\5\0\1\u010a\7\321\4\0"+
    "\6\321\2\0\22\321\6\0\2\321\114\0\1\322\63\0"+
    "\1\u010b\57\0\2\126\1\127\65\126\1\u010c\36\126\5\0"+
    "\10\32\1\0\1\242\7\0\1\32\2\0\11\32\5\0"+
    "\1\244\4\32\1\266\2\32\2\0\1\245\1\0\6\32"+
    "\2\0\22\32\6\0\2\32\7\0\1\u010d\1\0\1\343"+
    "\54\0\1\u010d\23\0\1\u010d\65\0\1\u010e\64\0\1\335"+
    "\1\143\1\335\5\143\1\0\1\242\7\0\1\143\2\0"+
    "\11\143\3\0\1\u010f\1\0\1\334\7\143\2\0\1\245"+
    "\1\0\1\143\1\335\4\143\2\0\15\143\1\335\4\143"+
    "\6\0\2\143\7\0\1\336\1\174\1\336\5\174\1\0"+
    "\1\242\7\0\1\174\2\0\11\174\3\0\1\u010f\1\0"+
    "\1\244\7\174\2\0\1\245\1\0\1\174\1\336\4\174"+
    "\2\0\15\174\1\336\4\174\6\0\2\174\7\0\1\u0110"+
    "\1\0\1\343\54\0\1\u0110\23\0\1\u0110\65\0\1\u0111"+
    "\64\0\1\341\1\202\1\341\5\202\1\0\1\242\7\0"+
    "\1\202\2\0\11\202\3\0\1\u0112\1\0\1\340\7\202"+
    "\2\0\1\245\1\0\1\202\1\341\4\202\2\0\15\202"+
    "\1\341\4\202\6\0\2\202\7\0\10\u0113\11\0\1\u0113"+
    "\2\0\11\u0113\6\0\7\u0113\4\0\6\u0113\2\0\22\u0113"+
    "\6\0\2\u0113\63\0\1\u0114\52\0\4\32\1\u0115\3\32"+
    "\1\0\1\242\7\0\1\32\2\0\11\32\5\0\1\244"+
    "\7\32\2\0\1\245\1\0\6\32\2\0\22\32\6\0"+
    "\2\32\7\0\6\32\1\u0116\1\32\1\0\1\242\7\0"+
    "\1\32\2\0\11\32\5\0\1\244\7\32\2\0\1\245"+
    "\1\0\6\32\2\0\22\32\6\0\2\32\51\0\1\u0117"+
    "\116\0\1\u0118\12\0\1\u0119\126\0\1\u0119\110\0\1\354"+
    "\145\0\1\u0119\107\0\1\u011a\143\0\1\u011b\110\0\1\u011c"+
    "\132\0\1\u011d\136\0\1\u011e\64\0\10\363\11\0\1\363"+
    "\2\0\11\363\6\0\7\363\4\0\6\363\2\0\22\363"+
    "\6\0\2\363\2\0\1\u011f\2\0\53\u011f\4\0\45\u011f"+
    "\1\u0120\2\0\53\u0120\4\0\45\u0120\1\u0121\2\0\53\u0121"+
    "\4\0\45\u0121\5\0\10\32\1\0\1\242\7\0\1\32"+
    "\2\0\11\32\5\0\1\244\6\32\1\u0122\2\0\1\245"+
    "\1\0\6\32\2\0\22\32\6\0\2\32\7\0\10\32"+
    "\1\0\1\242\7\0\1\32\2\0\11\32\5\0\1\244"+
    "\7\32\2\0\1\245\1\0\4\32\1\u0123\1\32\2\0"+
    "\22\32\6\0\2\32\7\0\10\32\1\0\1\242\7\0"+
    "\1\32\2\0\11\32\5\0\1\244\5\32\1\u0124\1\32"+
    "\2\0\1\245\1\0\6\32\2\0\22\32\6\0\2\32"+
    "\7\0\10\32\1\0\1\242\7\0\1\32\2\0\11\32"+
    "\5\0\1\244\7\32\2\0\1\245\1\0\5\32\1\u0125"+
    "\2\0\22\32\6\0\2\32\7\0\10\32\1\0\1\242"+
    "\7\0\1\32\2\0\1\u0126\10\32\5\0\1\244\7\32"+
    "\2\0\1\245\1\0\6\32\2\0\22\32\6\0\2\32"+
    "\7\0\10\32\1\0\1\242\7\0\1\32\2\0\1\32"+
    "\1\370\7\32\5\0\1\244\7\32\2\0\1\245\1\0"+
    "\6\32\2\0\22\32\6\0\2\32\7\0\10\32\1\0"+
    "\1\242\7\0\1\32\2\0\11\32\5\0\1\244\7\32"+
    "\2\0\1\245\1\0\5\32\1\u0127\2\0\22\32\6\0"+
    "\2\32\7\0\10\32\1\0\1\242\7\0\1\32\2\0"+
    "\11\32\5\0\1\244\6\32\1\370\2\0\1\245\1\0"+
    "\6\32\2\0\22\32\6\0\2\32\51\0\1\u0128\70\0"+
    "\1\u0129\130\0\1\u012a\126\0\1\u012b\61\0\1\u012c\41\0"+
    "\1\u012d\230\0\1\u012e\25\0\1\u012f\2\0\1\u0130\226\0"+
    "\1\u0131\61\0\1\u0132\64\0\10\115\11\0\1\115\2\0"+
    "\11\115\6\0\7\115\4\0\6\115\2\0\22\115\6\0"+
    "\2\115\2\0\2\126\1\127\27\126\1\u0133\74\126\5\0"+
    "\1\u010d\1\0\1\u010d\35\0\1\u010f\16\0\1\u010d\23\0"+
    "\1\u010d\23\0\10\u0134\11\0\1\u0134\2\0\11\u0134\6\0"+
    "\7\u0134\4\0\6\u0134\2\0\22\u0134\6\0\2\u0134\7\0"+
    "\1\u010d\56\0\1\u010d\23\0\1\u010d\23\0\1\u0110\1\0"+
    "\1\u0110\35\0\1\u0112\16\0\1\u0110\23\0\1\u0110\23\0"+
    "\10\u0135\11\0\1\u0135\2\0\11\u0135\6\0\7\u0135\4\0"+
    "\6\u0135\2\0\22\u0135\6\0\2\u0135\7\0\1\u0110\56\0"+
    "\1\u0110\23\0\1\u0110\23\0\10\u0113\1\0\1\242\7\0"+
    "\1\u0113\2\0\11\u0113\5\0\1\244\7\u0113\4\0\6\u0113"+
    "\2\0\22\u0113\6\0\2\u0113\7\0\5\32\1\u0136\2\32"+
    "\1\0\1\242\7\0\1\32\2\0\11\32\5\0\1\244"+
    "\7\32\2\0\1\245\1\0\6\32\2\0\22\32\6\0"+
    "\2\32\7\0\7\32\1\u0137\1\0\1\242\7\0\1\32"+
    "\2\0\11\32\5\0\1\244\7\32\2\0\1\245\1\0"+
    "\6\32\2\0\22\32\6\0\2\32\7\0\10\u0138\11\0"+
    "\1\u0138\2\0\11\u0138\6\0\7\u0138\4\0\6\u0138\2\0"+
    "\22\u0138\6\0\2\u0138\52\0\1\u0139\56\0\2\u0119\1\u013a"+
    "\124\u0119\40\0\1\u0119\140\0\1\u013b\131\0\1\u013c\140\0"+
    "\1\u0119\44\0\10\u013d\11\0\1\u013d\2\0\11\u013d\6\0"+
    "\7\u013d\4\0\6\u013d\2\0\22\u013d\6\0\2\u013d\2\0"+
    "\1\u011f\2\0\53\u011f\1\0\1\u013e\2\0\45\u011f\1\u0120"+
    "\2\0\53\u0120\3\0\1\u013e\45\u0120\1\u0121\2\0\53\u0121"+
    "\4\0\1\u013f\44\u0121\5\0\10\32\1\0\1\242\7\0"+
    "\1\32\2\0\1\32\1\u0140\7\32\5\0\1\244\7\32"+
    "\2\0\1\245\1\0\6\32\2\0\22\32\6\0\2\32"+
    "\7\0\10\32\1\0\1\242\7\0\1\32\2\0\11\32"+
    "\5\0\1\244\1\32\1\u0141\5\32\2\0\1\245\1\0"+
    "\6\32\2\0\22\32\6\0\2\32\7\0\10\32\1\0"+
    "\1\242\7\0\1\32\2\0\5\32\1\u0142\3\32\5\0"+
    "\1\244\7\32\2\0\1\245\1\0\6\32\2\0\22\32"+
    "\6\0\2\32\7\0\10\32\1\0\1\242\7\0\1\32"+
    "\2\0\11\32\5\0\1\244\5\32\1\u0143\1\32\2\0"+
    "\1\245\1\0\6\32\2\0\22\32\6\0\2\32\7\0"+
    "\10\32\1\0\1\242\7\0\1\32\2\0\11\32\5\0"+
    "\1\244\1\32\1\64\5\32\2\0\1\245\1\0\6\32"+
    "\2\0\22\32\6\0\2\32\7\0\10\32\1\0\1\242"+
    "\7\0\1\32\2\0\3\32\1\u0100\5\32\5\0\1\244"+
    "\7\32\2\0\1\245\1\0\6\32\2\0\22\32\6\0"+
    "\2\32\7\0\10\u0144\11\0\1\u0144\2\0\11\u0144\6\0"+
    "\7\u0144\4\0\6\u0144\2\0\22\u0144\6\0\2\u0144\105\0"+
    "\1\u0145\120\0\1\u0146\125\0\1\u0147\44\0\1\u0148\123\0"+
    "\1\u0149\214\0\1\u014a\126\0\1\u014b\140\0\1\u014c\27\0"+
    "\1\u014d\123\0\10\u014e\11\0\1\u014e\2\0\11\u014e\6\0"+
    "\7\u014e\4\0\6\u014e\2\0\22\u014e\6\0\2\u014e\2\0"+
    "\2\u0133\1\u014f\124\u0133\5\0\10\u0134\1\0\1\242\7\0"+
    "\1\u0134\2\0\11\u0134\5\0\1\334\7\u0134\4\0\6\u0134"+
    "\2\0\22\u0134\6\0\2\u0134\7\0\10\u0135\1\0\1\242"+
    "\7\0\1\u0135\2\0\11\u0135\5\0\1\340\7\u0135\4\0"+
    "\6\u0135\2\0\22\u0135\6\0\2\u0135\7\0\2\32\1\u0150"+
    "\5\32\1\0\1\242\7\0\1\32\2\0\11\32\5\0"+
    "\1\244\7\32\2\0\1\245\1\0\6\32\2\0\22\32"+
    "\6\0\2\32\7\0\6\32\1\u0136\1\32\1\0\1\242"+
    "\7\0\1\32\2\0\11\32\5\0\1\244\7\32\2\0"+
    "\1\245\1\0\6\32\2\0\22\32\6\0\2\32\54\0"+
    "\1\u0151\140\0\1\u0119\100\0\1\u0119\75\0\10\32\1\0"+
    "\1\242\7\0\1\32\2\0\11\32\5\0\1\244\6\32"+
    "\1\266\2\0\1\245\1\0\6\32\2\0\22\32\6\0"+
    "\2\32\7\0\10\32\1\0\1\242\7\0\1\32\2\0"+
    "\2\32\1\u0152\6\32\5\0\1\244\7\32\2\0\1\245"+
    "\1\0\6\32\2\0\22\32\6\0\2\32\7\0\10\32"+
    "\1\0\1\242\7\0\1\32\2\0\3\32\1\301\5\32"+
    "\5\0\1\244\7\32\2\0\1\245\1\0\6\32\2\0"+
    "\22\32\6\0\2\32\7\0\10\32\1\0\1\242\7\0"+
    "\1\32\2\0\11\32\5\0\1\244\3\32\1\u0153\3\32"+
    "\2\0\1\245\1\0\6\32\2\0\22\32\6\0\2\32"+
    "\110\0\1\u0154\31\0\1\u0155\126\0\1\u0156\125\0\1\u0157"+
    "\130\0\1\u0158\1\0\1\u0159\216\0\1\u015a\125\0\1\u015b"+
    "\133\0\1\u015c\27\0\1\316\122\0\2\32\1\u015d\5\32"+
    "\1\0\1\242\7\0\1\32\2\0\11\32\5\0\1\244"+
    "\7\32\2\0\1\245\1\0\6\32\2\0\22\32\6\0"+
    "\2\32\57\0\1\u015e\56\0\10\32\1\0\1\242\7\0"+
    "\1\32\2\0\3\32\1\u015f\5\32\5\0\1\244\7\32"+
    "\2\0\1\245\1\0\6\32\2\0\22\32\6\0\2\32"+
    "\7\0\10\32\1\0\1\242\7\0\1\32\2\0\3\32"+
    "\1\u0160\5\32\5\0\1\244\7\32\2\0\1\245\1\0"+
    "\6\32\2\0\22\32\6\0\2\32\14\0\1\u0161\130\0"+
    "\1\316\207\0\1\u0162\40\0\1\u0163\127\0\1\u0164\212\0"+
    "\1\u0165\44\0\1\u0166\222\0\1\u0167\124\0\1\u0168\60\0"+
    "\1\u0169\165\0\1\u016a\42\0\1\u016b\215\0\1\u016c\125\0"+
    "\1\u016d\124\0\1\u016e\40\0\1\u016f\131\0\1\u0170\222\0"+
    "\1\u0171\53\0\1\u0119\104\0\1\u0172\213\0\1\u0173\131\0"+
    "\1\u0174\132\0\1\u0175\31\0\1\u0176\126\0\1\u0177\126\0"+
    "\1\316\221\0\1\u0178\121\0\1\316\37\0\1\u0179\217\0"+
    "\1\u017a\124\0\1\u017b\37\0\1\u017c\213\0\1\u017d\45\0"+
    "\1\u017e\212\0\1\u017f\43\0\1\u0180\121\0\1\u0181\221\0"+
    "\1\u0182\120\0\1\u0183\136\0\1\u0170\117\0\1\u0184\41\0"+
    "\1\u0185\225\0\1\u0186\32\0\1\u0187\221\0\1\u0188\34\0"+
    "\1\u0189\214\0\1\u018a\130\0\1\u018b\133\0\1\u018c\111\0"+
    "\1\u018d\132\0\1\316\35\0\1\u018e\132\0\1\u018f\212\0"+
    "\1\u0190\36\0\1\u0191\222\0\1\u0192\121\0\1\u0189\135\0"+
    "\1\u0193\32\0\1\u0194\130\0\1\u0195\222\0\1\316\32\0"+
    "\1\u0196\217\0\1\u0197\36\0\1\u0198\216\0\1\u0189\117\0"+
    "\1\u0199\144\0\1\u0170\13\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[26883];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\5\1\1\0\2\1\12\0\1\11\1\1\1\11"+
    "\1\1\1\11\10\1\1\11\40\1\10\11\1\1\1\11"+
    "\2\1\1\11\3\1\2\11\1\1\1\11\1\1\1\11"+
    "\7\1\2\11\36\1\1\11\30\1\1\11\1\1\1\11"+
    "\1\1\2\11\4\1\4\0\2\1\1\11\1\1\7\0"+
    "\1\1\1\11\1\0\14\1\1\11\6\1\1\0\1\11"+
    "\2\0\3\1\1\11\3\1\1\11\1\0\1\11\3\0"+
    "\3\1\2\0\2\1\2\0\1\1\1\11\2\1\1\0"+
    "\2\1\13\0\1\1\3\0\13\1\1\0\5\1\1\0"+
    "\1\1\2\0\3\1\1\0\2\1\2\0\1\11\2\1"+
    "\2\0\1\1\10\0\6\1\13\0\5\1\2\0\1\11"+
    "\3\0\1\11\5\1\13\0\1\11\1\1\1\0\2\1"+
    "\11\0\1\1\1\0\2\1\71\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[409];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    public void setTokenStart(int position){zzCurrentPos = zzStartRead = position;}
    public int getNextTokenStart(){ return zzMarkedPos;}
    public boolean isLastToken(){ return zzMarkedPos == zzEndRead; }

    public void yybegin_YYINITIAL(){yybegin(YYINITIAL);}
    public void yybegin_LEX_MULTILINE(){yybegin(LEX_MULTILINE);}
    public void yybegin_LEX_MULTILINE_TOKEN(){yybegin(LEX_MULTILINE_TOKEN);}
    public void yybegin_LEX_MULTILINE_WAITING(){yybegin(LEX_MULTILINE_WAITING);}
    public void yybegin_LEX_EOF(){yybegin(LEX_EOF);}
    public void yybegin_LEX_POD(){yybegin(LEX_POD);}

    public boolean yystate_LEX_MULTILINE_WAITING(){return yystate() == LEX_MULTILINE_WAITING;}

    public void yybegin_LEX_QUOTE_LIKE_CHARS(){yybegin(LEX_QUOTE_LIKE_CHARS);}
    public void yybegin_LEX_QUOTE_LIKE_OPENER(){yybegin(LEX_QUOTE_LIKE_OPENER);}
    public void yybegin_LEX_QUOTE_LIKE_CLOSER(){yybegin(LEX_QUOTE_LIKE_CLOSER);}
    public void yybegin_LEX_QUOTE_LIKE_WORDS(){yybegin(LEX_QUOTE_LIKE_WORDS);}
    public void yybegin_LEX_QUOTE_LIKE_LIST_OPENER(){yybegin(LEX_QUOTE_LIKE_LIST_OPENER);}
    public void yybegin_LEX_QUOTE_LIKE_LIST_CLOSER(){yybegin(LEX_QUOTE_LIKE_LIST_CLOSER);}


  public PerlLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PerlLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 200) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 66: 
          { yybegin(LEX_REQUIRE); return PerlFunctionUtil.getFunctionType(yytext().toString());
          }
        case 67: break;
        case 54: 
          { return PERL_ARRAY;
          }
        case 68: break;
        case 62: 
          { processPodOpener();break;
          }
        case 69: break;
        case 61: 
          { yypushback(1); return PERL_LABEL;
          }
        case 70: break;
        case 43: 
          { IElementType type = processQuoteLikeListQuote();
            if( type == null ) // disallowed sharp
                break;
            return type;
          }
        case 71: break;
        case 9: 
          { return PERL_NUMBER;
          }
        case 72: break;
        case 46: 
          { yybegin(YYINITIAL);return PERL_FUNCTION;
          }
        case 73: break;
        case 37: 
          { yybegin(YYINITIAL);
        return PERL_VERSION;
          }
        case 74: break;
        case 35: 
          { yybegin(LEX_PACKAGE_USE_PARAMS);
        return PERL_STRING;
          }
        case 75: break;
        case 64: 
          { processDataOpener(); break;
          }
        case 76: break;
        case 11: 
          { return PERL_OPERATOR;
          }
        case 77: break;
        case 1: 
          { return TokenType.WHITE_SPACE;
          }
        case 78: break;
        case 49: 
          { return PERL_HASH;
          }
        case 79: break;
        case 13: 
          { return processQuoteLikeStringOpener();
          }
        case 80: break;
        case 45: 
          { IElementType tokenType = processQuoteLikeWord();
          if( tokenType != null )
                return tokenType;
          break;
          }
        case 81: break;
        case 19: 
          { return PERL_COMMA;
          }
        case 82: break;
        case 50: 
          { return processQuoteLikeListOpener();
          }
        case 83: break;
        case 40: 
          { return processQuoteLikeStringSpace();
          }
        case 84: break;
        case 32: 
          { yybegin(LEX_PACKAGE_USE_PARAMS);
        return PERL_VERSION;
          }
        case 85: break;
        case 59: 
          { yybegin(LEX_FUNCTION_DEFINITION); return PerlFunctionUtil.getFunctionType(yytext().toString());
          }
        case 86: break;
        case 3: 
          { if( isLastToken() )
        {
            endPodBlock();
        }
        break;
          }
        case 87: break;
        case 27: 
          { yybegin(LEX_PACKAGE_DEFINITION_BLOCK); return PERL_VERSION;
          }
        case 88: break;
        case 25: 
          { yybegin(LEX_PACKAGE_DEFINITION_VERSION); return PERL_PACKAGE;
          }
        case 89: break;
        case 65: 
          { yybegin(LEX_PACKAGE_DEFINITION); return PerlFunctionUtil.getFunctionType(yytext().toString());
          }
        case 90: break;
        case 58: 
          { return PERL_KEYWORD;
          }
        case 91: break;
        case 56: 
          { yypushback(2);
    return PerlPackageUtil.getPackageType(yytext().toString());
          }
        case 92: break;
        case 8: 
          { return processSemicolon();
          }
        case 93: break;
        case 30: 
          { if( isLastToken() )
        {
            return endMultiline();
        }
        break;
          }
        case 94: break;
        case 48: 
          { return PERL_GLOB;
          }
        case 95: break;
        case 2: 
          { if( isLastToken() )
            return endDataBlock();
        break;
          }
        case 96: break;
        case 52: 
          { return PERL_DEPACKAGE;
          }
        case 97: break;
        case 36: 
          { yypushback(1);yybegin(YYINITIAL);break;
          }
        case 98: break;
        case 16: 
          { return PERL_COMMENT;
          }
        case 99: break;
        case 33: 
          { yybegin(LEX_PACKAGE_USE_VERSION);
        return PerlPackageUtil.getPackageType(yytext().toString());
          }
        case 100: break;
        case 57: 
          { return processMultilineOpener();
          }
        case 101: break;
        case 38: 
          { yybegin(YYINITIAL);
        return PerlPackageUtil.getPackageType(yytext().toString());
          }
        case 102: break;
        case 7: 
          { return processNewLine();
          }
        case 103: break;
        case 5: 
          { yybegin(YYINITIAL);return PERL_MULTILINE_MARKER_END;
          }
        case 104: break;
        case 28: 
          { yybegin(YYINITIAL); return PERL_LBRACE;
          }
        case 105: break;
        case 34: 
          { return PERL_STRING;
          }
        case 106: break;
        case 41: 
          { IElementType tokenType = processQuoteLikeChar();
          if( tokenType != null )
                return tokenType;
          break;
          }
        case 107: break;
        case 17: 
          { return PERL_LPAREN;
          }
        case 108: break;
        case 12: 
          { return PERL_SIGIL_HASH;
          }
        case 109: break;
        case 10: 
          { return PERL_FUNCTION;
          }
        case 110: break;
        case 6: 
          { return TokenType.BAD_CHARACTER;
          }
        case 111: break;
        case 53: 
          { return PERL_SCALAR;
          }
        case 112: break;
        case 24: 
          { yybegin(YYINITIAL);  return TokenType.BAD_CHARACTER;
          }
        case 113: break;
        case 18: 
          { return PERL_RPAREN;
          }
        case 114: break;
        case 47: 
          { yybegin(LEX_DEREFERENCE);return PERL_DEREFERENCE;
          }
        case 115: break;
        case 14: 
          { return PERL_SIGIL_SCALAR;
          }
        case 116: break;
        case 15: 
          { return PERL_SIGIL_ARRAY;
          }
        case 117: break;
        case 42: 
          { yybegin(YYINITIAL); return PERL_QUOTE;
          }
        case 118: break;
        case 31: 
          { yypushback(1); yybegin(YYINITIAL); break;
          }
        case 119: break;
        case 4: 
          { if( isMultilineEnd() || isLastToken())
        {
            return endMultiline();
        }
        break;
          }
        case 120: break;
        case 51: 
          { yybegin(LEX_PACKAGE_USE); return PerlFunctionUtil.getFunctionType(yytext().toString());
          }
        case 121: break;
        case 26: 
          { yybegin(YYINITIAL);
        return TokenType.BAD_CHARACTER;
          }
        case 122: break;
        case 39: 
          { IElementType type = processQuoteLikeQuote();
            if( type == null ) // disallowed sharp
                break;
            return type;
          }
        case 123: break;
        case 60: 
          { yybegin(LEX_PACKAGE_USE);return PerlFunctionUtil.getFunctionType(yytext().toString());
          }
        case 124: break;
        case 55: 
          { yypushback(2);
    return PERL_PACKAGE;
          }
        case 125: break;
        case 44: 
          { return processQuoteLikeListSpace();
          }
        case 126: break;
        case 22: 
          { return PERL_LBRACE;
          }
        case 127: break;
        case 23: 
          { return PERL_RBRACE;
          }
        case 128: break;
        case 63: 
          { return endPodBlock();
          }
        case 129: break;
        case 29: 
          { yybegin(YYINITIAL); return TokenType.BAD_CHARACTER;
          }
        case 130: break;
        case 21: 
          { return PERL_RBRACK;
          }
        case 131: break;
        case 20: 
          { return PERL_LBRACK;
          }
        case 132: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
