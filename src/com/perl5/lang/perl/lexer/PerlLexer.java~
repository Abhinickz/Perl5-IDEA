/* The following code was generated by JFlex 1.4.3 on 01.05.15 14:38 */

package com.perl5.lang.perl.lexer;

/*
    http://jflex.de/manual.html
    http://www2.cs.tum.edu/projects/cup

*/

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import org.jetbrains.annotations.NotNull;
import com.perl5.lang.perl.util.PerlFunctionUtil;
import com.perl5.lang.perl.util.PerlScalarUtil;
import com.perl5.lang.perl.util.PerlHashUtil;
import com.perl5.lang.perl.util.PerlGlobUtil;
import com.perl5.lang.perl.util.PerlArrayUtil;
import com.perl5.lang.perl.util.PerlPackageUtil;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 01.05.15 14:38 from the specification file
 * <tt>C:/Repository/Perl5-IDEA/src/com/perl5/lang/perl/lexer/Perl.flex</tt>
 */
public class PerlLexer extends PerlLexerProto implements FlexLexer, PerlElementTypes {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int LEX_QUOTE_LIKE_CLOSER = 18;
  public static final int LEX_MULTILINE_WAITING = 8;
  public static final int LEX_QUOTE_LIKE_WORDS = 22;
  public static final int LEX_QUOTE_LIKE_CHARS = 16;
  public static final int LEX_QUOTE_LIKE_LIST_CLOSER = 24;
  public static final int LEX_MULTILINE_TOKEN = 12;
  public static final int LEX_QUOTE_LIKE_LIST_OPENER = 20;
  public static final int LEX_MULTILINE = 10;
  public static final int LEX_EOF = 2;
  public static final int YYINITIAL = 0;
  public static final int LEX_BAREWORD_STRING = 6;
  public static final int LEX_QUOTE_LIKE_OPENER = 14;
  public static final int LEX_POD = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11,  9, 9
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\27\1\6"+
    "\1\11\1\70\1\34\1\50\1\7\1\113\1\114\1\26\1\25\1\22"+
    "\1\23\1\14\1\33\1\115\1\64\1\64\1\64\1\64\3\5\1\106"+
    "\1\5\1\53\1\116\1\36\1\32\1\24\1\22\1\117\1\20\1\75"+
    "\1\101\1\17\1\15\1\105\1\74\1\110\1\73\2\4\1\102\1\100"+
    "\1\16\1\104\1\112\1\4\1\72\1\76\1\21\1\103\1\111\1\71"+
    "\1\107\1\77\1\4\1\120\1\31\1\121\1\52\1\12\1\10\1\55"+
    "\1\65\1\45\1\56\1\42\1\60\1\41\1\63\1\61\1\4\1\66"+
    "\1\37\1\46\1\44\1\54\1\47\1\43\1\57\1\62\1\40\1\67"+
    "\1\13\1\122\1\35\1\123\1\4\1\124\1\51\1\125\1\30\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\0\1\3\1\4\5\0\2\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\10"+
    "\1\5\11\15\1\16\2\15\3\10\1\17\4\10\3\15"+
    "\12\10\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\10\1\27\1\30\1\1\3\2\1\31\1\14\1\31"+
    "\2\15\3\31\1\17\17\31\1\14\2\3\1\32\1\33"+
    "\1\34\2\35\1\36\1\37\1\40\1\41\1\0\1\13"+
    "\1\14\1\0\1\11\1\10\1\15\1\42\1\43\7\0"+
    "\2\44\1\0\1\10\3\15\6\10\1\17\1\45\1\15"+
    "\4\10\1\46\1\10\1\47\14\10\3\50\2\51\1\0"+
    "\1\10\1\2\1\11\2\31\1\15\6\31\1\17\1\45"+
    "\1\15\4\31\1\46\16\31\1\11\1\14\2\10\1\0"+
    "\1\10\13\0\1\52\3\0\12\10\1\46\4\10\1\0"+
    "\5\50\1\0\1\50\1\0\1\10\1\2\13\31\1\46"+
    "\5\31\3\10\2\0\1\53\10\0\11\10\13\0\1\54"+
    "\12\31\2\10\1\0\1\53\2\0\1\52\7\10\11\0"+
    "\1\54\7\31\1\10\1\0\2\10\11\0\2\31\1\55"+
    "\72\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[411];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\126\0\254\0\u0102\0\u0158\0\u01ae\0\u0204\0\u025a"+
    "\0\u02b0\0\u0306\0\u035c\0\u03b2\0\u0408\0\u045e\0\u0408\0\u04b4"+
    "\0\u050a\0\u0560\0\u0408\0\u05b6\0\u060c\0\u0662\0\u06b8\0\u0408"+
    "\0\u070e\0\u0764\0\u07ba\0\u0810\0\u0866\0\u08bc\0\u0912\0\u0968"+
    "\0\u09be\0\u0a14\0\u0a6a\0\u0ac0\0\u0b16\0\u0b6c\0\u0bc2\0\u0c18"+
    "\0\u0c6e\0\u0cc4\0\u0d1a\0\u0d70\0\u0dc6\0\u0e1c\0\u0e72\0\u0ec8"+
    "\0\u0f1e\0\u0f74\0\u0fca\0\u1020\0\u1076\0\u10cc\0\u1122\0\u1178"+
    "\0\u11ce\0\u0408\0\u0408\0\u0408\0\u1224\0\u0408\0\u0408\0\u127a"+
    "\0\u0408\0\u0408\0\u0408\0\u12d0\0\u0408\0\u1326\0\u137c\0\u13d2"+
    "\0\u1428\0\u147e\0\u14d4\0\u152a\0\u1580\0\u15d6\0\u162c\0\u1682"+
    "\0\u16d8\0\u172e\0\u1784\0\u17da\0\u1830\0\u1886\0\u18dc\0\u1932"+
    "\0\u1988\0\u19de\0\u1a34\0\u1a8a\0\u1ae0\0\u1b36\0\u1b8c\0\u1be2"+
    "\0\u1c38\0\u0408\0\u0408\0\u1c8e\0\u0408\0\u1ce4\0\u0408\0\u0408"+
    "\0\u1d3a\0\u0408\0\u1d90\0\u0408\0\u1de6\0\u1e3c\0\u1e92\0\u1ee8"+
    "\0\u1f3e\0\u1f94\0\u0408\0\u1fea\0\u2040\0\u2096\0\u20ec\0\u2142"+
    "\0\u2198\0\u21ee\0\u2244\0\u0408\0\u229a\0\u22f0\0\u2346\0\u239c"+
    "\0\u050a\0\u23f2\0\u2448\0\u249e\0\u24f4\0\u254a\0\u25a0\0\u050a"+
    "\0\u050a\0\u25f6\0\u264c\0\u26a2\0\u26f8\0\u274e\0\u050a\0\u27a4"+
    "\0\u0408\0\u27fa\0\u2850\0\u28a6\0\u28fc\0\u2952\0\u29a8\0\u29fe"+
    "\0\u2a54\0\u2aaa\0\u2b00\0\u2b56\0\u2bac\0\u2c02\0\u0408\0\u2c58"+
    "\0\u2cae\0\u0408\0\u2d04\0\u2d5a\0\u2db0\0\u2e06\0\u2e5c\0\u2eb2"+
    "\0\u137c\0\u2f08\0\u2f5e\0\u2fb4\0\u300a\0\u3060\0\u30b6\0\u137c"+
    "\0\u137c\0\u310c\0\u3162\0\u31b8\0\u320e\0\u3264\0\u137c\0\u32ba"+
    "\0\u3310\0\u3366\0\u33bc\0\u3412\0\u3468\0\u34be\0\u3514\0\u356a"+
    "\0\u35c0\0\u3616\0\u366c\0\u36c2\0\u3718\0\u376e\0\u1e3c\0\u37c4"+
    "\0\u381a\0\u3870\0\u38c6\0\u391c\0\u3972\0\u39c8\0\u3a1e\0\u3a74"+
    "\0\u3aca\0\u3b20\0\u3b76\0\u3bcc\0\u3c22\0\u239c\0\u3c78\0\u3cce"+
    "\0\u3d24\0\u3d7a\0\u3dd0\0\u3e26\0\u3e7c\0\u3ed2\0\u3f28\0\u3f7e"+
    "\0\u3fd4\0\u402a\0\u4080\0\u40d6\0\u412c\0\u4182\0\u41d8\0\u422e"+
    "\0\u4284\0\u42da\0\u4330\0\u4386\0\u43dc\0\u4432\0\u4488\0\u44de"+
    "\0\u4534\0\u458a\0\u45e0\0\u4636\0\u468c\0\u46e2\0\u4738\0\u478e"+
    "\0\u47e4\0\u483a\0\u4890\0\u48e6\0\u493c\0\u4992\0\u49e8\0\u4a3e"+
    "\0\u4a94\0\u4aea\0\u4b40\0\u4b96\0\u4bec\0\u4c42\0\u4c98\0\u4cee"+
    "\0\u4d44\0\u4d9a\0\u4df0\0\u4e46\0\u4e9c\0\u4ef2\0\u4f48\0\u4f9e"+
    "\0\u4ff4\0\u504a\0\u50a0\0\u50f6\0\u514c\0\u51a2\0\u51f8\0\u524e"+
    "\0\u52a4\0\u52fa\0\u5350\0\u53a6\0\u53fc\0\u5452\0\u54a8\0\u54fe"+
    "\0\u5554\0\u55aa\0\u5600\0\u5656\0\u56ac\0\u5702\0\u5758\0\u57ae"+
    "\0\u5804\0\u585a\0\u58b0\0\u5906\0\u595c\0\u59b2\0\u5a08\0\u5a5e"+
    "\0\u5ab4\0\u5b0a\0\u5b60\0\u5bb6\0\u5c0c\0\u0408\0\u5c62\0\u5cb8"+
    "\0\u0408\0\u5d0e\0\u5d64\0\u5dba\0\u5e10\0\u5e66\0\u5ebc\0\u5f12"+
    "\0\u5f68\0\u5fbe\0\u6014\0\u606a\0\u60c0\0\u6116\0\u616c\0\u61c2"+
    "\0\u6218\0\u0408\0\u626e\0\u62c4\0\u631a\0\u6370\0\u63c6\0\u641c"+
    "\0\u6472\0\u64c8\0\u651e\0\u6574\0\u65ca\0\u6620\0\u6676\0\u66cc"+
    "\0\u6722\0\u6778\0\u67ce\0\u6824\0\u687a\0\u68d0\0\u6926\0\u697c"+
    "\0\u050a\0\u69d2\0\u6a28\0\u6a7e\0\u6ad4\0\u6b2a\0\u6b80\0\u6bd6"+
    "\0\u6c2c\0\u6c82\0\u6cd8\0\u6d2e\0\u6d84\0\u6dda\0\u6e30\0\u6e86"+
    "\0\u6edc\0\u6f32\0\u6f88\0\u6fde\0\u7034\0\u708a\0\u70e0\0\u7136"+
    "\0\u718c\0\u71e2\0\u7238\0\u728e\0\u72e4\0\u733a\0\u7390\0\u73e6"+
    "\0\u743c\0\u7492\0\u74e8\0\u753e\0\u7594\0\u75ea\0\u7640\0\u7696"+
    "\0\u76ec\0\u7742\0\u7798\0\u77ee\0\u7844\0\u789a\0\u78f0\0\u7946"+
    "\0\u799c\0\u79f2\0\u7a48\0\u7a9e\0\u7af4\0\u7b4a\0\u7ba0\0\u7bf6"+
    "\0\u7c4c\0\u7ca2\0\u7cf8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[411];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\15\1\16\1\17\1\20\1\21\1\22\3\23\1\24"+
    "\1\25\1\26\1\27\5\21\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\30\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\21\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\30\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\21\1\22\1\66"+
    "\1\67\1\70\1\71\15\21\1\22\4\21\1\72\1\73"+
    "\1\22\1\74\1\75\1\76\1\77\1\100\1\21\1\101"+
    "\1\102\2\2\1\103\123\2\2\104\1\105\27\104\1\106"+
    "\73\104\1\15\1\16\1\17\1\20\1\107\1\22\3\23"+
    "\1\24\1\110\1\111\1\27\5\107\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\30\1\112\1\40\1\41"+
    "\1\113\1\43\1\114\1\107\1\115\1\116\1\117\1\120"+
    "\1\121\1\122\1\123\1\54\1\55\1\30\1\56\1\124"+
    "\1\125\1\126\1\127\1\130\1\131\1\132\1\107\1\22"+
    "\1\133\1\134\1\135\1\71\15\107\1\22\4\107\1\72"+
    "\1\73\1\22\1\74\1\75\1\76\1\77\1\136\1\107"+
    "\1\101\1\102\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\3\23\1\24\1\137\1\26\1\27\5\21\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\30\1\112\1\40"+
    "\1\41\1\42\1\43\1\44\1\21\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\30\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\21"+
    "\1\22\1\66\1\67\1\70\1\71\15\21\1\22\4\21"+
    "\1\72\1\73\1\22\1\74\1\75\1\76\1\77\1\100"+
    "\1\21\1\101\1\102\1\140\1\141\1\142\123\140\2\7"+
    "\1\0\123\7\1\143\3\144\122\143\1\145\1\146\124\145"+
    "\2\147\1\0\123\147\1\150\3\151\122\150\1\152\3\151"+
    "\122\152\130\0\1\17\126\0\1\20\126\0\2\21\4\0"+
    "\2\21\1\0\5\21\13\0\1\21\1\0\11\21\4\0"+
    "\14\21\1\0\22\21\2\0\1\21\4\0\2\21\7\0"+
    "\1\22\4\0\1\22\1\0\1\153\47\0\1\22\21\0"+
    "\1\22\6\0\1\22\10\0\2\24\1\154\123\24\4\0"+
    "\1\21\1\137\4\0\1\155\1\21\1\156\5\21\13\0"+
    "\1\21\1\0\11\21\4\0\10\21\1\137\3\21\1\0"+
    "\15\21\1\137\4\21\2\0\1\137\4\0\2\21\6\0"+
    "\1\21\1\157\4\0\2\21\1\0\5\21\13\0\1\21"+
    "\1\0\11\21\4\0\1\21\1\160\6\21\1\157\3\21"+
    "\1\0\15\21\1\157\4\21\2\0\1\157\4\0\2\21"+
    "\16\0\1\161\134\0\2\30\5\0\1\30\117\0\1\30"+
    "\5\0\1\30\120\0\1\30\4\0\1\30\77\0\1\162"+
    "\5\0\2\162\1\0\5\162\4\0\1\30\3\0\1\30"+
    "\2\0\1\162\1\0\11\162\4\0\10\162\1\0\3\162"+
    "\1\0\15\162\1\0\4\162\7\0\2\162\32\0\1\30"+
    "\1\0\1\30\123\0\1\30\121\0\1\163\3\0\1\30"+
    "\1\0\1\30\7\0\1\164\4\0\1\165\4\0\1\166"+
    "\3\0\1\167\1\170\1\0\1\171\1\0\1\172\73\0"+
    "\1\30\76\0\1\173\5\0\2\173\1\0\5\173\1\0"+
    "\1\174\1\0\1\174\1\0\1\174\5\0\1\173\1\0"+
    "\11\173\2\0\1\175\1\0\10\173\1\0\3\173\1\0"+
    "\15\173\1\0\4\173\7\0\2\173\6\0\2\21\4\0"+
    "\2\21\1\0\5\21\13\0\1\21\1\0\11\21\4\0"+
    "\1\176\13\21\1\0\22\21\2\0\1\21\4\0\2\21"+
    "\34\0\1\177\3\0\1\200\73\0\2\21\4\0\2\21"+
    "\1\0\5\21\13\0\1\21\1\0\1\21\1\201\1\21"+
    "\1\201\5\21\4\0\1\202\1\203\12\21\1\0\22\21"+
    "\2\0\1\21\4\0\2\21\6\0\2\21\4\0\2\21"+
    "\1\0\5\21\13\0\1\21\1\0\1\21\1\201\1\21"+
    "\1\201\5\21\4\0\3\21\1\204\10\21\1\0\22\21"+
    "\2\0\1\21\4\0\2\21\6\0\2\21\4\0\1\21"+
    "\1\205\1\0\5\21\13\0\1\206\1\0\1\207\3\21"+
    "\1\201\4\21\4\0\14\21\1\0\22\21\2\0\1\21"+
    "\4\0\2\21\6\0\2\21\4\0\2\21\1\0\5\21"+
    "\13\0\1\210\1\0\4\21\1\210\4\21\4\0\14\21"+
    "\1\0\22\21\2\0\1\21\4\0\1\211\1\21\6\0"+
    "\2\21\4\0\2\21\1\0\5\21\13\0\1\21\1\0"+
    "\3\21\1\212\5\21\4\0\1\213\13\21\1\0\22\21"+
    "\2\0\1\21\4\0\2\21\6\0\2\21\4\0\2\21"+
    "\1\0\5\21\13\0\1\21\1\0\7\21\1\214\1\21"+
    "\4\0\1\215\13\21\1\0\22\21\2\0\1\21\4\0"+
    "\2\21\6\0\2\21\4\0\2\21\1\0\5\21\13\0"+
    "\1\21\1\0\11\21\4\0\1\21\1\216\12\21\1\0"+
    "\22\21\2\0\1\21\4\0\1\21\1\217\6\0\2\21"+
    "\4\0\2\21\1\0\5\21\13\0\1\21\1\0\11\21"+
    "\4\0\1\21\1\220\12\21\1\0\22\21\2\0\1\21"+
    "\4\0\2\21\52\0\1\30\126\0\1\30\127\0\1\221"+
    "\56\0\2\21\4\0\2\21\1\0\5\21\13\0\1\21"+
    "\1\0\11\21\4\0\3\21\1\201\7\21\1\222\1\0"+
    "\22\21\2\0\1\21\4\0\2\21\6\0\2\21\4\0"+
    "\2\21\1\0\5\21\13\0\1\21\1\0\5\21\1\223"+
    "\3\21\4\0\14\21\1\0\22\21\2\0\1\21\4\0"+
    "\2\21\6\0\2\21\4\0\2\21\1\0\5\21\13\0"+
    "\1\21\1\0\3\21\1\224\5\21\4\0\1\217\13\21"+
    "\1\0\22\21\2\0\1\21\4\0\2\21\6\0\2\21"+
    "\4\0\2\21\1\0\5\21\13\0\1\21\1\0\3\21"+
    "\1\225\5\21\4\0\14\21\1\0\22\21\2\0\1\21"+
    "\4\0\2\21\6\0\2\21\4\0\2\21\1\0\5\21"+
    "\13\0\1\21\1\0\11\21\4\0\1\226\13\21\1\0"+
    "\22\21\2\0\1\21\4\0\2\21\6\0\2\21\4\0"+
    "\2\21\1\0\5\21\13\0\1\21\1\0\11\21\4\0"+
    "\4\21\1\217\7\21\1\0\22\21\2\0\1\21\4\0"+
    "\2\21\6\0\2\21\4\0\2\21\1\0\5\21\13\0"+
    "\1\21\1\0\6\21\1\227\2\21\4\0\1\230\12\21"+
    "\1\231\1\0\22\21\2\0\1\21\4\0\2\21\6\0"+
    "\2\21\4\0\2\21\1\0\5\21\13\0\1\21\1\0"+
    "\11\21\4\0\3\21\1\232\10\21\1\0\22\21\2\0"+
    "\1\21\4\0\2\21\6\0\2\21\4\0\2\21\1\0"+
    "\5\21\13\0\1\21\1\0\3\21\1\233\5\21\4\0"+
    "\14\21\1\0\22\21\2\0\1\21\4\0\2\21\6\0"+
    "\2\21\4\0\2\21\1\0\5\21\13\0\1\21\1\0"+
    "\5\21\1\234\3\21\4\0\6\21\1\235\5\21\1\0"+
    "\22\21\2\0\1\21\4\0\2\21\6\0\1\236\1\0"+
    "\4\237\2\236\1\237\5\236\7\237\1\0\3\237\1\236"+
    "\1\237\11\236\2\237\1\240\1\237\10\236\1\0\3\236"+
    "\1\237\15\236\1\0\4\236\7\237\2\236\6\0\1\241"+
    "\5\0\2\241\1\0\5\241\1\0\1\242\1\0\1\242"+
    "\1\0\1\242\5\0\1\241\1\0\11\241\2\0\1\243"+
    "\1\0\10\241\1\0\3\241\1\0\15\241\1\0\4\241"+
    "\7\0\2\241\6\0\2\21\4\0\2\21\1\0\5\21"+
    "\13\0\1\21\1\0\11\21\4\0\7\21\1\244\4\21"+
    "\1\0\22\21\2\0\1\21\4\0\2\21\2\0\2\104"+
    "\1\105\125\104\1\105\42\104\1\245\60\104\4\0\2\107"+
    "\4\0\2\107\1\0\5\107\13\0\1\107\1\0\11\107"+
    "\4\0\14\107\1\0\22\107\2\0\1\107\4\0\2\107"+
    "\6\0\1\107\1\110\4\0\1\110\1\107\1\156\5\107"+
    "\13\0\1\107\1\0\11\107\4\0\10\107\1\110\3\107"+
    "\1\0\15\107\1\110\4\107\2\0\1\110\4\0\2\107"+
    "\6\0\1\107\1\246\4\0\2\107\1\0\5\107\13\0"+
    "\1\107\1\0\11\107\4\0\1\107\1\247\6\107\1\246"+
    "\3\107\1\0\15\107\1\246\4\107\2\0\1\246\4\0"+
    "\2\107\26\0\1\163\3\0\1\30\1\0\1\30\77\0"+
    "\2\107\4\0\2\107\1\0\5\107\13\0\1\107\1\0"+
    "\11\107\4\0\1\250\13\107\1\0\22\107\2\0\1\107"+
    "\4\0\2\107\6\0\2\107\4\0\2\107\1\0\5\107"+
    "\13\0\1\107\1\0\1\107\1\251\1\107\1\251\5\107"+
    "\4\0\1\252\1\253\12\107\1\0\22\107\2\0\1\107"+
    "\4\0\2\107\6\0\2\107\4\0\2\107\1\0\5\107"+
    "\13\0\1\107\1\0\1\107\1\251\1\107\1\251\5\107"+
    "\4\0\3\107\1\254\10\107\1\0\22\107\2\0\1\107"+
    "\4\0\2\107\6\0\2\107\4\0\1\107\1\255\1\0"+
    "\5\107\13\0\1\256\1\0\1\257\3\107\1\251\4\107"+
    "\4\0\14\107\1\0\22\107\2\0\1\107\4\0\2\107"+
    "\6\0\2\107\4\0\2\107\1\0\5\107\13\0\1\260"+
    "\1\0\4\107\1\260\4\107\4\0\14\107\1\0\22\107"+
    "\2\0\1\107\4\0\1\261\1\107\6\0\2\107\4\0"+
    "\2\107\1\0\5\107\13\0\1\107\1\0\3\107\1\262"+
    "\5\107\4\0\1\263\13\107\1\0\22\107\2\0\1\107"+
    "\4\0\2\107\6\0\2\107\4\0\2\107\1\0\5\107"+
    "\13\0\1\107\1\0\7\107\1\264\1\107\4\0\1\265"+
    "\13\107\1\0\22\107\2\0\1\107\4\0\2\107\6\0"+
    "\2\107\4\0\2\107\1\0\5\107\13\0\1\107\1\0"+
    "\11\107\4\0\1\107\1\266\12\107\1\0\22\107\2\0"+
    "\1\107\4\0\1\107\1\267\6\0\2\107\4\0\2\107"+
    "\1\0\5\107\13\0\1\107\1\0\11\107\4\0\1\107"+
    "\1\270\12\107\1\0\22\107\2\0\1\107\4\0\2\107"+
    "\6\0\2\107\4\0\2\107\1\0\5\107\13\0\1\107"+
    "\1\0\11\107\4\0\3\107\1\251\7\107\1\271\1\0"+
    "\22\107\2\0\1\107\4\0\2\107\6\0\2\107\4\0"+
    "\2\107\1\0\5\107\13\0\1\107\1\0\5\107\1\272"+
    "\3\107\4\0\14\107\1\0\22\107\2\0\1\107\4\0"+
    "\2\107\6\0\2\107\4\0\2\107\1\0\5\107\13\0"+
    "\1\107\1\0\3\107\1\273\5\107\4\0\1\267\13\107"+
    "\1\0\22\107\2\0\1\107\4\0\2\107\6\0\2\107"+
    "\4\0\2\107\1\0\5\107\13\0\1\107\1\0\3\107"+
    "\1\274\5\107\4\0\14\107\1\0\22\107\2\0\1\107"+
    "\4\0\2\107\6\0\2\107\4\0\2\107\1\0\5\107"+
    "\13\0\1\107\1\0\11\107\4\0\1\275\13\107\1\0"+
    "\22\107\2\0\1\107\4\0\2\107\6\0\2\107\4\0"+
    "\2\107\1\0\5\107\13\0\1\107\1\0\11\107\4\0"+
    "\4\107\1\267\7\107\1\0\22\107\2\0\1\107\4\0"+
    "\2\107\6\0\2\107\4\0\2\107\1\0\5\107\13\0"+
    "\1\107\1\0\6\107\1\276\2\107\4\0\1\277\12\107"+
    "\1\300\1\0\22\107\2\0\1\107\4\0\2\107\6\0"+
    "\2\107\4\0\2\107\1\0\5\107\13\0\1\107\1\0"+
    "\11\107\4\0\3\107\1\301\10\107\1\0\22\107\2\0"+
    "\1\107\4\0\2\107\6\0\2\107\4\0\2\107\1\0"+
    "\5\107\13\0\1\107\1\0\3\107\1\302\5\107\4\0"+
    "\14\107\1\0\22\107\2\0\1\107\4\0\2\107\6\0"+
    "\2\107\4\0\2\107\1\0\5\107\13\0\1\107\1\0"+
    "\5\107\1\303\3\107\4\0\6\107\1\304\5\107\1\0"+
    "\22\107\2\0\1\107\4\0\2\107\6\0\2\107\4\0"+
    "\2\107\1\0\5\107\13\0\1\107\1\0\11\107\4\0"+
    "\7\107\1\305\4\107\1\0\22\107\2\0\1\107\4\0"+
    "\2\107\6\0\1\21\1\137\4\0\1\137\1\21\1\156"+
    "\5\21\13\0\1\21\1\0\11\21\4\0\10\21\1\137"+
    "\3\21\1\0\15\21\1\137\4\21\2\0\1\137\4\0"+
    "\2\21\2\0\2\140\1\0\125\140\1\142\123\140\1\0"+
    "\3\144\124\0\1\145\124\0\3\151\127\0\1\306\4\0"+
    "\1\307\51\0\1\306\21\0\1\306\6\0\1\306\14\0"+
    "\1\21\1\137\4\0\1\137\1\21\1\156\1\310\1\21"+
    "\1\311\2\21\13\0\1\21\1\0\11\21\4\0\10\21"+
    "\1\137\3\21\1\0\15\21\1\137\4\21\2\0\1\137"+
    "\4\0\2\21\7\0\1\307\4\0\1\307\51\0\1\307"+
    "\21\0\1\307\6\0\1\307\14\0\1\21\1\157\4\0"+
    "\1\157\1\21\1\312\5\21\13\0\1\21\1\0\11\21"+
    "\4\0\10\21\1\157\3\21\1\0\15\21\1\157\4\21"+
    "\2\0\1\157\4\0\2\21\6\0\2\21\4\0\2\21"+
    "\1\0\5\21\13\0\1\21\1\0\1\313\10\21\4\0"+
    "\14\21\1\0\22\21\2\0\1\21\4\0\2\21\16\0"+
    "\1\30\115\0\2\162\4\0\2\162\1\0\5\162\13\0"+
    "\1\162\1\0\11\162\3\0\1\314\14\162\1\0\22\162"+
    "\2\0\1\162\4\0\2\162\46\0\1\315\135\0\1\316"+
    "\64\0\1\317\166\0\1\320\111\0\1\321\127\0\1\322"+
    "\125\0\1\323\12\0\1\324\54\0\2\173\4\0\2\173"+
    "\1\0\5\173\13\0\1\173\1\0\11\173\3\0\1\325"+
    "\14\173\1\0\22\173\2\0\1\173\4\0\2\173\112\0"+
    "\1\174\21\0\2\21\4\0\2\21\1\0\5\21\13\0"+
    "\1\21\1\0\11\21\4\0\3\21\1\201\10\21\1\0"+
    "\22\21\2\0\1\21\4\0\2\21\26\0\1\30\104\0"+
    "\1\326\1\327\1\0\1\330\1\331\1\332\1\0\2\327"+
    "\1\0\5\327\13\0\1\327\1\0\11\327\4\0\10\327"+
    "\1\0\3\327\1\0\15\327\1\0\4\327\7\0\2\327"+
    "\6\0\2\21\4\0\2\21\1\0\5\21\13\0\1\21"+
    "\1\0\6\21\1\205\2\21\4\0\14\21\1\0\22\21"+
    "\2\0\1\21\4\0\2\21\6\0\2\21\4\0\2\21"+
    "\1\0\5\21\13\0\1\21\1\0\11\21\4\0\6\21"+
    "\1\333\5\21\1\0\22\21\2\0\1\21\4\0\2\21"+
    "\6\0\2\21\4\0\2\21\1\0\5\21\13\0\1\21"+
    "\1\0\3\21\1\216\5\21\4\0\14\21\1\0\22\21"+
    "\2\0\1\21\4\0\2\21\6\0\2\21\4\0\2\21"+
    "\1\0\5\21\13\0\1\21\1\0\11\21\4\0\1\21"+
    "\1\334\12\21\1\0\22\21\2\0\1\21\4\0\2\21"+
    "\6\0\2\21\4\0\2\21\1\0\5\21\13\0\1\21"+
    "\1\0\11\21\4\0\5\21\1\335\6\21\1\0\22\21"+
    "\2\0\1\21\4\0\2\21\6\0\2\21\4\0\2\21"+
    "\1\0\5\21\13\0\1\21\1\0\11\21\4\0\6\21"+
    "\1\336\5\21\1\0\22\21\2\0\1\21\4\0\2\21"+
    "\6\0\2\21\4\0\2\21\1\0\5\21\13\0\1\333"+
    "\1\0\11\21\4\0\14\21\1\0\22\21\2\0\1\21"+
    "\4\0\2\21\6\0\2\21\4\0\2\21\1\0\5\21"+
    "\13\0\1\21\1\0\1\21\1\201\7\21\4\0\14\21"+
    "\1\0\22\21\2\0\1\21\4\0\2\21\6\0\2\21"+
    "\4\0\2\21\1\0\5\21\13\0\1\21\1\0\10\21"+
    "\1\201\4\0\14\21\1\0\22\21\2\0\1\21\4\0"+
    "\2\21\6\0\2\21\4\0\2\21\1\0\5\21\13\0"+
    "\1\21\1\0\5\21\1\337\3\21\4\0\14\21\1\0"+
    "\22\21\2\0\1\21\4\0\2\21\6\0\2\21\4\0"+
    "\2\21\1\0\5\21\13\0\1\21\1\0\10\21\1\217"+
    "\4\0\14\21\1\0\22\21\2\0\1\21\4\0\2\21"+
    "\6\0\2\21\4\0\2\21\1\0\5\21\13\0\1\21"+
    "\1\0\6\21\1\340\2\21\4\0\14\21\1\0\22\21"+
    "\2\0\1\21\4\0\2\21\6\0\2\21\4\0\2\21"+
    "\1\0\5\21\13\0\1\21\1\0\11\21\4\0\3\21"+
    "\1\217\10\21\1\0\22\21\2\0\1\21\4\0\2\21"+
    "\6\0\2\21\4\0\2\21\1\0\5\21\13\0\1\21"+
    "\1\0\11\21\4\0\2\21\1\201\11\21\1\0\22\21"+
    "\2\0\1\21\4\0\2\21\6\0\2\21\4\0\2\21"+
    "\1\0\5\21\13\0\1\21\1\0\11\21\4\0\4\21"+
    "\1\341\7\21\1\0\22\21\2\0\1\21\4\0\2\21"+
    "\6\0\2\21\4\0\2\21\1\0\5\21\13\0\1\21"+
    "\1\0\1\21\1\342\2\21\1\343\4\21\4\0\2\21"+
    "\1\344\1\21\1\201\7\21\1\0\22\21\2\0\1\21"+
    "\4\0\2\21\6\0\2\21\4\0\2\21\1\0\5\21"+
    "\13\0\1\21\1\0\11\21\4\0\3\21\1\345\10\21"+
    "\1\0\22\21\2\0\1\21\4\0\2\21\6\0\2\21"+
    "\4\0\2\21\1\0\5\21\13\0\1\21\1\0\11\21"+
    "\4\0\1\21\1\346\12\21\1\0\22\21\2\0\1\21"+
    "\4\0\2\21\6\0\2\21\4\0\2\21\1\0\5\21"+
    "\13\0\1\21\1\0\11\21\4\0\3\21\1\333\10\21"+
    "\1\0\22\21\2\0\1\21\4\0\2\21\6\0\2\21"+
    "\4\0\2\21\1\0\5\21\13\0\1\21\1\0\11\21"+
    "\4\0\11\21\1\217\2\21\1\0\22\21\2\0\1\21"+
    "\4\0\2\21\6\0\2\21\4\0\2\21\1\0\5\21"+
    "\13\0\1\21\1\0\3\21\1\347\5\21\4\0\14\21"+
    "\1\0\22\21\2\0\1\21\4\0\2\21\6\0\2\21"+
    "\4\0\2\21\1\0\5\21\13\0\1\21\1\0\11\21"+
    "\4\0\14\21\1\0\22\21\2\0\1\21\4\0\1\21"+
    "\1\350\6\0\2\21\4\0\2\21\1\0\5\21\13\0"+
    "\1\21\1\0\1\21\1\351\7\21\4\0\14\21\1\0"+
    "\22\21\2\0\1\21\4\0\2\21\6\0\2\21\4\0"+
    "\2\21\1\0\5\21\13\0\1\21\1\0\3\21\1\217"+
    "\5\21\4\0\14\21\1\0\22\21\2\0\1\21\4\0"+
    "\2\21\6\0\2\236\4\0\2\236\1\0\5\236\13\0"+
    "\1\236\1\0\11\236\3\0\1\352\14\236\1\0\22\236"+
    "\2\0\1\236\4\0\2\236\17\0\1\353\3\237\1\354"+
    "\47\0\1\355\1\356\1\237\2\0\1\237\1\0\1\237"+
    "\1\357\1\237\1\360\1\361\1\237\1\0\4\237\17\0"+
    "\2\241\4\0\2\241\1\0\5\241\13\0\1\241\1\0"+
    "\11\241\3\0\1\362\14\241\1\0\22\241\2\0\1\241"+
    "\4\0\2\241\112\0\1\242\21\0\2\21\4\0\2\21"+
    "\1\0\5\21\13\0\1\21\1\0\11\21\4\0\5\21"+
    "\1\363\6\21\1\0\22\21\2\0\1\21\4\0\2\21"+
    "\2\0\2\104\1\105\64\104\1\364\36\104\4\0\1\107"+
    "\1\246\4\0\1\246\1\107\1\312\5\107\13\0\1\107"+
    "\1\0\11\107\4\0\10\107\1\246\3\107\1\0\15\107"+
    "\1\246\4\107\2\0\1\246\4\0\2\107\6\0\2\107"+
    "\4\0\2\107\1\0\5\107\13\0\1\107\1\0\1\365"+
    "\10\107\4\0\14\107\1\0\22\107\2\0\1\107\4\0"+
    "\2\107\6\0\2\107\4\0\2\107\1\0\5\107\13\0"+
    "\1\107\1\0\11\107\4\0\3\107\1\251\10\107\1\0"+
    "\22\107\2\0\1\107\4\0\2\107\6\0\2\107\4\0"+
    "\2\107\1\0\5\107\13\0\1\107\1\0\6\107\1\255"+
    "\2\107\4\0\14\107\1\0\22\107\2\0\1\107\4\0"+
    "\2\107\6\0\2\107\4\0\2\107\1\0\5\107\13\0"+
    "\1\107\1\0\11\107\4\0\6\107\1\366\5\107\1\0"+
    "\22\107\2\0\1\107\4\0\2\107\6\0\2\107\4\0"+
    "\2\107\1\0\5\107\13\0\1\107\1\0\3\107\1\266"+
    "\5\107\4\0\14\107\1\0\22\107\2\0\1\107\4\0"+
    "\2\107\6\0\2\107\4\0\2\107\1\0\5\107\13\0"+
    "\1\107\1\0\11\107\4\0\1\107\1\367\12\107\1\0"+
    "\22\107\2\0\1\107\4\0\2\107\6\0\2\107\4\0"+
    "\2\107\1\0\5\107\13\0\1\107\1\0\11\107\4\0"+
    "\5\107\1\370\6\107\1\0\22\107\2\0\1\107\4\0"+
    "\2\107\6\0\2\107\4\0\2\107\1\0\5\107\13\0"+
    "\1\107\1\0\11\107\4\0\6\107\1\371\5\107\1\0"+
    "\22\107\2\0\1\107\4\0\2\107\6\0\2\107\4\0"+
    "\2\107\1\0\5\107\13\0\1\366\1\0\11\107\4\0"+
    "\14\107\1\0\22\107\2\0\1\107\4\0\2\107\6\0"+
    "\2\107\4\0\2\107\1\0\5\107\13\0\1\107\1\0"+
    "\1\107\1\251\7\107\4\0\14\107\1\0\22\107\2\0"+
    "\1\107\4\0\2\107\6\0\2\107\4\0\2\107\1\0"+
    "\5\107\13\0\1\107\1\0\10\107\1\251\4\0\14\107"+
    "\1\0\22\107\2\0\1\107\4\0\2\107\6\0\2\107"+
    "\4\0\2\107\1\0\5\107\13\0\1\107\1\0\5\107"+
    "\1\372\3\107\4\0\14\107\1\0\22\107\2\0\1\107"+
    "\4\0\2\107\6\0\2\107\4\0\2\107\1\0\5\107"+
    "\13\0\1\107\1\0\10\107\1\267\4\0\14\107\1\0"+
    "\22\107\2\0\1\107\4\0\2\107\6\0\2\107\4\0"+
    "\2\107\1\0\5\107\13\0\1\107\1\0\6\107\1\373"+
    "\2\107\4\0\14\107\1\0\22\107\2\0\1\107\4\0"+
    "\2\107\6\0\2\107\4\0\2\107\1\0\5\107\13\0"+
    "\1\107\1\0\11\107\4\0\3\107\1\267\10\107\1\0"+
    "\22\107\2\0\1\107\4\0\2\107\6\0\2\107\4\0"+
    "\2\107\1\0\5\107\13\0\1\107\1\0\11\107\4\0"+
    "\2\107\1\251\11\107\1\0\22\107\2\0\1\107\4\0"+
    "\2\107\6\0\2\107\4\0\2\107\1\0\5\107\13\0"+
    "\1\107\1\0\11\107\4\0\4\107\1\374\7\107\1\0"+
    "\22\107\2\0\1\107\4\0\2\107\6\0\2\107\4\0"+
    "\2\107\1\0\5\107\13\0\1\107\1\0\1\107\1\375"+
    "\2\107\1\376\4\107\4\0\2\107\1\377\1\107\1\251"+
    "\7\107\1\0\22\107\2\0\1\107\4\0\2\107\6\0"+
    "\2\107\4\0\2\107\1\0\5\107\13\0\1\107\1\0"+
    "\11\107\4\0\3\107\1\u0100\10\107\1\0\22\107\2\0"+
    "\1\107\4\0\2\107\6\0\2\107\4\0\2\107\1\0"+
    "\5\107\13\0\1\107\1\0\11\107\4\0\1\107\1\u0101"+
    "\12\107\1\0\22\107\2\0\1\107\4\0\2\107\6\0"+
    "\2\107\4\0\2\107\1\0\5\107\13\0\1\107\1\0"+
    "\11\107\4\0\3\107\1\366\10\107\1\0\22\107\2\0"+
    "\1\107\4\0\2\107\6\0\2\107\4\0\2\107\1\0"+
    "\5\107\13\0\1\107\1\0\11\107\4\0\11\107\1\267"+
    "\2\107\1\0\22\107\2\0\1\107\4\0\2\107\6\0"+
    "\2\107\4\0\2\107\1\0\5\107\13\0\1\107\1\0"+
    "\3\107\1\u0102\5\107\4\0\14\107\1\0\22\107\2\0"+
    "\1\107\4\0\2\107\6\0\2\107\4\0\2\107\1\0"+
    "\5\107\13\0\1\107\1\0\11\107\4\0\14\107\1\0"+
    "\22\107\2\0\1\107\4\0\1\107\1\u0103\6\0\2\107"+
    "\4\0\2\107\1\0\5\107\13\0\1\107\1\0\1\107"+
    "\1\u0104\7\107\4\0\14\107\1\0\22\107\2\0\1\107"+
    "\4\0\2\107\6\0\2\107\4\0\2\107\1\0\5\107"+
    "\13\0\1\107\1\0\3\107\1\267\5\107\4\0\14\107"+
    "\1\0\22\107\2\0\1\107\4\0\2\107\6\0\2\107"+
    "\4\0\2\107\1\0\5\107\13\0\1\107\1\0\11\107"+
    "\4\0\5\107\1\u0105\6\107\1\0\22\107\2\0\1\107"+
    "\4\0\2\107\7\0\1\306\4\0\1\306\1\0\1\312"+
    "\47\0\1\306\21\0\1\306\6\0\1\306\14\0\2\21"+
    "\4\0\2\21\1\0\1\21\1\u0106\3\21\13\0\1\21"+
    "\1\0\11\21\4\0\14\21\1\0\22\21\2\0\1\21"+
    "\4\0\2\21\6\0\2\21\4\0\2\21\1\0\3\21"+
    "\1\u0107\1\21\13\0\1\21\1\0\11\21\4\0\14\21"+
    "\1\0\22\21\2\0\1\21\4\0\2\21\7\0\1\306"+
    "\56\0\1\306\21\0\1\306\6\0\1\306\14\0\2\21"+
    "\4\0\2\21\1\0\5\21\13\0\1\21\1\0\11\21"+
    "\4\0\13\21\1\u0108\1\0\22\21\2\0\1\21\4\0"+
    "\2\21\55\0\1\u0109\117\0\1\u010a\10\0\1\u010b\125\0"+
    "\1\u010b\111\0\1\320\142\0\1\u010b\110\0\1\u010c\140\0"+
    "\1\u010d\111\0\1\u010e\131\0\1\u010f\133\0\1\u0110\56\0"+
    "\2\327\4\0\2\327\1\0\5\327\13\0\1\327\1\0"+
    "\11\327\4\0\14\327\1\0\22\327\2\0\1\327\4\0"+
    "\2\327\6\0\1\u0111\5\0\2\u0111\1\0\5\u0111\13\0"+
    "\1\u0111\1\0\11\u0111\4\0\10\u0111\1\0\3\u0111\1\0"+
    "\15\u0111\1\0\4\u0111\7\0\2\u0111\6\0\1\u0112\5\0"+
    "\2\u0112\1\0\5\u0112\13\0\1\u0112\1\0\11\u0112\4\0"+
    "\10\u0112\1\0\3\u0112\1\0\15\u0112\1\0\4\u0112\7\0"+
    "\2\u0112\6\0\1\u0113\5\0\2\u0113\1\0\5\u0113\13\0"+
    "\1\u0113\1\0\11\u0113\4\0\10\u0113\1\0\3\u0113\1\0"+
    "\15\u0113\1\0\4\u0113\7\0\2\u0113\6\0\2\21\4\0"+
    "\2\21\1\0\5\21\13\0\1\21\1\0\1\21\1\217"+
    "\7\21\4\0\14\21\1\0\22\21\2\0\1\21\4\0"+
    "\2\21\6\0\2\21\4\0\2\21\1\0\5\21\13\0"+
    "\1\21\1\0\1\217\10\21\4\0\14\21\1\0\22\21"+
    "\2\0\1\21\4\0\2\21\6\0\2\21\4\0\2\21"+
    "\1\0\5\21\13\0\1\21\1\0\1\21\1\217\7\21"+
    "\4\0\6\21\1\u0114\5\21\1\0\22\21\2\0\1\21"+
    "\4\0\2\21\6\0\2\21\4\0\2\21\1\0\5\21"+
    "\13\0\1\21\1\0\3\21\1\217\5\21\4\0\5\21"+
    "\1\64\6\21\1\0\22\21\2\0\1\21\4\0\2\21"+
    "\6\0\2\21\4\0\2\21\1\0\5\21\13\0\1\21"+
    "\1\0\1\21\1\u0115\7\21\4\0\14\21\1\0\22\21"+
    "\2\0\1\21\4\0\2\21\6\0\2\21\4\0\2\21"+
    "\1\0\5\21\13\0\1\21\1\0\11\21\4\0\12\21"+
    "\1\u0116\1\21\1\0\22\21\2\0\1\21\4\0\2\21"+
    "\6\0\2\21\4\0\2\21\1\0\5\21\13\0\1\21"+
    "\1\0\11\21\4\0\5\21\1\u0117\6\21\1\0\22\21"+
    "\2\0\1\21\4\0\2\21\6\0\2\21\4\0\2\21"+
    "\1\0\5\21\13\0\1\21\1\0\11\21\4\0\13\21"+
    "\1\u0118\1\0\22\21\2\0\1\21\4\0\2\21\6\0"+
    "\2\21\4\0\2\21\1\0\5\21\13\0\1\21\1\0"+
    "\11\21\4\0\13\21\1\u0119\1\0\22\21\2\0\1\21"+
    "\4\0\2\21\6\0\2\21\4\0\2\21\1\0\5\21"+
    "\13\0\1\21\1\0\11\21\4\0\1\217\13\21\1\0"+
    "\22\21\2\0\1\21\4\0\2\21\6\0\2\21\4\0"+
    "\2\21\1\0\5\21\13\0\1\21\1\0\3\21\1\u011a"+
    "\5\21\4\0\14\21\1\0\22\21\2\0\1\21\4\0"+
    "\2\21\6\0\2\21\4\0\2\21\1\0\5\21\13\0"+
    "\1\21\1\0\1\u011b\10\21\4\0\14\21\1\0\22\21"+
    "\2\0\1\21\4\0\2\21\6\0\2\21\4\0\2\21"+
    "\1\0\5\21\13\0\1\21\1\0\11\21\4\0\1\21"+
    "\1\u011c\12\21\1\0\22\21\2\0\1\21\4\0\2\21"+
    "\6\0\2\21\4\0\2\21\1\0\5\21\13\0\1\21"+
    "\1\0\11\21\4\0\6\21\1\217\5\21\1\0\22\21"+
    "\2\0\1\21\4\0\2\21\6\0\2\21\4\0\2\21"+
    "\1\0\5\21\13\0\1\21\1\0\11\21\4\0\5\21"+
    "\1\334\6\21\1\0\22\21\2\0\1\21\4\0\2\21"+
    "\55\0\1\u011d\70\0\1\u011e\127\0\1\u011f\125\0\1\u0120"+
    "\52\0\1\u0121\47\0\1\u0122\220\0\1\u0123\33\0\1\u0124"+
    "\2\0\1\u0125\216\0\1\u0126\66\0\1\u0127\56\0\2\21"+
    "\4\0\2\21\1\0\5\21\13\0\1\21\1\0\1\235"+
    "\10\21\4\0\14\21\1\0\22\21\2\0\1\21\4\0"+
    "\2\21\2\0\2\104\1\105\35\104\1\u0128\65\104\4\0"+
    "\2\107\4\0\2\107\1\0\5\107\13\0\1\107\1\0"+
    "\11\107\4\0\13\107\1\u0129\1\0\22\107\2\0\1\107"+
    "\4\0\2\107\6\0\2\107\4\0\2\107\1\0\5\107"+
    "\13\0\1\107\1\0\1\107\1\267\7\107\4\0\14\107"+
    "\1\0\22\107\2\0\1\107\4\0\2\107\6\0\2\107"+
    "\4\0\2\107\1\0\5\107\13\0\1\107\1\0\1\267"+
    "\10\107\4\0\14\107\1\0\22\107\2\0\1\107\4\0"+
    "\2\107\6\0\2\107\4\0\2\107\1\0\5\107\13\0"+
    "\1\107\1\0\1\107\1\267\7\107\4\0\6\107\1\u012a"+
    "\5\107\1\0\22\107\2\0\1\107\4\0\2\107\6\0"+
    "\2\107\4\0\2\107\1\0\5\107\13\0\1\107\1\0"+
    "\3\107\1\267\5\107\4\0\5\107\1\131\6\107\1\0"+
    "\22\107\2\0\1\107\4\0\2\107\6\0\2\107\4\0"+
    "\2\107\1\0\5\107\13\0\1\107\1\0\1\107\1\u012b"+
    "\7\107\4\0\14\107\1\0\22\107\2\0\1\107\4\0"+
    "\2\107\6\0\2\107\4\0\2\107\1\0\5\107\13\0"+
    "\1\107\1\0\11\107\4\0\12\107\1\u012c\1\107\1\0"+
    "\22\107\2\0\1\107\4\0\2\107\6\0\2\107\4\0"+
    "\2\107\1\0\5\107\13\0\1\107\1\0\11\107\4\0"+
    "\5\107\1\u012d\6\107\1\0\22\107\2\0\1\107\4\0"+
    "\2\107\6\0\2\107\4\0\2\107\1\0\5\107\13\0"+
    "\1\107\1\0\11\107\4\0\13\107\1\u012e\1\0\22\107"+
    "\2\0\1\107\4\0\2\107\6\0\2\107\4\0\2\107"+
    "\1\0\5\107\13\0\1\107\1\0\11\107\4\0\13\107"+
    "\1\u012f\1\0\22\107\2\0\1\107\4\0\2\107\6\0"+
    "\2\107\4\0\2\107\1\0\5\107\13\0\1\107\1\0"+
    "\11\107\4\0\1\267\13\107\1\0\22\107\2\0\1\107"+
    "\4\0\2\107\6\0\2\107\4\0\2\107\1\0\5\107"+
    "\13\0\1\107\1\0\3\107\1\u0130\5\107\4\0\14\107"+
    "\1\0\22\107\2\0\1\107\4\0\2\107\6\0\2\107"+
    "\4\0\2\107\1\0\5\107\13\0\1\107\1\0\1\u0131"+
    "\10\107\4\0\14\107\1\0\22\107\2\0\1\107\4\0"+
    "\2\107\6\0\2\107\4\0\2\107\1\0\5\107\13\0"+
    "\1\107\1\0\11\107\4\0\1\107\1\u0132\12\107\1\0"+
    "\22\107\2\0\1\107\4\0\2\107\6\0\2\107\4\0"+
    "\2\107\1\0\5\107\13\0\1\107\1\0\11\107\4\0"+
    "\6\107\1\267\5\107\1\0\22\107\2\0\1\107\4\0"+
    "\2\107\6\0\2\107\4\0\2\107\1\0\5\107\13\0"+
    "\1\107\1\0\11\107\4\0\5\107\1\367\6\107\1\0"+
    "\22\107\2\0\1\107\4\0\2\107\6\0\2\107\4\0"+
    "\2\107\1\0\5\107\13\0\1\107\1\0\1\304\10\107"+
    "\4\0\14\107\1\0\22\107\2\0\1\107\4\0\2\107"+
    "\6\0\2\21\4\0\2\21\1\0\2\21\1\u0133\2\21"+
    "\13\0\1\21\1\0\11\21\4\0\14\21\1\0\22\21"+
    "\2\0\1\21\4\0\2\21\6\0\2\21\4\0\2\21"+
    "\1\0\4\21\1\u0134\13\0\1\21\1\0\11\21\4\0"+
    "\14\21\1\0\22\21\2\0\1\21\4\0\2\21\6\0"+
    "\2\21\4\0\2\21\1\0\5\21\13\0\1\21\1\0"+
    "\3\21\1\350\5\21\4\0\14\21\1\0\22\21\2\0"+
    "\1\21\4\0\2\21\6\0\1\162\5\0\2\162\1\0"+
    "\5\162\13\0\1\162\1\0\11\162\4\0\10\162\1\0"+
    "\3\162\1\0\15\162\1\0\4\162\7\0\2\162\56\0"+
    "\1\u0135\51\0\2\u010b\1\u0136\123\u010b\46\0\1\u010b\135\0"+
    "\1\u0137\130\0\1\u0138\132\0\1\u010b\43\0\1\173\5\0"+
    "\2\173\1\0\5\173\13\0\1\173\1\0\11\173\4\0"+
    "\10\173\1\0\3\173\1\0\15\173\1\0\4\173\7\0"+
    "\2\173\6\0\2\u0111\1\u0139\3\0\2\u0111\1\0\5\u0111"+
    "\13\0\1\u0111\1\0\11\u0111\4\0\14\u0111\1\0\22\u0111"+
    "\2\0\1\u0111\4\0\2\u0111\6\0\2\u0112\1\0\1\u0139"+
    "\2\0\2\u0112\1\0\5\u0112\13\0\1\u0112\1\0\11\u0112"+
    "\4\0\14\u0112\1\0\22\u0112\2\0\1\u0112\4\0\2\u0112"+
    "\6\0\2\u0113\2\0\1\u0139\1\0\2\u0113\1\0\5\u0113"+
    "\13\0\1\u0113\1\0\11\u0113\4\0\14\u0113\1\0\22\u0113"+
    "\2\0\1\u0113\4\0\2\u0113\6\0\2\21\4\0\2\21"+
    "\1\0\5\21\13\0\1\21\1\0\1\21\1\u013a\7\21"+
    "\4\0\14\21\1\0\22\21\2\0\1\21\4\0\2\21"+
    "\6\0\2\21\4\0\2\21\1\0\5\21\13\0\1\21"+
    "\1\0\11\21\4\0\5\21\1\u013b\6\21\1\0\22\21"+
    "\2\0\1\21\4\0\2\21\6\0\2\21\4\0\2\21"+
    "\1\0\5\21\13\0\1\21\1\0\11\21\4\0\1\21"+
    "\1\u013c\12\21\1\0\22\21\2\0\1\21\4\0\2\21"+
    "\6\0\2\21\4\0\2\21\1\0\5\21\13\0\1\21"+
    "\1\0\5\21\1\u013d\3\21\4\0\14\21\1\0\22\21"+
    "\2\0\1\21\4\0\2\21\6\0\2\21\4\0\2\21"+
    "\1\0\5\21\13\0\1\21\1\0\11\21\4\0\3\21"+
    "\1\u013e\10\21\1\0\22\21\2\0\1\21\4\0\2\21"+
    "\6\0\2\21\4\0\2\21\1\0\5\21\13\0\1\21"+
    "\1\0\11\21\4\0\5\21\1\u013f\6\21\1\0\22\21"+
    "\2\0\1\21\4\0\2\21\6\0\2\21\4\0\2\21"+
    "\1\0\5\21\13\0\1\21\1\0\11\21\4\0\1\21"+
    "\1\u0140\12\21\1\0\22\21\2\0\1\21\4\0\2\21"+
    "\6\0\2\21\4\0\2\21\1\0\5\21\13\0\1\21"+
    "\1\0\11\21\4\0\1\21\1\176\12\21\1\0\22\21"+
    "\2\0\1\21\4\0\2\21\6\0\2\21\4\0\2\21"+
    "\1\0\5\21\13\0\1\21\1\0\11\21\4\0\12\21"+
    "\1\217\1\21\1\0\22\21\2\0\1\21\4\0\2\21"+
    "\6\0\1\236\5\0\2\236\1\0\5\236\13\0\1\236"+
    "\1\0\11\236\4\0\10\236\1\0\3\236\1\0\15\236"+
    "\1\0\4\236\7\0\2\236\103\0\1\u0141\117\0\1\u0142"+
    "\124\0\1\u0143\52\0\1\u0144\120\0\1\u0145\206\0\1\u0146"+
    "\125\0\1\u0147\137\0\1\u0148\35\0\1\u0149\114\0\1\241"+
    "\5\0\2\241\1\0\5\241\13\0\1\241\1\0\11\241"+
    "\4\0\10\241\1\0\3\241\1\0\15\241\1\0\4\241"+
    "\7\0\2\241\2\0\2\u0128\1\u014a\123\u0128\4\0\2\107"+
    "\4\0\2\107\1\0\5\107\13\0\1\107\1\0\3\107"+
    "\1\u0103\5\107\4\0\14\107\1\0\22\107\2\0\1\107"+
    "\4\0\2\107\6\0\2\107\4\0\2\107\1\0\5\107"+
    "\13\0\1\107\1\0\1\107\1\u014b\7\107\4\0\14\107"+
    "\1\0\22\107\2\0\1\107\4\0\2\107\6\0\2\107"+
    "\4\0\2\107\1\0\5\107\13\0\1\107\1\0\11\107"+
    "\4\0\5\107\1\u014c\6\107\1\0\22\107\2\0\1\107"+
    "\4\0\2\107\6\0\2\107\4\0\2\107\1\0\5\107"+
    "\13\0\1\107\1\0\11\107\4\0\1\107\1\u014d\12\107"+
    "\1\0\22\107\2\0\1\107\4\0\2\107\6\0\2\107"+
    "\4\0\2\107\1\0\5\107\13\0\1\107\1\0\5\107"+
    "\1\u014e\3\107\4\0\14\107\1\0\22\107\2\0\1\107"+
    "\4\0\2\107\6\0\2\107\4\0\2\107\1\0\5\107"+
    "\13\0\1\107\1\0\11\107\4\0\3\107\1\u014f\10\107"+
    "\1\0\22\107\2\0\1\107\4\0\2\107\6\0\2\107"+
    "\4\0\2\107\1\0\5\107\13\0\1\107\1\0\11\107"+
    "\4\0\5\107\1\u0150\6\107\1\0\22\107\2\0\1\107"+
    "\4\0\2\107\6\0\2\107\4\0\2\107\1\0\5\107"+
    "\13\0\1\107\1\0\11\107\4\0\1\107\1\u0151\12\107"+
    "\1\0\22\107\2\0\1\107\4\0\2\107\6\0\2\107"+
    "\4\0\2\107\1\0\5\107\13\0\1\107\1\0\11\107"+
    "\4\0\1\107\1\250\12\107\1\0\22\107\2\0\1\107"+
    "\4\0\2\107\6\0\2\107\4\0\2\107\1\0\5\107"+
    "\13\0\1\107\1\0\11\107\4\0\12\107\1\267\1\107"+
    "\1\0\22\107\2\0\1\107\4\0\2\107\6\0\2\21"+
    "\4\0\1\u0152\1\21\1\0\5\21\13\0\1\21\1\0"+
    "\11\21\4\0\14\21\1\0\22\21\2\0\1\21\4\0"+
    "\2\21\6\0\2\21\4\0\2\21\1\0\3\21\1\u0133"+
    "\1\21\13\0\1\21\1\0\11\21\4\0\14\21\1\0"+
    "\22\21\2\0\1\21\4\0\2\21\60\0\1\u0153\133\0"+
    "\1\u010b\105\0\1\u010b\65\0\2\21\4\0\2\21\1\0"+
    "\5\21\13\0\1\21\1\0\11\21\4\0\6\21\1\201"+
    "\5\21\1\0\22\21\2\0\1\21\4\0\2\21\6\0"+
    "\2\21\4\0\2\21\1\0\5\21\13\0\1\21\1\0"+
    "\5\21\1\u0154\3\21\4\0\14\21\1\0\22\21\2\0"+
    "\1\21\4\0\2\21\6\0\2\21\4\0\2\21\1\0"+
    "\5\21\13\0\1\21\1\0\2\21\1\235\6\21\4\0"+
    "\14\21\1\0\22\21\2\0\1\21\4\0\2\21\6\0"+
    "\2\21\4\0\2\21\1\0\5\21\13\0\1\21\1\0"+
    "\3\21\1\223\5\21\4\0\14\21\1\0\22\21\2\0"+
    "\1\21\4\0\2\21\6\0\2\21\4\0\2\21\1\0"+
    "\5\21\13\0\1\21\1\0\5\21\1\217\3\21\4\0"+
    "\14\21\1\0\22\21\2\0\1\21\4\0\2\21\6\0"+
    "\2\21\4\0\2\21\1\0\5\21\13\0\1\21\1\0"+
    "\11\21\4\0\3\21\1\235\10\21\1\0\22\21\2\0"+
    "\1\21\4\0\2\21\6\0\2\21\4\0\2\21\1\0"+
    "\5\21\13\0\1\21\1\0\6\21\1\u0155\2\21\4\0"+
    "\14\21\1\0\22\21\2\0\1\21\4\0\2\21\106\0"+
    "\1\u0156\37\0\1\u0157\125\0\1\u0158\124\0\1\u0159\127\0"+
    "\1\u015a\1\0\1\u015b\206\0\1\u015c\124\0\1\u015d\132\0"+
    "\1\u015e\35\0\1\237\113\0\2\107\4\0\2\107\1\0"+
    "\5\107\13\0\1\107\1\0\11\107\4\0\6\107\1\251"+
    "\5\107\1\0\22\107\2\0\1\107\4\0\2\107\6\0"+
    "\2\107\4\0\2\107\1\0\5\107\13\0\1\107\1\0"+
    "\5\107\1\u015f\3\107\4\0\14\107\1\0\22\107\2\0"+
    "\1\107\4\0\2\107\6\0\2\107\4\0\2\107\1\0"+
    "\5\107\13\0\1\107\1\0\2\107\1\304\6\107\4\0"+
    "\14\107\1\0\22\107\2\0\1\107\4\0\2\107\6\0"+
    "\2\107\4\0\2\107\1\0\5\107\13\0\1\107\1\0"+
    "\3\107\1\272\5\107\4\0\14\107\1\0\22\107\2\0"+
    "\1\107\4\0\2\107\6\0\2\107\4\0\2\107\1\0"+
    "\5\107\13\0\1\107\1\0\5\107\1\267\3\107\4\0"+
    "\14\107\1\0\22\107\2\0\1\107\4\0\2\107\6\0"+
    "\2\107\4\0\2\107\1\0\5\107\13\0\1\107\1\0"+
    "\11\107\4\0\3\107\1\304\10\107\1\0\22\107\2\0"+
    "\1\107\4\0\2\107\6\0\2\107\4\0\2\107\1\0"+
    "\5\107\13\0\1\107\1\0\6\107\1\u0160\2\107\4\0"+
    "\14\107\1\0\22\107\2\0\1\107\4\0\2\107\6\0"+
    "\2\21\4\0\1\u0161\1\21\1\0\5\21\13\0\1\21"+
    "\1\0\11\21\4\0\14\21\1\0\22\21\2\0\1\21"+
    "\4\0\2\21\63\0\1\u0162\50\0\2\21\4\0\2\21"+
    "\1\0\5\21\13\0\1\21\1\0\11\21\4\0\13\21"+
    "\1\363\1\0\22\21\2\0\1\21\4\0\2\21\6\0"+
    "\2\21\4\0\2\21\1\0\5\21\13\0\1\21\1\0"+
    "\11\21\4\0\7\21\1\217\4\21\1\0\22\21\2\0"+
    "\1\21\4\0\2\21\21\0\1\u0163\127\0\1\237\177\0"+
    "\1\u0164\44\0\1\u0165\130\0\1\u0166\202\0\1\u0167\52\0"+
    "\1\u0168\212\0\1\u0169\123\0\1\u016a\27\0\2\107\4\0"+
    "\2\107\1\0\5\107\13\0\1\107\1\0\11\107\4\0"+
    "\13\107\1\u0105\1\0\22\107\2\0\1\107\4\0\2\107"+
    "\6\0\2\107\4\0\2\107\1\0\5\107\13\0\1\107"+
    "\1\0\11\107\4\0\7\107\1\267\4\107\1\0\22\107"+
    "\2\0\1\107\4\0\2\107\46\0\1\u016b\154\0\1\u016c"+
    "\50\0\1\u016d\205\0\1\u016e\124\0\1\u016f\123\0\1\u0170"+
    "\44\0\1\u0171\132\0\1\u0172\212\0\1\u0173\62\0\1\u010b"+
    "\102\0\1\u0174\203\0\1\u0175\130\0\1\u0176\131\0\1\u0177"+
    "\37\0\1\u0178\125\0\1\u0179\125\0\1\237\211\0\1\u017a"+
    "\120\0\1\237\43\0\1\u017b\211\0\1\u017c\123\0\1\u017d"+
    "\43\0\1\u017e\205\0\1\u017f\53\0\1\u0180\202\0\1\u0181"+
    "\51\0\1\u0182\116\0\1\u0183\213\0\1\u0184\117\0\1\u0185"+
    "\135\0\1\u0172\116\0\1\u0186\47\0\1\u0187\215\0\1\u0188"+
    "\40\0\1\u0189\211\0\1\u018a\42\0\1\u018b\204\0\1\u018c"+
    "\127\0\1\u018d\132\0\1\u018e\110\0\1\u018f\131\0\1\237"+
    "\41\0\1\u0190\133\0\1\u0191\202\0\1\u0192\42\0\1\u0193"+
    "\214\0\1\u0194\120\0\1\u018b\134\0\1\u0195\40\0\1\u0196"+
    "\127\0\1\u0197\212\0\1\237\40\0\1\u0198\207\0\1\u0199"+
    "\44\0\1\u019a\206\0\1\u018b\116\0\1\u019b\143\0\1\u0172"+
    "\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[32078];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\1\2\0\2\1\5\0\1\11\1\1\1\11"+
    "\3\1\1\11\4\1\1\11\41\1\3\11\1\1\2\11"+
    "\1\1\3\11\1\1\1\11\34\1\2\11\1\1\1\11"+
    "\1\1\2\11\1\1\1\11\1\0\1\11\1\1\1\0"+
    "\4\1\1\11\7\0\1\1\1\11\1\0\23\1\1\11"+
    "\15\1\1\11\2\1\1\11\1\0\46\1\1\0\1\1"+
    "\13\0\1\1\3\0\17\1\1\0\5\1\1\0\1\1"+
    "\1\0\26\1\2\0\1\1\10\0\11\1\13\0\15\1"+
    "\1\0\1\11\2\0\1\11\7\1\11\0\1\11\10\1"+
    "\1\0\2\1\11\0\3\1\72\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[411];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    public void setTokenStart(int position){zzCurrentPos = zzStartRead = position;}
    public int getNextTokenStart(){ return zzMarkedPos;}
    public boolean isLastToken(){ return zzMarkedPos == zzEndRead; }
    public void setState(int newState){ zzLexicalState = newState; }

    public void yybegin_YYINITIAL(){yybegin(YYINITIAL);}


    public void yybegin_LEX_EOF(){yybegin(LEX_EOF);}
    public void yybegin_LEX_POD(){yybegin(LEX_POD);}

    public boolean yystate_LEX_MULTILINE_WAITING(){return yystate() == LEX_MULTILINE_WAITING;}

    public void yybegin_LEX_MULTILINE(){yybegin(LEX_MULTILINE);}
    public void yybegin_LEX_MULTILINE_TOKEN(){yybegin(LEX_MULTILINE_TOKEN);}
    public void yybegin_LEX_MULTILINE_WAITING(){yybegin(LEX_MULTILINE_WAITING);}
    public void yybegin_LEX_QUOTE_LIKE_CHARS(){yybegin(LEX_QUOTE_LIKE_CHARS);}
    public void yybegin_LEX_QUOTE_LIKE_OPENER(){yybegin(LEX_QUOTE_LIKE_OPENER);}
    public void yybegin_LEX_QUOTE_LIKE_CLOSER(){yybegin(LEX_QUOTE_LIKE_CLOSER);}
    public void yybegin_LEX_QUOTE_LIKE_WORDS(){yybegin(LEX_QUOTE_LIKE_WORDS);}
    public void yybegin_LEX_QUOTE_LIKE_LIST_OPENER(){yybegin(LEX_QUOTE_LIKE_LIST_OPENER);}
    public void yybegin_LEX_QUOTE_LIKE_LIST_CLOSER(){yybegin(LEX_QUOTE_LIKE_LIST_CLOSER);}


  public PerlLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PerlLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 200) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 41: 
          { return PERL_ARRAY;
          }
        case 46: break;
        case 10: 
          { return processStringOpener();
          }
        case 47: break;
        case 43: 
          { processPodOpener();break;
          }
        case 48: break;
        case 31: 
          { IElementType type = processQuoteLikeListQuote();
            if( type == null ) // disallowed sharp
                break;
            return type;
          }
        case 49: break;
        case 12: 
          { return PERL_NUMBER;
          }
        case 50: break;
        case 45: 
          { processDataOpener(); break;
          }
        case 51: break;
        case 13: 
          { return PERL_OPERATOR;
          }
        case 52: break;
        case 7: 
          { return TokenType.WHITE_SPACE;
          }
        case 53: break;
        case 36: 
          { return PERL_HASH;
          }
        case 54: break;
        case 15: 
          { return processQuoteLikeStringOpener();
          }
        case 55: break;
        case 33: 
          { IElementType tokenType = processQuoteLikeWord();
          if( tokenType != null )
                return tokenType;
          break;
          }
        case 56: break;
        case 37: 
          { return processQuoteLikeListOpener();
          }
        case 57: break;
        case 28: 
          { return processQuoteLikeStringSpace();
          }
        case 58: break;
        case 2: 
          { if( isLastToken() )
        {
            endPodBlock();
        }
        break;
          }
        case 59: break;
        case 38: 
          { return PERL_KEYWORD;
          }
        case 60: break;
        case 19: 
          { return processSemicolon();
          }
        case 61: break;
        case 26: 
          { if( isLastToken() )
        {
            return endMultiline();
        }
        break;
          }
        case 62: break;
        case 34: 
          { return PERL_GLOB;
          }
        case 63: break;
        case 1: 
          { if( isLastToken() )
            return endDataBlock();
        break;
          }
        case 64: break;
        case 39: 
          { return PERL_DEPACKAGE;
          }
        case 65: break;
        case 11: 
          { return PERL_COMMENT;
          }
        case 66: break;
        case 25: 
          { yybegin(YYINITIAL); return PERL_STRING_CONTENT;
          }
        case 67: break;
        case 42: 
          { return processMultilineOpener();
          }
        case 68: break;
        case 6: 
          { return processNewLine();
          }
        case 69: break;
        case 9: 
          { return PERL_NUMBER_VERSION;
          }
        case 70: break;
        case 17: 
          { return PERL_LPAREN;
          }
        case 71: break;
        case 14: 
          { return PERL_SIGIL_HASH;
          }
        case 72: break;
        case 29: 
          { IElementType tokenType = processQuoteLikeChar();
          if( tokenType != null )
                return tokenType;
          break;
          }
        case 73: break;
        case 5: 
          { return TokenType.BAD_CHARACTER;
          }
        case 74: break;
        case 40: 
          { return PERL_SCALAR;
          }
        case 75: break;
        case 18: 
          { return PERL_RPAREN;
          }
        case 76: break;
        case 16: 
          { return PERL_SIGIL_SCALAR;
          }
        case 77: break;
        case 20: 
          { return PERL_SIGIL_ARRAY;
          }
        case 78: break;
        case 4: 
          { yybegin(YYINITIAL);return PERL_STRING_MULTILINE_END;
          }
        case 79: break;
        case 3: 
          { if( isMultilineEnd() || isLastToken())
        {
            return endMultiline();
        }
        break;
          }
        case 80: break;
        case 27: 
          { IElementType type = processQuoteLikeQuote();
            if( type == null ) // disallowed sharp
                break;
            return type;
          }
        case 81: break;
        case 35: 
          { return PERL_ARROW_COMMA;
          }
        case 82: break;
        case 23: 
          { return PERL_LBRACE;
          }
        case 83: break;
        case 32: 
          { return processQuoteLikeListSpace();
          }
        case 84: break;
        case 24: 
          { return PERL_RBRACE;
          }
        case 85: break;
        case 8: 
          { return PERL_BAREWORD;
          }
        case 86: break;
        case 30: 
          { popState(); return PERL_QUOTE;
          }
        case 87: break;
        case 44: 
          { return endPodBlock();
          }
        case 88: break;
        case 22: 
          { return PERL_RBRACK;
          }
        case 89: break;
        case 21: 
          { return PERL_LBRACK;
          }
        case 90: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
