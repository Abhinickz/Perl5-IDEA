/* The following code was generated by JFlex 1.4.3 on 30.04.15 22:31 */

package com.perl5.lang.perl.lexer;

/*
    http://jflex.de/manual.html
    http://www2.cs.tum.edu/projects/cup

*/

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import org.jetbrains.annotations.NotNull;
import com.perl5.lang.perl.util.PerlFunctionUtil;
import com.perl5.lang.perl.util.PerlScalarUtil;
import com.perl5.lang.perl.util.PerlHashUtil;
import com.perl5.lang.perl.util.PerlGlobUtil;
import com.perl5.lang.perl.util.PerlArrayUtil;
import com.perl5.lang.perl.util.PerlPackageUtil;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 30.04.15 22:31 from the specification file
 * <tt>C:/Repository/Perl5-IDEA/src/com/perl5/lang/perl/lexer/Perl.flex</tt>
 */
public class PerlLexer extends PerlLexerProto implements FlexLexer, PerlElementTypes {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int LEX_POD = 10;
  public static final int LEX_PACKAGE_USE_PARAMS = 20;
  public static final int LEX_MULTILINE = 14;
  public static final int LEX_DEREFERENCE = 34;
  public static final int LEX_MULTILINE_WAITING = 12;
  public static final int LEX_QUOTE_LIKE_CHARS = 28;
  public static final int LEX_PACKAGE_DEFINITION = 2;
  public static final int LEX_FUNCTION_DEFINITION = 32;
  public static final int LEX_PACKAGE_USE_VERSION = 22;
  public static final int LEX_PACKAGE_DEFINITION_VERSION = 4;
  public static final int LEX_QUOTE_LIKE_OPENER = 26;
  public static final int LEX_PACKAGE_DEFINITION_BLOCK = 6;
  public static final int LEX_PACKAGE_USE = 18;
  public static final int LEX_QUOTE_LIKE_CLOSER = 30;
  public static final int LEX_REQUIRE = 24;
  public static final int LEX_EOF = 8;
  public static final int YYINITIAL = 0;
  public static final int LEX_MULTILINE_TOKEN = 16;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16,  6, 6
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\60\1\20\1\57"+
    "\1\115\1\71\1\25\1\42\1\61\1\116\1\117\1\17\1\15\1\120"+
    "\1\16\1\45\1\24\1\5\1\64\1\64\1\64\1\64\3\5\1\110"+
    "\1\5\1\47\1\4\1\27\1\23\1\30\1\46\1\72\1\13\1\77"+
    "\1\103\1\12\1\10\1\107\1\76\1\112\1\75\2\6\1\104\1\102"+
    "\1\11\1\106\1\114\1\6\1\74\1\100\1\14\1\105\1\113\1\73"+
    "\1\111\1\101\1\6\1\121\1\22\1\122\1\44\1\7\1\62\1\51"+
    "\1\66\1\37\1\52\1\34\1\54\1\33\1\63\1\55\1\6\1\67"+
    "\1\31\1\40\1\36\1\50\1\41\1\35\1\53\1\56\1\32\1\70"+
    "\1\65\1\124\1\26\1\123\1\6\1\125\1\43\1\126\1\21\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\3\1\1\2\1\3\1\0\1\4\1\5\10\0"+
    "\2\6\1\7\1\1\1\10\1\11\1\12\1\11\10\13"+
    "\1\14\3\13\3\12\1\15\4\12\2\13\1\6\1\13"+
    "\5\12\3\6\3\12\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\2\30\2\1\1\31"+
    "\2\32\1\33\1\32\1\34\2\35\1\2\3\3\1\13"+
    "\3\12\2\4\1\36\2\37\1\40\2\41\21\37\1\41"+
    "\2\37\2\42\1\40\3\43\2\44\1\45\2\46\21\44"+
    "\1\46\2\44\1\47\1\50\2\51\1\52\2\53\4\0"+
    "\2\11\1\54\1\55\7\0\2\56\1\0\3\13\2\12"+
    "\1\15\1\57\1\60\3\12\1\13\1\61\6\12\1\0"+
    "\1\42\2\0\3\12\3\62\2\63\1\0\1\20\3\0"+
    "\1\3\2\12\2\0\2\40\2\0\1\45\1\64\1\11"+
    "\1\65\1\0\2\12\13\0\1\66\3\0\6\12\1\67"+
    "\2\12\1\70\1\0\5\62\1\0\1\62\2\0\1\3"+
    "\1\40\1\65\1\0\1\45\1\65\2\0\1\71\2\12"+
    "\2\0\1\72\10\0\6\12\13\0\1\73\1\41\1\46"+
    "\2\12\2\0\1\72\3\0\2\66\4\12\13\0\1\73"+
    "\1\12\1\0\2\12\11\0\1\74\1\0\1\75\1\76"+
    "\71\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[403];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\127\0\256\0\u0105\0\u015c\0\u01b3\0\u020a\0\u0261"+
    "\0\u02b8\0\u030f\0\u0366\0\u03bd\0\u0414\0\u046b\0\u04c2\0\u0519"+
    "\0\u0570\0\u05c7\0\u061e\0\u05c7\0\u0675\0\u05c7\0\u06cc\0\u0723"+
    "\0\u077a\0\u07d1\0\u0828\0\u087f\0\u08d6\0\u092d\0\u05c7\0\u0984"+
    "\0\u09db\0\u0a32\0\u0a89\0\u0ae0\0\u0b37\0\u0b8e\0\u0be5\0\u0c3c"+
    "\0\u0c93\0\u0cea\0\u0d41\0\u0d98\0\u0def\0\u0e46\0\u0e9d\0\u0ef4"+
    "\0\u0f4b\0\u0fa2\0\u0ff9\0\u1050\0\u10a7\0\u10fe\0\u1155\0\u11ac"+
    "\0\u1203\0\u125a\0\u12b1\0\u1308\0\u135f\0\u13b6\0\u140d\0\u05c7"+
    "\0\u05c7\0\u05c7\0\u05c7\0\u05c7\0\u05c7\0\u05c7\0\u05c7\0\u1464"+
    "\0\u05c7\0\u14bb\0\u1512\0\u05c7\0\u1464\0\u1569\0\u15c0\0\u05c7"+
    "\0\u05c7\0\u1464\0\u05c7\0\u1617\0\u05c7\0\u166e\0\u16c5\0\u171c"+
    "\0\u1773\0\u17ca\0\u1821\0\u1878\0\u05c7\0\u05c7\0\u061e\0\u18cf"+
    "\0\u1926\0\u197d\0\u07d1\0\u0828\0\u087f\0\u08d6\0\u092d\0\u16c5"+
    "\0\u09db\0\u0a32\0\u0ae0\0\u0b37\0\u0e46\0\u0e9d\0\u0ef4\0\u0f4b"+
    "\0\u1155\0\u11ac\0\u1203\0\u19d4\0\u135f\0\u13b6\0\u1a2b\0\u1a82"+
    "\0\u1ad9\0\u1b30\0\u1b87\0\u1bde\0\u05c7\0\u061e\0\u1c35\0\u1c8c"+
    "\0\u1ce3\0\u07d1\0\u0828\0\u087f\0\u08d6\0\u092d\0\u16c5\0\u09db"+
    "\0\u0a32\0\u0ae0\0\u0b37\0\u0e46\0\u0e9d\0\u0ef4\0\u0f4b\0\u1155"+
    "\0\u11ac\0\u1203\0\u1d3a\0\u135f\0\u13b6\0\u05c7\0\u1d91\0\u05c7"+
    "\0\u1de8\0\u05c7\0\u1e3f\0\u1e96\0\u1eed\0\u1f44\0\u1f9b\0\u1ff2"+
    "\0\u2049\0\u20a0\0\u05c7\0\u20f7\0\u214e\0\u21a5\0\u21fc\0\u2253"+
    "\0\u22aa\0\u2301\0\u2358\0\u23af\0\u05c7\0\u2406\0\u245d\0\u24b4"+
    "\0\u0723\0\u250b\0\u2562\0\u0723\0\u0723\0\u25b9\0\u2610\0\u2667"+
    "\0\u26be\0\u2715\0\u05c7\0\u276c\0\u27c3\0\u281a\0\u2871\0\u28c8"+
    "\0\u291f\0\u1155\0\u05c7\0\u11ac\0\u1203\0\u2976\0\u29cd\0\u2a24"+
    "\0\u05c7\0\u2a7b\0\u2ad2\0\u2b29\0\u05c7\0\u2b80\0\u05c7\0\u1464"+
    "\0\u2bd7\0\u15c0\0\u2c2e\0\u25b9\0\u2c85\0\u2cdc\0\u2d33\0\u2d8a"+
    "\0\u2de1\0\u2e38\0\u2e8f\0\u2ee6\0\u05c7\0\u1f44\0\u2f3d\0\u2f94"+
    "\0\u2feb\0\u3042\0\u3099\0\u30f0\0\u3147\0\u319e\0\u31f5\0\u324c"+
    "\0\u32a3\0\u32fa\0\u3351\0\u33a8\0\u24b4\0\u33ff\0\u3456\0\u34ad"+
    "\0\u3504\0\u355b\0\u35b2\0\u3609\0\u3660\0\u36b7\0\u370e\0\u0723"+
    "\0\u3765\0\u37bc\0\u0723\0\u3813\0\u386a\0\u38c1\0\u3918\0\u396f"+
    "\0\u39c6\0\u3a1d\0\u3a74\0\u3acb\0\u3b22\0\u3b79\0\u3bd0\0\u3c27"+
    "\0\u3c7e\0\u3cd5\0\u3d2c\0\u3d83\0\u3dda\0\u05c7\0\u3e31\0\u3e88"+
    "\0\u3edf\0\u3f36\0\u3f8d\0\u3fe4\0\u403b\0\u4092\0\u40e9\0\u4140"+
    "\0\u4197\0\u41ee\0\u4245\0\u429c\0\u42f3\0\u434a\0\u43a1\0\u43f8"+
    "\0\u444f\0\u44a6\0\u44fd\0\u4554\0\u45ab\0\u4602\0\u4659\0\u46b0"+
    "\0\u4707\0\u475e\0\u47b5\0\u480c\0\u4863\0\u48ba\0\u4911\0\u4968"+
    "\0\u49bf\0\u20f7\0\u4a16\0\u05c7\0\u4a6d\0\u4ac4\0\u23af\0\u05c7"+
    "\0\u4245\0\u4b1b\0\u4b72\0\u4bc9\0\u4c20\0\u2a7b\0\u4c77\0\u4cce"+
    "\0\u4d25\0\u4d7c\0\u4dd3\0\u4e2a\0\u4e81\0\u4ed8\0\u4f2f\0\u2b29"+
    "\0\u05c7\0\u4f86\0\u4fdd\0\u5034\0\u508b\0\u50e2\0\u5139\0\u5190"+
    "\0\u51e7\0\u523e\0\u5295\0\u52ec\0\u5343\0\u539a\0\u0723\0\u53f1"+
    "\0\u0723\0\u0723\0\u5448\0\u549f\0\u54f6\0\u554d\0\u55a4\0\u55fb"+
    "\0\u5652\0\u56a9\0\u5700\0\u5757\0\u57ae\0\u5805\0\u585c\0\u58b3"+
    "\0\u590a\0\u5961\0\u59b8\0\u5a0f\0\u5a66\0\u5abd\0\u5b14\0\u5b6b"+
    "\0\u5bc2\0\u5c19\0\u5c70\0\u5cc7\0\u5d1e\0\u5d75\0\u5dcc\0\u5e23"+
    "\0\u5e7a\0\u5ed1\0\u5f28\0\u5f7f\0\u5fd6\0\u602d\0\u6084\0\u60db"+
    "\0\u6132\0\u6189\0\u61e0\0\u6237\0\u628e\0\u62e5\0\u633c\0\u6393"+
    "\0\u63ea\0\u6441\0\u6498\0\u64ef\0\u6546\0\u659d\0\u65f4\0\u664b"+
    "\0\u66a2\0\u66f9\0\u6750";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[403];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\5\30\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\30\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\37\1\60\1\37\1\61\1\62\1\63\1\64\1\65"+
    "\2\30\1\66\1\67\1\25\1\70\1\71\1\30\1\27"+
    "\1\72\1\30\1\73\1\74\1\75\1\76\15\30\1\27"+
    "\4\30\1\77\1\100\1\101\1\102\1\103\1\104\2\30"+
    "\1\105\1\106\1\107\1\110\1\111\1\112\1\107\10\113"+
    "\11\107\1\113\2\107\11\113\6\107\7\113\1\107\1\112"+
    "\2\107\6\113\2\107\22\113\6\107\2\113\2\107\1\114"+
    "\1\115\1\111\1\112\1\26\1\116\52\114\1\112\3\114"+
    "\1\116\1\117\22\114\1\116\14\114\1\120\1\114\1\121"+
    "\1\122\1\111\1\112\1\26\53\121\1\112\44\121\1\120"+
    "\1\121\2\5\1\123\124\5\2\124\1\125\20\124\1\126"+
    "\103\124\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\27\5\30\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\127\1\41\1\42\1\43\1\44\1\45\1\46\1\30"+
    "\1\47\1\50\1\51\1\130\1\53\1\54\1\30\1\56"+
    "\1\57\1\37\1\60\1\37\1\61\1\62\1\63\1\64"+
    "\1\131\2\30\1\132\1\67\1\25\1\70\1\71\1\30"+
    "\1\27\1\72\1\30\1\73\1\30\1\75\1\76\15\30"+
    "\1\27\4\30\1\77\1\100\1\101\1\102\1\103\1\104"+
    "\2\30\1\105\1\106\1\133\1\134\1\135\124\133\2\11"+
    "\1\0\124\11\1\136\1\137\1\24\1\25\1\26\1\140"+
    "\1\141\1\142\5\141\1\143\1\144\1\145\1\146\1\147"+
    "\1\136\1\150\1\151\1\152\1\141\1\153\1\154\11\141"+
    "\1\155\1\156\1\136\1\157\1\136\1\160\7\141\1\161"+
    "\1\25\1\162\1\163\1\141\1\140\1\164\3\141\1\165"+
    "\1\166\15\141\1\140\4\141\1\77\2\136\1\102\2\136"+
    "\2\141\2\136\1\22\1\23\1\24\1\25\1\26\1\167"+
    "\1\170\1\167\5\170\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\127\1\41\1\42\1\170\1\44\1\45\11\170"+
    "\1\56\1\57\1\37\1\60\1\37\1\61\7\170\1\67"+
    "\1\25\1\70\1\71\1\170\1\167\4\170\1\75\1\76"+
    "\15\170\1\167\4\170\1\77\1\100\1\101\1\102\1\103"+
    "\1\104\2\170\1\105\1\106\1\22\1\23\1\24\1\25"+
    "\1\26\1\171\1\172\1\173\5\172\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\127\1\41\1\42\1\172\1\44"+
    "\1\45\11\172\1\56\1\57\1\37\1\60\1\37\1\61"+
    "\7\172\1\67\1\25\1\70\1\71\1\172\1\171\1\174"+
    "\3\172\1\75\1\76\15\172\1\171\4\172\1\77\1\100"+
    "\1\101\1\102\1\103\1\104\2\172\1\105\1\106\1\175"+
    "\1\176\1\24\1\25\1\26\1\177\1\200\1\201\5\200"+
    "\1\202\1\203\1\204\1\205\1\206\1\175\1\207\1\210"+
    "\1\211\1\200\1\212\1\213\11\200\1\214\1\215\1\175"+
    "\1\216\1\175\1\217\7\200\1\220\1\25\1\221\1\222"+
    "\1\200\1\177\1\223\3\200\1\224\1\225\15\200\1\177"+
    "\4\200\1\77\2\175\1\102\2\175\2\200\2\175\2\226"+
    "\1\0\1\227\54\226\1\227\46\226\1\230\1\231\125\230"+
    "\2\232\1\0\124\232\1\22\1\23\1\24\1\25\1\26"+
    "\1\233\1\234\1\233\5\234\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\127\1\41\1\42\1\234\1\44\1\45"+
    "\11\234\1\56\1\57\1\37\1\60\1\37\1\61\7\234"+
    "\1\67\1\25\1\70\1\71\1\234\1\233\4\234\1\75"+
    "\1\76\15\234\1\233\4\234\1\77\1\100\1\101\1\102"+
    "\1\103\1\104\2\234\1\105\1\106\131\0\1\24\127\0"+
    "\1\25\54\0\1\25\53\0\1\27\1\30\1\27\5\30"+
    "\1\0\1\235\7\0\1\30\2\0\11\30\3\0\1\236"+
    "\1\0\1\237\7\30\2\0\1\240\1\0\1\30\1\27"+
    "\4\30\2\0\15\30\1\27\4\30\6\0\2\30\7\0"+
    "\10\30\1\0\1\235\7\0\1\30\2\0\11\30\5\0"+
    "\1\237\7\30\2\0\1\240\1\0\6\30\2\0\22\30"+
    "\6\0\2\30\7\0\1\27\1\30\1\241\5\30\1\0"+
    "\1\235\7\0\1\30\2\0\11\30\3\0\1\236\1\0"+
    "\1\237\7\30\2\0\1\240\1\0\1\30\1\27\4\30"+
    "\2\0\15\30\1\27\4\30\6\0\2\30\17\0\1\37"+
    "\5\0\1\37\110\0\1\242\1\0\1\242\6\0\1\37"+
    "\4\0\1\37\4\0\1\243\33\0\1\242\23\0\1\242"+
    "\23\0\10\244\2\0\1\37\3\0\1\37\2\0\1\244"+
    "\2\0\11\244\6\0\7\244\4\0\6\244\2\0\22\244"+
    "\6\0\2\244\23\0\1\37\1\0\1\37\124\0\1\37"+
    "\126\0\1\37\1\0\1\37\4\0\1\102\3\0\1\245"+
    "\4\0\1\246\6\0\1\247\3\0\1\250\1\251\5\0"+
    "\1\252\2\0\1\253\64\0\1\37\107\0\10\254\2\255"+
    "\1\0\1\255\5\0\1\254\2\0\11\254\2\0\1\256"+
    "\3\0\7\254\4\0\6\254\2\0\22\254\6\0\2\254"+
    "\7\0\10\30\1\0\1\235\7\0\1\30\2\0\11\30"+
    "\5\0\1\237\1\62\6\30\2\0\1\240\1\0\6\30"+
    "\2\0\22\30\6\0\2\30\25\0\1\257\3\0\1\260"+
    "\122\0\1\37\4\0\1\37\103\0\10\30\1\0\1\235"+
    "\7\0\1\30\2\0\1\30\1\261\1\30\1\261\5\30"+
    "\5\0\1\237\7\30\2\0\1\240\1\0\6\30\2\0"+
    "\22\30\6\0\2\30\7\0\10\30\1\0\1\235\7\0"+
    "\1\30\2\0\1\30\1\261\1\30\1\261\5\30\5\0"+
    "\1\237\3\30\1\262\3\30\2\0\1\240\1\0\6\30"+
    "\2\0\22\30\6\0\2\30\7\0\10\30\1\0\1\235"+
    "\7\0\1\263\2\0\4\30\1\261\4\30\5\0\1\237"+
    "\7\30\2\0\1\240\1\0\6\30\2\0\22\30\6\0"+
    "\2\30\7\0\10\30\1\0\1\235\7\0\1\264\2\0"+
    "\4\30\1\264\4\30\5\0\1\237\7\30\2\0\1\240"+
    "\1\0\6\30\2\0\22\30\6\0\1\30\1\265\7\0"+
    "\10\30\1\0\1\235\7\0\1\30\2\0\3\30\1\261"+
    "\5\30\5\0\1\237\1\266\6\30\2\0\1\240\1\0"+
    "\6\30\2\0\22\30\6\0\2\30\7\0\10\30\1\0"+
    "\1\235\7\0\1\30\2\0\7\30\1\267\1\30\5\0"+
    "\1\237\7\30\2\0\1\240\1\0\6\30\2\0\22\30"+
    "\6\0\2\30\7\0\10\30\1\0\1\235\7\0\1\30"+
    "\2\0\11\30\5\0\1\237\1\30\1\270\5\30\2\0"+
    "\1\240\1\0\6\30\2\0\22\30\6\0\2\30\7\0"+
    "\10\30\1\0\1\235\7\0\1\30\2\0\11\30\5\0"+
    "\1\237\1\30\1\271\5\30\2\0\1\240\1\0\6\30"+
    "\2\0\22\30\6\0\2\30\44\0\1\37\127\0\1\37"+
    "\130\0\1\272\130\0\1\273\64\0\10\30\1\0\1\235"+
    "\7\0\1\30\2\0\11\30\5\0\1\237\3\30\1\261"+
    "\3\30\2\0\1\240\1\0\6\30\2\0\22\30\6\0"+
    "\2\30\7\0\10\30\1\0\1\235\7\0\1\30\2\0"+
    "\5\30\1\274\3\30\5\0\1\237\7\30\2\0\1\240"+
    "\1\0\6\30\2\0\22\30\6\0\2\30\7\0\10\30"+
    "\1\0\1\235\7\0\1\30\2\0\3\30\1\275\5\30"+
    "\5\0\1\237\7\30\2\0\1\240\1\0\6\30\2\0"+
    "\22\30\6\0\2\30\7\0\10\30\1\0\1\235\7\0"+
    "\1\30\2\0\3\30\1\276\5\30\5\0\1\237\7\30"+
    "\2\0\1\240\1\0\6\30\2\0\22\30\6\0\2\30"+
    "\7\0\10\30\1\0\1\235\7\0\1\30\2\0\6\30"+
    "\1\277\2\30\5\0\1\237\1\300\6\30\2\0\1\240"+
    "\1\0\5\30\1\301\2\0\22\30\6\0\2\30\2\0"+
    "\1\302\2\0\54\302\1\303\47\302\1\304\2\0\56\304"+
    "\1\303\45\304\1\305\2\0\57\305\1\303\44\305\5\0"+
    "\10\30\1\0\1\235\7\0\1\30\2\0\11\30\5\0"+
    "\1\237\1\30\1\306\5\30\2\0\1\240\1\0\6\30"+
    "\2\0\22\30\6\0\2\30\7\0\10\30\1\0\1\235"+
    "\7\0\1\30\2\0\3\30\1\307\5\30\5\0\1\237"+
    "\7\30\2\0\1\240\1\0\6\30\2\0\22\30\6\0"+
    "\2\30\7\0\10\30\1\0\1\235\7\0\1\30\2\0"+
    "\11\30\5\0\1\237\6\30\1\310\2\0\1\240\1\0"+
    "\6\30\2\0\22\30\6\0\2\30\6\0\1\311\10\312"+
    "\5\311\1\0\3\311\1\312\2\311\11\312\2\311\1\313"+
    "\3\311\7\312\1\311\1\0\2\311\6\312\2\311\22\312"+
    "\6\311\2\312\7\0\10\314\2\315\1\0\1\315\5\0"+
    "\1\314\2\0\11\314\2\0\1\316\3\0\7\314\4\0"+
    "\6\314\2\0\22\314\6\0\2\314\2\0\2\77\1\317"+
    "\124\77\2\0\1\111\125\0\1\320\1\111\1\112\54\0"+
    "\1\112\53\0\10\113\11\0\1\113\2\0\11\113\5\0"+
    "\1\321\7\113\4\0\6\113\2\0\22\113\6\0\2\113"+
    "\7\0\1\116\1\0\1\116\35\0\1\322\16\0\1\116"+
    "\23\0\1\116\23\0\1\116\56\0\1\116\23\0\1\116"+
    "\16\0\2\124\1\125\126\124\1\125\34\124\1\323\67\124"+
    "\21\0\1\37\1\0\1\37\4\0\1\102\103\0\10\30"+
    "\1\0\1\235\7\0\1\30\2\0\3\30\1\261\5\30"+
    "\5\0\1\237\1\324\6\30\2\0\1\240\1\0\6\30"+
    "\2\0\22\30\6\0\2\30\7\0\10\30\1\0\1\235"+
    "\7\0\1\30\2\0\3\30\1\325\5\30\5\0\1\237"+
    "\7\30\2\0\1\240\1\0\6\30\2\0\22\30\6\0"+
    "\2\30\7\0\10\30\1\0\1\235\7\0\1\30\2\0"+
    "\6\30\1\277\2\30\5\0\1\237\1\300\6\30\2\0"+
    "\1\240\1\0\6\30\2\0\22\30\6\0\2\30\2\0"+
    "\2\133\1\0\126\133\1\135\124\133\5\0\1\140\1\141"+
    "\1\140\5\141\1\0\1\235\7\0\1\141\2\0\11\141"+
    "\3\0\1\326\1\0\1\327\7\141\2\0\1\240\1\0"+
    "\1\141\1\140\4\141\2\0\15\141\1\140\4\141\6\0"+
    "\2\141\7\0\10\141\1\0\1\235\7\0\1\141\2\0"+
    "\11\141\5\0\1\327\7\141\2\0\1\240\1\0\6\141"+
    "\2\0\22\141\6\0\2\141\7\0\1\142\1\141\1\142"+
    "\5\141\1\0\1\235\7\0\1\141\2\0\11\141\3\0"+
    "\1\236\1\0\1\327\7\141\2\0\1\240\1\0\1\141"+
    "\1\142\4\141\2\0\15\141\1\142\4\141\6\0\2\141"+
    "\7\0\1\330\7\141\1\0\1\235\7\0\1\141\2\0"+
    "\11\141\5\0\1\327\7\141\2\0\1\240\1\0\1\141"+
    "\1\330\4\141\2\0\15\141\1\330\4\141\6\0\2\141"+
    "\7\0\1\167\1\170\1\167\5\170\1\0\1\235\7\0"+
    "\1\170\2\0\11\170\3\0\1\236\1\0\1\237\7\170"+
    "\2\0\1\240\1\0\1\170\1\167\4\170\2\0\15\170"+
    "\1\167\4\170\6\0\2\170\7\0\10\170\1\0\1\235"+
    "\7\0\1\170\2\0\11\170\5\0\1\237\7\170\2\0"+
    "\1\240\1\0\6\170\2\0\22\170\6\0\2\170\7\0"+
    "\1\171\1\172\1\171\5\172\1\0\1\235\7\0\1\172"+
    "\2\0\11\172\3\0\1\326\1\0\1\237\7\172\2\0"+
    "\1\240\1\0\1\172\1\171\4\172\2\0\15\172\1\171"+
    "\4\172\6\0\2\172\7\0\10\172\1\0\1\235\7\0"+
    "\1\172\2\0\11\172\5\0\1\237\7\172\2\0\1\240"+
    "\1\0\6\172\2\0\22\172\6\0\2\172\7\0\1\173"+
    "\1\172\1\173\5\172\1\0\1\235\7\0\1\172\2\0"+
    "\11\172\3\0\1\236\1\0\1\237\7\172\2\0\1\240"+
    "\1\0\1\172\1\173\4\172\2\0\15\172\1\173\4\172"+
    "\6\0\2\172\7\0\1\331\7\172\1\0\1\235\7\0"+
    "\1\172\2\0\11\172\5\0\1\237\7\172\2\0\1\240"+
    "\1\0\1\172\1\331\4\172\2\0\15\172\1\331\4\172"+
    "\6\0\2\172\7\0\1\177\1\200\1\177\5\200\1\0"+
    "\1\235\7\0\1\200\2\0\11\200\3\0\1\332\1\0"+
    "\1\333\7\200\2\0\1\240\1\0\1\200\1\177\4\200"+
    "\2\0\15\200\1\177\4\200\6\0\2\200\7\0\10\200"+
    "\1\0\1\235\7\0\1\200\2\0\11\200\5\0\1\333"+
    "\7\200\2\0\1\240\1\0\6\200\2\0\22\200\6\0"+
    "\2\200\7\0\1\201\1\200\1\201\5\200\1\0\1\235"+
    "\7\0\1\200\2\0\11\200\3\0\1\236\1\0\1\333"+
    "\7\200\2\0\1\240\1\0\1\200\1\201\4\200\2\0"+
    "\15\200\1\201\4\200\6\0\2\200\7\0\1\334\7\200"+
    "\1\0\1\235\7\0\1\200\2\0\11\200\5\0\1\333"+
    "\7\200\2\0\1\240\1\0\1\200\1\334\4\200\2\0"+
    "\15\200\1\334\4\200\6\0\2\200\5\0\1\227\54\0"+
    "\1\227\50\0\1\230\131\0\1\233\1\234\1\233\5\234"+
    "\1\0\1\235\7\0\1\234\2\0\11\234\3\0\1\236"+
    "\1\0\1\237\7\234\2\0\1\240\1\0\1\234\1\233"+
    "\4\234\2\0\15\234\1\233\4\234\6\0\2\234\7\0"+
    "\10\234\1\0\1\235\7\0\1\234\2\0\11\234\5\0"+
    "\1\237\7\234\2\0\1\240\1\0\6\234\2\0\22\234"+
    "\6\0\2\234\32\0\1\335\103\0\1\336\1\0\1\336"+
    "\54\0\1\336\23\0\1\336\65\0\1\337\126\0\1\340"+
    "\64\0\1\27\1\30\1\27\1\341\1\30\1\342\2\30"+
    "\1\0\1\235\7\0\1\30\2\0\11\30\3\0\1\236"+
    "\1\0\1\237\7\30\2\0\1\240\1\0\1\30\1\27"+
    "\4\30\2\0\15\30\1\27\4\30\6\0\2\30\7\0"+
    "\1\242\1\0\1\242\35\0\1\236\16\0\1\242\23\0"+
    "\1\242\23\0\10\244\11\0\1\244\2\0\11\244\5\0"+
    "\1\343\7\244\4\0\6\244\2\0\22\244\6\0\2\244"+
    "\40\0\1\344\140\0\1\345\143\0\1\346\111\0\1\347"+
    "\110\0\1\350\130\0\1\351\126\0\1\352\14\0\1\353"+
    "\62\0\10\254\11\0\1\254\2\0\11\254\5\0\1\354"+
    "\7\254\4\0\6\254\2\0\22\254\6\0\2\254\114\0"+
    "\1\255\44\0\1\37\101\0\1\355\1\0\10\356\11\0"+
    "\1\356\2\0\11\356\6\0\7\356\1\357\1\355\1\360"+
    "\1\361\6\356\2\0\22\356\6\0\2\356\7\0\10\30"+
    "\1\0\1\235\7\0\1\30\2\0\3\30\1\270\5\30"+
    "\5\0\1\237\7\30\2\0\1\240\1\0\6\30\2\0"+
    "\22\30\6\0\2\30\7\0\10\30\1\0\1\235\7\0"+
    "\1\30\2\0\11\30\5\0\1\237\5\30\1\362\1\30"+
    "\2\0\1\240\1\0\6\30\2\0\22\30\6\0\2\30"+
    "\7\0\10\30\1\0\1\235\7\0\1\30\2\0\1\30"+
    "\1\261\7\30\5\0\1\237\7\30\2\0\1\240\1\0"+
    "\6\30\2\0\22\30\6\0\2\30\7\0\10\30\1\0"+
    "\1\235\7\0\1\30\2\0\10\30\1\261\5\0\1\237"+
    "\7\30\2\0\1\240\1\0\6\30\2\0\22\30\6\0"+
    "\2\30\7\0\10\30\1\0\1\235\7\0\1\30\2\0"+
    "\10\30\1\265\5\0\1\237\7\30\2\0\1\240\1\0"+
    "\6\30\2\0\22\30\6\0\2\30\7\0\10\30\1\0"+
    "\1\235\7\0\1\30\2\0\6\30\1\363\2\30\5\0"+
    "\1\237\7\30\2\0\1\240\1\0\6\30\2\0\22\30"+
    "\6\0\2\30\47\0\1\37\66\0\10\30\1\0\1\235"+
    "\7\0\1\30\2\0\11\30\5\0\1\237\2\30\1\261"+
    "\4\30\2\0\1\240\1\0\6\30\2\0\22\30\6\0"+
    "\2\30\7\0\10\30\1\0\1\235\7\0\1\30\2\0"+
    "\11\30\5\0\1\237\4\30\1\364\2\30\2\0\1\240"+
    "\1\0\6\30\2\0\22\30\6\0\2\30\7\0\10\30"+
    "\1\0\1\235\7\0\1\30\2\0\4\30\1\365\4\30"+
    "\5\0\1\237\4\30\1\261\2\30\2\0\1\240\1\0"+
    "\6\30\2\0\22\30\6\0\2\30\7\0\10\30\1\0"+
    "\1\235\7\0\1\30\2\0\11\30\5\0\1\237\1\30"+
    "\1\366\5\30\2\0\1\240\1\0\6\30\2\0\22\30"+
    "\6\0\2\30\7\0\10\30\1\0\1\235\7\0\1\30"+
    "\2\0\11\30\5\0\1\237\3\30\1\367\3\30\2\0"+
    "\1\240\1\0\6\30\2\0\22\30\6\0\2\30\7\0"+
    "\10\30\1\0\1\235\7\0\1\30\2\0\11\30\5\0"+
    "\1\237\7\30\2\0\1\240\1\0\3\30\1\370\2\30"+
    "\2\0\22\30\6\0\2\30\7\0\10\30\1\0\1\235"+
    "\7\0\1\30\2\0\1\371\10\30\5\0\1\237\7\30"+
    "\2\0\1\240\1\0\6\30\2\0\22\30\6\0\2\30"+
    "\7\0\10\30\1\0\1\235\7\0\1\30\2\0\11\30"+
    "\5\0\1\237\7\30\2\0\1\240\1\0\6\30\2\0"+
    "\22\30\6\0\1\372\1\30\7\0\10\30\1\0\1\235"+
    "\7\0\1\30\2\0\3\30\1\373\5\30\5\0\1\237"+
    "\7\30\2\0\1\240\1\0\6\30\2\0\22\30\6\0"+
    "\2\30\7\0\10\312\11\0\1\312\2\0\11\312\5\0"+
    "\1\374\7\312\4\0\6\312\2\0\22\312\6\0\2\312"+
    "\12\0\1\375\3\311\1\376\56\0\1\377\1\u0100\1\311"+
    "\2\0\1\311\1\0\1\311\1\u0101\1\311\1\u0102\1\u0103"+
    "\1\311\1\0\4\311\17\0\10\314\11\0\1\314\2\0"+
    "\11\314\5\0\1\u0104\7\314\4\0\6\314\2\0\22\314"+
    "\6\0\2\314\114\0\1\315\63\0\1\u0105\57\0\2\124"+
    "\1\125\65\124\1\u0106\36\124\5\0\10\30\1\0\1\235"+
    "\7\0\1\30\2\0\11\30\5\0\1\237\4\30\1\261"+
    "\2\30\2\0\1\240\1\0\6\30\2\0\22\30\6\0"+
    "\2\30\7\0\1\u0107\1\0\1\336\54\0\1\u0107\23\0"+
    "\1\u0107\65\0\1\u0108\64\0\1\330\1\141\1\330\5\141"+
    "\1\0\1\235\7\0\1\141\2\0\11\141\3\0\1\u0109"+
    "\1\0\1\327\7\141\2\0\1\240\1\0\1\141\1\330"+
    "\4\141\2\0\15\141\1\330\4\141\6\0\2\141\7\0"+
    "\1\331\1\172\1\331\5\172\1\0\1\235\7\0\1\172"+
    "\2\0\11\172\3\0\1\u0109\1\0\1\237\7\172\2\0"+
    "\1\240\1\0\1\172\1\331\4\172\2\0\15\172\1\331"+
    "\4\172\6\0\2\172\7\0\1\u010a\1\0\1\336\54\0"+
    "\1\u010a\23\0\1\u010a\65\0\1\u010b\64\0\1\334\1\200"+
    "\1\334\5\200\1\0\1\235\7\0\1\200\2\0\11\200"+
    "\3\0\1\u010c\1\0\1\333\7\200\2\0\1\240\1\0"+
    "\1\200\1\334\4\200\2\0\15\200\1\334\4\200\6\0"+
    "\2\200\7\0\10\u010d\11\0\1\u010d\2\0\11\u010d\6\0"+
    "\7\u010d\4\0\6\u010d\2\0\22\u010d\6\0\2\u010d\63\0"+
    "\1\u010e\52\0\4\30\1\u010f\3\30\1\0\1\235\7\0"+
    "\1\30\2\0\11\30\5\0\1\237\7\30\2\0\1\240"+
    "\1\0\6\30\2\0\22\30\6\0\2\30\7\0\6\30"+
    "\1\u0110\1\30\1\0\1\235\7\0\1\30\2\0\11\30"+
    "\5\0\1\237\7\30\2\0\1\240\1\0\6\30\2\0"+
    "\22\30\6\0\2\30\51\0\1\u0111\116\0\1\u0112\12\0"+
    "\1\u0113\126\0\1\u0113\110\0\1\347\145\0\1\u0113\107\0"+
    "\1\u0114\143\0\1\u0115\110\0\1\u0116\132\0\1\u0117\136\0"+
    "\1\u0118\64\0\10\356\11\0\1\356\2\0\11\356\6\0"+
    "\7\356\4\0\6\356\2\0\22\356\6\0\2\356\2\0"+
    "\1\u0119\2\0\53\u0119\4\0\45\u0119\1\u011a\2\0\53\u011a"+
    "\4\0\45\u011a\1\u011b\2\0\53\u011b\4\0\45\u011b\5\0"+
    "\10\30\1\0\1\235\7\0\1\30\2\0\11\30\5\0"+
    "\1\237\6\30\1\u011c\2\0\1\240\1\0\6\30\2\0"+
    "\22\30\6\0\2\30\7\0\10\30\1\0\1\235\7\0"+
    "\1\30\2\0\11\30\5\0\1\237\7\30\2\0\1\240"+
    "\1\0\4\30\1\u011d\1\30\2\0\22\30\6\0\2\30"+
    "\7\0\10\30\1\0\1\235\7\0\1\30\2\0\11\30"+
    "\5\0\1\237\5\30\1\u011e\1\30\2\0\1\240\1\0"+
    "\6\30\2\0\22\30\6\0\2\30\7\0\10\30\1\0"+
    "\1\235\7\0\1\30\2\0\11\30\5\0\1\237\7\30"+
    "\2\0\1\240\1\0\5\30\1\u011f\2\0\22\30\6\0"+
    "\2\30\7\0\10\30\1\0\1\235\7\0\1\30\2\0"+
    "\1\u0120\10\30\5\0\1\237\7\30\2\0\1\240\1\0"+
    "\6\30\2\0\22\30\6\0\2\30\7\0\10\30\1\0"+
    "\1\235\7\0\1\30\2\0\1\30\1\265\7\30\5\0"+
    "\1\237\7\30\2\0\1\240\1\0\6\30\2\0\22\30"+
    "\6\0\2\30\7\0\10\30\1\0\1\235\7\0\1\30"+
    "\2\0\11\30\5\0\1\237\7\30\2\0\1\240\1\0"+
    "\5\30\1\u0121\2\0\22\30\6\0\2\30\7\0\10\30"+
    "\1\0\1\235\7\0\1\30\2\0\11\30\5\0\1\237"+
    "\6\30\1\265\2\0\1\240\1\0\6\30\2\0\22\30"+
    "\6\0\2\30\51\0\1\u0122\70\0\1\u0123\130\0\1\u0124"+
    "\126\0\1\u0125\61\0\1\u0126\41\0\1\u0127\230\0\1\u0128"+
    "\25\0\1\u0129\2\0\1\u012a\226\0\1\u012b\61\0\1\u012c"+
    "\64\0\10\113\11\0\1\113\2\0\11\113\6\0\7\113"+
    "\4\0\6\113\2\0\22\113\6\0\2\113\2\0\2\124"+
    "\1\125\27\124\1\u012d\74\124\5\0\1\u0107\1\0\1\u0107"+
    "\35\0\1\u0109\16\0\1\u0107\23\0\1\u0107\23\0\10\u012e"+
    "\11\0\1\u012e\2\0\11\u012e\6\0\7\u012e\4\0\6\u012e"+
    "\2\0\22\u012e\6\0\2\u012e\7\0\1\u0107\56\0\1\u0107"+
    "\23\0\1\u0107\23\0\1\u010a\1\0\1\u010a\35\0\1\u010c"+
    "\16\0\1\u010a\23\0\1\u010a\23\0\10\u012f\11\0\1\u012f"+
    "\2\0\11\u012f\6\0\7\u012f\4\0\6\u012f\2\0\22\u012f"+
    "\6\0\2\u012f\7\0\1\u010a\56\0\1\u010a\23\0\1\u010a"+
    "\23\0\10\u010d\1\0\1\235\7\0\1\u010d\2\0\11\u010d"+
    "\5\0\1\237\7\u010d\4\0\6\u010d\2\0\22\u010d\6\0"+
    "\2\u010d\7\0\5\30\1\u0130\2\30\1\0\1\235\7\0"+
    "\1\30\2\0\11\30\5\0\1\237\7\30\2\0\1\240"+
    "\1\0\6\30\2\0\22\30\6\0\2\30\7\0\7\30"+
    "\1\u0131\1\0\1\235\7\0\1\30\2\0\11\30\5\0"+
    "\1\237\7\30\2\0\1\240\1\0\6\30\2\0\22\30"+
    "\6\0\2\30\7\0\10\u0132\11\0\1\u0132\2\0\11\u0132"+
    "\6\0\7\u0132\4\0\6\u0132\2\0\22\u0132\6\0\2\u0132"+
    "\52\0\1\u0133\56\0\2\u0113\1\u0134\124\u0113\40\0\1\u0113"+
    "\140\0\1\u0135\131\0\1\u0136\140\0\1\u0113\44\0\10\u0137"+
    "\11\0\1\u0137\2\0\11\u0137\6\0\7\u0137\4\0\6\u0137"+
    "\2\0\22\u0137\6\0\2\u0137\2\0\1\u0119\2\0\53\u0119"+
    "\1\0\1\u0138\2\0\45\u0119\1\u011a\2\0\53\u011a\3\0"+
    "\1\u0138\45\u011a\1\u011b\2\0\53\u011b\4\0\1\u0139\44\u011b"+
    "\5\0\10\30\1\0\1\235\7\0\1\30\2\0\1\30"+
    "\1\u013a\7\30\5\0\1\237\7\30\2\0\1\240\1\0"+
    "\6\30\2\0\22\30\6\0\2\30\7\0\10\30\1\0"+
    "\1\235\7\0\1\30\2\0\11\30\5\0\1\237\1\30"+
    "\1\u013b\5\30\2\0\1\240\1\0\6\30\2\0\22\30"+
    "\6\0\2\30\7\0\10\30\1\0\1\235\7\0\1\30"+
    "\2\0\5\30\1\u013c\3\30\5\0\1\237\7\30\2\0"+
    "\1\240\1\0\6\30\2\0\22\30\6\0\2\30\7\0"+
    "\10\30\1\0\1\235\7\0\1\30\2\0\11\30\5\0"+
    "\1\237\5\30\1\u013d\1\30\2\0\1\240\1\0\6\30"+
    "\2\0\22\30\6\0\2\30\7\0\10\30\1\0\1\235"+
    "\7\0\1\30\2\0\11\30\5\0\1\237\1\30\1\62"+
    "\5\30\2\0\1\240\1\0\6\30\2\0\22\30\6\0"+
    "\2\30\7\0\10\30\1\0\1\235\7\0\1\30\2\0"+
    "\3\30\1\372\5\30\5\0\1\237\7\30\2\0\1\240"+
    "\1\0\6\30\2\0\22\30\6\0\2\30\7\0\10\u013e"+
    "\11\0\1\u013e\2\0\11\u013e\6\0\7\u013e\4\0\6\u013e"+
    "\2\0\22\u013e\6\0\2\u013e\105\0\1\u013f\120\0\1\u0140"+
    "\125\0\1\u0141\44\0\1\u0142\123\0\1\u0143\214\0\1\u0144"+
    "\126\0\1\u0145\140\0\1\u0146\27\0\1\u0147\123\0\10\u0148"+
    "\11\0\1\u0148\2\0\11\u0148\6\0\7\u0148\4\0\6\u0148"+
    "\2\0\22\u0148\6\0\2\u0148\2\0\2\u012d\1\u0149\124\u012d"+
    "\5\0\10\u012e\1\0\1\235\7\0\1\u012e\2\0\11\u012e"+
    "\5\0\1\327\7\u012e\4\0\6\u012e\2\0\22\u012e\6\0"+
    "\2\u012e\7\0\10\u012f\1\0\1\235\7\0\1\u012f\2\0"+
    "\11\u012f\5\0\1\333\7\u012f\4\0\6\u012f\2\0\22\u012f"+
    "\6\0\2\u012f\7\0\2\30\1\u014a\5\30\1\0\1\235"+
    "\7\0\1\30\2\0\11\30\5\0\1\237\7\30\2\0"+
    "\1\240\1\0\6\30\2\0\22\30\6\0\2\30\7\0"+
    "\6\30\1\u0130\1\30\1\0\1\235\7\0\1\30\2\0"+
    "\11\30\5\0\1\237\7\30\2\0\1\240\1\0\6\30"+
    "\2\0\22\30\6\0\2\30\54\0\1\u014b\140\0\1\u0113"+
    "\100\0\1\u0113\75\0\10\30\1\0\1\235\7\0\1\30"+
    "\2\0\11\30\5\0\1\237\6\30\1\261\2\0\1\240"+
    "\1\0\6\30\2\0\22\30\6\0\2\30\7\0\10\30"+
    "\1\0\1\235\7\0\1\30\2\0\2\30\1\u014c\6\30"+
    "\5\0\1\237\7\30\2\0\1\240\1\0\6\30\2\0"+
    "\22\30\6\0\2\30\7\0\10\30\1\0\1\235\7\0"+
    "\1\30\2\0\3\30\1\274\5\30\5\0\1\237\7\30"+
    "\2\0\1\240\1\0\6\30\2\0\22\30\6\0\2\30"+
    "\7\0\10\30\1\0\1\235\7\0\1\30\2\0\11\30"+
    "\5\0\1\237\3\30\1\u014d\3\30\2\0\1\240\1\0"+
    "\6\30\2\0\22\30\6\0\2\30\110\0\1\u014e\31\0"+
    "\1\u014f\126\0\1\u0150\125\0\1\u0151\130\0\1\u0152\1\0"+
    "\1\u0153\216\0\1\u0154\125\0\1\u0155\133\0\1\u0156\27\0"+
    "\1\311\122\0\2\30\1\u0157\5\30\1\0\1\235\7\0"+
    "\1\30\2\0\11\30\5\0\1\237\7\30\2\0\1\240"+
    "\1\0\6\30\2\0\22\30\6\0\2\30\57\0\1\u0158"+
    "\56\0\10\30\1\0\1\235\7\0\1\30\2\0\3\30"+
    "\1\u0159\5\30\5\0\1\237\7\30\2\0\1\240\1\0"+
    "\6\30\2\0\22\30\6\0\2\30\7\0\10\30\1\0"+
    "\1\235\7\0\1\30\2\0\3\30\1\u015a\5\30\5\0"+
    "\1\237\7\30\2\0\1\240\1\0\6\30\2\0\22\30"+
    "\6\0\2\30\14\0\1\u015b\130\0\1\311\207\0\1\u015c"+
    "\40\0\1\u015d\127\0\1\u015e\212\0\1\u015f\44\0\1\u0160"+
    "\222\0\1\u0161\124\0\1\u0162\60\0\1\u0163\165\0\1\u0164"+
    "\42\0\1\u0165\215\0\1\u0166\125\0\1\u0167\124\0\1\u0168"+
    "\40\0\1\u0169\131\0\1\u016a\222\0\1\u016b\53\0\1\u0113"+
    "\104\0\1\u016c\213\0\1\u016d\131\0\1\u016e\132\0\1\u016f"+
    "\31\0\1\u0170\126\0\1\u0171\126\0\1\311\221\0\1\u0172"+
    "\121\0\1\311\37\0\1\u0173\217\0\1\u0174\124\0\1\u0175"+
    "\37\0\1\u0176\213\0\1\u0177\45\0\1\u0178\212\0\1\u0179"+
    "\43\0\1\u017a\121\0\1\u017b\221\0\1\u017c\120\0\1\u017d"+
    "\136\0\1\u016a\117\0\1\u017e\41\0\1\u017f\225\0\1\u0180"+
    "\32\0\1\u0181\221\0\1\u0182\34\0\1\u0183\214\0\1\u0184"+
    "\130\0\1\u0185\133\0\1\u0186\111\0\1\u0187\132\0\1\311"+
    "\35\0\1\u0188\132\0\1\u0189\212\0\1\u018a\36\0\1\u018b"+
    "\222\0\1\u018c\121\0\1\u0183\135\0\1\u018d\32\0\1\u018e"+
    "\130\0\1\u018f\222\0\1\311\32\0\1\u0190\217\0\1\u0191"+
    "\36\0\1\u0192\216\0\1\u0183\117\0\1\u0193\144\0\1\u016a"+
    "\13\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[26535];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\5\1\1\0\2\1\10\0\1\11\1\1\1\11"+
    "\1\1\1\11\10\1\1\11\40\1\10\11\1\1\1\11"+
    "\2\1\1\11\3\1\2\11\1\1\1\11\1\1\1\11"+
    "\7\1\2\11\36\1\1\11\30\1\1\11\1\1\1\11"+
    "\1\1\1\11\2\1\4\0\2\1\1\11\1\1\7\0"+
    "\1\1\1\11\1\0\14\1\1\11\6\1\1\0\1\11"+
    "\2\0\3\1\1\11\3\1\1\11\1\0\1\11\3\0"+
    "\3\1\2\0\2\1\2\0\1\1\1\11\2\1\1\0"+
    "\2\1\13\0\1\1\3\0\12\1\1\0\5\1\1\0"+
    "\1\1\2\0\3\1\1\0\2\1\2\0\1\11\2\1"+
    "\2\0\1\1\10\0\6\1\13\0\5\1\2\0\1\11"+
    "\3\0\1\11\5\1\13\0\1\11\1\1\1\0\2\1"+
    "\11\0\1\1\1\0\2\1\71\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[403];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    public void setTokenStart(int position){zzCurrentPos = zzStartRead = position;}
    public int getNextTokenStart(){ return zzMarkedPos;}
    public boolean isLastToken(){ return zzMarkedPos == zzEndRead; }

    public void yybegin_YYINITIAL(){yybegin(YYINITIAL);}
    public void yybegin_LEX_MULTILINE(){yybegin(LEX_MULTILINE);}
    public void yybegin_LEX_MULTILINE_TOKEN(){yybegin(LEX_MULTILINE_TOKEN);}
    public void yybegin_LEX_MULTILINE_WAITING(){yybegin(LEX_MULTILINE_WAITING);}
    public void yybegin_LEX_EOF(){yybegin(LEX_EOF);}
    public void yybegin_LEX_POD(){yybegin(LEX_POD);}

    public boolean yystate_LEX_MULTILINE_WAITING(){return yystate() == LEX_MULTILINE_WAITING;}

    public void yybegin_LEX_QUOTE_LIKE_CHARS(){yybegin(LEX_QUOTE_LIKE_CHARS);}
    public void yybegin_LEX_QUOTE_LIKE_OPENER(){yybegin(LEX_QUOTE_LIKE_OPENER);}
    public void yybegin_LEX_QUOTE_LIKE_CLOSER(){yybegin(LEX_QUOTE_LIKE_CLOSER);}


  public PerlLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PerlLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 200) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 62: 
          { yybegin(LEX_REQUIRE); return PerlFunctionUtil.getFunctionType(yytext().toString());
          }
        case 63: break;
        case 51: 
          { return PERL_ARRAY;
          }
        case 64: break;
        case 58: 
          { processPodOpener();break;
          }
        case 65: break;
        case 57: 
          { yypushback(1); return PERL_LABEL;
          }
        case 66: break;
        case 9: 
          { return PERL_NUMBER;
          }
        case 67: break;
        case 43: 
          { yybegin(YYINITIAL);return PERL_FUNCTION;
          }
        case 68: break;
        case 37: 
          { yybegin(YYINITIAL);
        return PERL_VERSION;
          }
        case 69: break;
        case 35: 
          { yybegin(LEX_PACKAGE_USE_PARAMS);
        return PERL_STRING;
          }
        case 70: break;
        case 60: 
          { processDataOpener(); break;
          }
        case 71: break;
        case 11: 
          { return PERL_OPERATOR;
          }
        case 72: break;
        case 1: 
          { return TokenType.WHITE_SPACE;
          }
        case 73: break;
        case 46: 
          { return PERL_HASH;
          }
        case 74: break;
        case 13: 
          { return processQuoteLikeStringOpener();
          }
        case 75: break;
        case 19: 
          { return PERL_COMMA;
          }
        case 76: break;
        case 40: 
          { return processQuoteLikeStringSpace();
          }
        case 77: break;
        case 32: 
          { yybegin(LEX_PACKAGE_USE_PARAMS);
        return PERL_VERSION;
          }
        case 78: break;
        case 55: 
          { yybegin(LEX_FUNCTION_DEFINITION); return PerlFunctionUtil.getFunctionType(yytext().toString());
          }
        case 79: break;
        case 3: 
          { if( isLastToken() )
        {
            endPodBlock();
        }
        break;
          }
        case 80: break;
        case 27: 
          { yybegin(LEX_PACKAGE_DEFINITION_BLOCK); return PERL_VERSION;
          }
        case 81: break;
        case 25: 
          { yybegin(LEX_PACKAGE_DEFINITION_VERSION); return PERL_PACKAGE;
          }
        case 82: break;
        case 61: 
          { yybegin(LEX_PACKAGE_DEFINITION); return PerlFunctionUtil.getFunctionType(yytext().toString());
          }
        case 83: break;
        case 53: 
          { yypushback(2);
    return PerlPackageUtil.getPackageType(yytext().toString());
          }
        case 84: break;
        case 47: 
          { return PERL_KEYWORD;
          }
        case 85: break;
        case 8: 
          { return processSemicolon();
          }
        case 86: break;
        case 30: 
          { if( isLastToken() )
        {
            return endMultiline();
        }
        break;
          }
        case 87: break;
        case 45: 
          { return PERL_GLOB;
          }
        case 88: break;
        case 2: 
          { if( isLastToken() )
            return endDataBlock();
        break;
          }
        case 89: break;
        case 49: 
          { return PERL_DEPACKAGE;
          }
        case 90: break;
        case 36: 
          { yypushback(1);yybegin(YYINITIAL);break;
          }
        case 91: break;
        case 16: 
          { return PERL_COMMENT;
          }
        case 92: break;
        case 33: 
          { yybegin(LEX_PACKAGE_USE_VERSION);
        return PerlPackageUtil.getPackageType(yytext().toString());
          }
        case 93: break;
        case 54: 
          { return processMultilineOpener();
          }
        case 94: break;
        case 38: 
          { yybegin(YYINITIAL);
        return PerlPackageUtil.getPackageType(yytext().toString());
          }
        case 95: break;
        case 7: 
          { return processNewLine();
          }
        case 96: break;
        case 5: 
          { yybegin(YYINITIAL);return PERL_MULTILINE_MARKER_END;
          }
        case 97: break;
        case 28: 
          { yybegin(YYINITIAL); return PERL_LBRACE;
          }
        case 98: break;
        case 34: 
          { return PERL_STRING;
          }
        case 99: break;
        case 41: 
          { IElementType tokenType = processQuoteLikeChar();
          if( tokenType != null )
                return tokenType;
          break;
          }
        case 100: break;
        case 17: 
          { return PERL_LPAREN;
          }
        case 101: break;
        case 12: 
          { return PERL_SIGIL_HASH;
          }
        case 102: break;
        case 10: 
          { return PERL_FUNCTION;
          }
        case 103: break;
        case 6: 
          { return TokenType.BAD_CHARACTER;
          }
        case 104: break;
        case 50: 
          { return PERL_SCALAR;
          }
        case 105: break;
        case 24: 
          { yybegin(YYINITIAL);  return TokenType.BAD_CHARACTER;
          }
        case 106: break;
        case 18: 
          { return PERL_RPAREN;
          }
        case 107: break;
        case 44: 
          { yybegin(LEX_DEREFERENCE);return PERL_DEREFERENCE;
          }
        case 108: break;
        case 14: 
          { return PERL_SIGIL_SCALAR;
          }
        case 109: break;
        case 15: 
          { return PERL_SIGIL_ARRAY;
          }
        case 110: break;
        case 42: 
          { yybegin(YYINITIAL); return PERL_QUOTE;
          }
        case 111: break;
        case 31: 
          { yypushback(1); yybegin(YYINITIAL); break;
          }
        case 112: break;
        case 4: 
          { if( isMultilineEnd() || isLastToken())
        {
            return endMultiline();
        }
        break;
          }
        case 113: break;
        case 48: 
          { yybegin(LEX_PACKAGE_USE); return PerlFunctionUtil.getFunctionType(yytext().toString());
          }
        case 114: break;
        case 26: 
          { yybegin(YYINITIAL);
        return TokenType.BAD_CHARACTER;
          }
        case 115: break;
        case 39: 
          { IElementType type = processQuoteLikeQuote();
            if( type == null ) // disallowed sharp
                break;
            return type;
          }
        case 116: break;
        case 56: 
          { yybegin(LEX_PACKAGE_USE);return PerlFunctionUtil.getFunctionType(yytext().toString());
          }
        case 117: break;
        case 52: 
          { yypushback(2);
    return PERL_PACKAGE;
          }
        case 118: break;
        case 22: 
          { return PERL_LBRACE;
          }
        case 119: break;
        case 23: 
          { return PERL_RBRACE;
          }
        case 120: break;
        case 59: 
          { return endPodBlock();
          }
        case 121: break;
        case 29: 
          { yybegin(YYINITIAL); return TokenType.BAD_CHARACTER;
          }
        case 122: break;
        case 21: 
          { return PERL_RBRACK;
          }
        case 123: break;
        case 20: 
          { return PERL_LBRACK;
          }
        case 124: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
