/*
 * Copyright 2016 Alexandr Evstigneev
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'org.jetbrains.intellij' version '0.0.40'
}


version = "$version$buildNumber"

apply plugin: 'java'
sourceCompatibility = javaVersion
targetCompatibility = javaVersion
tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }

sourceSets {
    main {
        java.srcDirs 'src', 'gen'
        resources.srcDir 'resources'
    }
    test {
        java.srcDir 'test'
        resources.srcDir 'testData'
    }
}


apply plugin: 'org.jetbrains.intellij'
intellij {
    version ideaVersion
    downloadSources Boolean.valueOf(downloadIdeaSource)
    sandboxDirectory project.rootDir.canonicalPath + "/.sandbox"
    updateSinceUntilBuild = false
}

test {
    testLogging {
        exceptionFormat = 'full'
    }
    doFirst {
        println workingDir;
        println project.projectDir;
        println project.rootDir;
    }
}

repositories {
    mavenCentral()
}

configurations {
    gen
}


dependencies {
    gen files('lib/lexer/jflex-patched.jar')
    gen files('lib/gk/grammar-kit.jar')
    gen files('lib/gk/light-psi-all.jar')
}

apply plugin: 'idea'
idea {
    project {
        jdkName = javaVersion
        languageLevel = javaVersion
    }
    module {
        generatedSourceDirs += file('gen')
    }
}

def getJflexArguments(srcFlex, targetDir) {
    return [
            "-sliceandcharat",
            "--skel", "grammar/Perl5.skeleton",
            "-d", targetDir,
            srcFlex
    ]
}

task generatePerl5Parser(type: JavaExec) {
    ext.src = file("grammar/Perl5.bnf")
    ext.dstRoot = "gen"

    main = "org.intellij.grammar.Main"

    args = [dstRoot, src]

    inputs.file file(src)
    outputs.file file(dstRoot + '/com/perl5/lang/perl/parser/PerlParserGenerated.java')
    outputs.dir fileTree(dir: dstRoot + '/com/perl5/lang/perl/psi', include: '**/*.java')

    classpath configurations.gen
}

task generatePodParser(type: JavaExec) {
    ext.src = "grammar/Pod.bnf"
    ext.dstRoot = "gen"

    main = "org.intellij.grammar.Main"

    args = [dstRoot, file(src)]

    inputs.file file(src)
    ext.somefile = file(dstRoot + '/com/perl5/lang/pod/parser/PodParser.java')
    outputs.dir fileTree(dir: dstRoot + '/com/perl5/lang/pod/psi', include: '**/*.java')

    classpath configurations.gen
}

// fxime dry this
task generatePerlLexer(type: JavaExec) {
    dependsOn generatePerl5Parser
    ext.src = "grammar/Perl.flex"
    ext.dst = "gen/com/perl5/lang/perl/lexer/"
    main = "JFlex.Main"
    args = getJflexArguments(src, dst)
    inputs.file file(src)
    outputs.file file(dst+ "PerlLexerGenerated.java")
    classpath configurations.gen
}

task generatePodLexer(type: JavaExec) {
    dependsOn generatePodParser
    ext.src = "grammar/Pod.flex"
    ext.dst = "gen/com/perl5/lang/pod/lexer/"
    main = "JFlex.Main"
    args = getJflexArguments(src, dst)
    inputs.file file(src)
    outputs.file file(dst+ "PodLexer.java")
    classpath configurations.gen
}

task generatePerlStringLexer(type: JavaExec) {
    dependsOn generatePerl5Parser
    ext.src = "grammar/PerlString.flex"
    ext.dst = "gen/com/perl5/lang/perl/lexer/"
    main = "JFlex.Main"
    args = getJflexArguments(src, dst)
    inputs.file file(src)
    outputs.file file(dst + "PerlStringLexerGenerated.java")
    classpath configurations.gen
}

task generateLexers{
    dependsOn generatePerlLexer
    dependsOn generatePerlStringLexer
    dependsOn generatePodLexer
}

// doesn't work
jar.archiveName = "camelcade.jar"

compileJava{
    dependsOn generateLexers
}
