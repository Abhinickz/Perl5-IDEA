/*
 * Copyright 2016 Alexandr Evstigneev
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        maven { url 'http://dl.bintray.com/jetbrains/intellij-plugin-service' }
    }
}

plugins {
    id "org.jetbrains.intellij" version "0.1.10"
}

version = "$version$buildNumber"

apply plugin: 'java'
sourceCompatibility = javaVersion
targetCompatibility = javaTargetVersion
tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }

sourceSets {
    main {
        java.srcDirs 'src', 'gen'
        resources.srcDir 'resources'
    }
    test {
        java.srcDir 'test'
        resources.srcDirs 'testData', 'testDataHeavy'
    }
}

apply plugin: 'org.jetbrains.intellij'
intellij {
    version ideaVersion
    plugins = ['yaml']
    downloadSources Boolean.valueOf(downloadIdeaSource)
    if (project.hasProperty('idea_sandbox')) {
        sandboxDirectory project.rootDir.canonicalPath + "/" + project.idea_sandbox
    } else {
        sandboxDirectory project.rootDir.canonicalPath + "/.sandbox"
    }
    if (project.hasProperty('idea_path')) {
        alternativeIdePath = project.idea_path
    }
    updateSinceUntilBuild = false
}

test {
    doFirst {
        systemProperty("idea.plugins.path", project.rootDir.canonicalPath + "/.test-plugins")
    }
    useJUnit {
        if (project.hasProperty("perf")) {
            includeCategories 'categories.Performance'
        } else {
            excludeCategories 'categories.Performance'
        }
        if (project.hasProperty("heavy")) {
            includeCategories 'categories.Heavy'
        } else {
            excludeCategories 'categories.Heavy'
        }
    }
    testLogging {
        exceptionFormat = 'full'
        showStandardStreams = true
    }
}

repositories {
    mavenCentral()
}

configurations {
    lexer
    parser
}

dependencies {
    lexer files('lib/jflex-1.7.0-SNAPSHOT.jar')
    parser files('lib/grammar-kit.jar')
}

project.afterEvaluate {
    prepareSandbox.doLast {
        def perlUtils = "$it.destinationDir/perl/"
        def XSParser = file("perl-utils/xs_parser_simple.pl")
        copy {
            from XSParser
            into perlUtils
        }

        def perlAnnotations = "$it.destinationDir/plugin.annotations/"
        def perlAnnotationsSource = "annotations"
        copy {
            from perlAnnotationsSource
            into perlAnnotations
            include "**/*.pmea"
        }
    }
}

apply plugin: 'idea'
idea {
    project {
        jdkName = javaVersion
        languageLevel = javaVersion
    }
    module {
        generatedSourceDirs += file('gen')
    }
}


def getJflexArguments(srcFlex, targetDir) {
    return [
            "--skel", "$lexer_skeleton",
            "-d", targetDir,
            srcFlex
    ]
}

task generatePerl5Parser(type: JavaExec) {
    ext.src = file("grammar/Perl5.bnf")
    ext.dstRoot = "gen"

    main = "org.intellij.grammar.Main"

    args = [dstRoot, src]

    inputs.file file(src)
    outputs.file file(dstRoot + '/com/perl5/lang/perl/parser/PerlParserGenerated.java')
    outputs.dir fileTree(dir: dstRoot + '/com/perl5/lang/perl/psi', include: '**/*.java')

    classpath configurations.compile + configurations.parser
}

task generatePodParser(type: JavaExec) {
    ext.src = "grammar/Pod.bnf"
    ext.dstRoot = "gen"

    main = "org.intellij.grammar.Main"

    args = [dstRoot, file(src)]

    inputs.file file(src)
    outputs.file file(dstRoot + '/com/perl5/lang/pod/parser/PodParserGenerated.java')
    outputs.dir fileTree(dir: dstRoot + '/com/perl5/lang/pod/psi', include: '**/*.java')

    classpath configurations.compile + configurations.parser
}

task generateTT2Parser(type: JavaExec) {
    ext.src = "grammar/TemplateToolkit.bnf"
    ext.dstRoot = "gen"

    main = "org.intellij.grammar.Main"

    args = [dstRoot, file(src)]

    inputs.file file(src)
    outputs.file file(dstRoot + '/com/perl5/lang/tt2/parser/TemplateToolkitParserGenerated.java')
    outputs.dir fileTree(dir: dstRoot + '/com/perl5/lang/tt2/psi', include: '**/*.java')

    classpath configurations.compile + configurations.parser
}

// fxime dry this
task generatePerlLexer(type: JavaExec) {
    dependsOn generatePerl5Parser
    ext.src = "grammar/Perl.flex"
    ext.dst = "gen/com/perl5/lang/perl/lexer/"
    main = "jflex.Main"
    args = getJflexArguments(src, dst)
    inputs.file file(src)
    inputs.file file("$lexer_skeleton")
    outputs.file file(dst + "PerlLexerGenerated.java")

    classpath configurations.lexer
}

task generatePerlAnnotationsLexer(type: JavaExec) {
    dependsOn generatePerlLexer
    ext.src = "grammar/PerlAnnotations.flex"
    ext.dst = "gen/com/perl5/lang/perl/lexer/"
    main = "jflex.Main"
    args = getJflexArguments(src, dst)
    inputs.file file(src)
    inputs.file file("$lexer_skeleton")
    outputs.file file(dst + "PerlAnnotationsLexerGenerated.java")

    classpath configurations.lexer
}

task generatePodLexer(type: JavaExec) {
    dependsOn generatePodParser
    ext.src = "grammar/Pod.flex"
    ext.dst = "gen/com/perl5/lang/pod/lexer/"
    main = "jflex.Main"
    args = getJflexArguments(src, dst)
    inputs.file file(src)
    inputs.file file("$lexer_skeleton")
    outputs.file file(dst + "PodLexerGenerated.java")
    classpath configurations.lexer
}

task generateTT2Lexer(type: JavaExec) {
    dependsOn generateTT2Parser
    ext.src = "grammar/TemplateToolkit.flex"
    ext.dst = "gen/com/perl5/lang/tt2/lexer/"
    main = "jflex.Main"
    args = getJflexArguments(src, dst)
    inputs.file file(src)
    inputs.file file("$lexer_skeleton")
    outputs.file file(dst + "TemplateToolkitLexerGenerated.java")
    classpath configurations.lexer
}

task generatePerlStringLexer(type: JavaExec) {
    dependsOn generatePerl5Parser
    ext.src = "grammar/PerlString.flex"
    ext.dst = "gen/com/perl5/lang/perl/lexer/"
    main = "jflex.Main"
    args = getJflexArguments(src, dst)
    inputs.file file(src)
    inputs.file file("$lexer_skeleton")
    outputs.file file(dst + "PerlStringLexerGenerated.java")
    classpath configurations.lexer
}

task generateLexers {
    dependsOn generatePerlLexer
    dependsOn generatePerlAnnotationsLexer
    dependsOn generatePerlStringLexer
    dependsOn generatePodLexer
    dependsOn generateTT2Lexer
}

// doesn't work
jar.archiveName = "camelcade.jar"


compileJava {
    dependsOn generateLexers
}
