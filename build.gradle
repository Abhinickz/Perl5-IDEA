/*
 * Copyright 2016 Alexandr Evstigneev
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        maven { url 'http://dl.bintray.com/jetbrains/intellij-plugin-service' }
    }
}

plugins {
    id "org.jetbrains.intellij" version "0.2.5"
}

version = "$version$buildNumber"

apply plugin: 'java'
sourceCompatibility = javaVersion
targetCompatibility = javaTargetVersion
tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }

sourceSets {
    main {
        java.srcDirs 'src', 'gen'
        resources.srcDir 'resources'
    }
    test {
        java.srcDir 'test'
        resources.srcDirs 'testData', 'testDataHeavy'
    }
}

apply plugin: 'org.jetbrains.intellij'
intellij {
    version ideaVersion
    downloadSources Boolean.valueOf(downloadIdeaSource)
    if (project.hasProperty('idea_sandbox')) {
        sandboxDirectory project.rootDir.canonicalPath + "/" + project.idea_sandbox
    } else {
        sandboxDirectory project.rootDir.canonicalPath + "/.sandbox"
    }
    if (project.hasProperty('idea_path')) {
        alternativeIdePath = project.idea_path
    }
    updateSinceUntilBuild = false
}

test {
    doFirst {
        systemProperty("idea.plugins.path", project.rootDir.canonicalPath + "/.test-plugins")
    }
    useJUnit {
        if (project.hasProperty("runtest")) {
            include '**/' + project.property('runtest') + '.class'
        } else {
            if (project.hasProperty("perf")) {
                includeCategories 'categories.Performance'
            } else {
                excludeCategories 'categories.Performance'
            }
            if (project.hasProperty("heavy")) {
                includeCategories 'categories.Heavy'
            } else {
                excludeCategories 'categories.Heavy'
            }
        }
    }
    testLogging {
        exceptionFormat = 'full'
        showStandardStreams = true
    }
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    compileOnly('com.github.JetBrains:Grammar-Kit:34fd65b92a') {
        exclude group: 'org.jetbrains.plugins'
        exclude module: 'idea'
    }
    testCompile 'junit:junit:4.+'
}

project.afterEvaluate {
    prepareSandbox.doLast {
        def perlUtils = "$it.destinationDir/$intellij.pluginName/perl/"
        def XSParser = file("perl-utils/xs_parser_simple.pl")
        copy {
            from XSParser
            into perlUtils
        }
    }
}

apply plugin: 'idea'
idea {
    project {
        jdkName = javaVersion
        languageLevel = javaVersion
    }
    module {
        generatedSourceDirs += file('gen')
    }
}

task generatePerl5Parser(type: JavaExec) {
    ext.src = file("grammar/Perl5.bnf")
    ext.dstRoot = "gen"

    main = "org.intellij.grammar.Main"

    args = [dstRoot, src]

    inputs.file file(src)
    outputs.file file(dstRoot + '/com/perl5/lang/perl/parser/PerlParserGenerated.java')
    outputs.dir dstRoot + '/com/perl5/lang/perl/psi'

    classpath configurations.compile + configurations.compileOnly
}

task generatePodParser(type: JavaExec) {
    ext.src = "grammar/Pod.bnf"
    ext.dstRoot = "gen"

    main = "org.intellij.grammar.Main"

    args = [dstRoot, file(src)]

    inputs.file file(src)
    outputs.file file(dstRoot + '/com/perl5/lang/pod/parser/PodParserGenerated.java')
    outputs.dir dstRoot + '/com/perl5/lang/pod/psi'

    classpath configurations.compile + configurations.compileOnly
}

task generateTT2Parser(type: JavaExec) {
    ext.src = "grammar/TemplateToolkit.bnf"
    ext.dstRoot = "gen"

    main = "org.intellij.grammar.Main"

    args = [dstRoot, file(src)]

    inputs.file file(src)
    outputs.file file(dstRoot + '/com/perl5/lang/tt2/parser/TemplateToolkitParserGenerated.java')
    outputs.dir dstRoot + '/com/perl5/lang/tt2/psi'

    classpath configurations.compile + configurations.compileOnly
}


task generatePerlLexer(type: GenerateFlexLexer) {
    dependsOn generatePerl5Parser
    source = "grammar/Perl.flex"
    targetDir = "gen/com/perl5/lang/perl/lexer/"
    targetClass = "PerlLexer"
}

task generatePodLexer(type: GenerateFlexLexer) {
    dependsOn generatePodParser
    source = "grammar/Pod.flex"
    targetDir = "gen/com/perl5/lang/pod/lexer/"
    targetClass = "PodLexerGenerated"
}

task generateTT2Lexer(type: GenerateFlexLexer) {
    dependsOn generateTT2Parser
    source = "grammar/TemplateToolkit.flex"
    targetDir = "gen/com/perl5/lang/tt2/lexer/"
    targetClass = "TemplateToolkitLexerGenerated"
}


task generateEmbeddedPerlLexer(type: GenerateFlexLexer) {
    dependsOn generatePerl5Parser
    source = "grammar/EmbeddedPerl.flex"
    targetDir = "gen/com/perl5/lang/embedded/lexer/"
    targetClass = "EmbeddedPerlLexer"
}

task generateHTMLMasonLexer(type: GenerateFlexLexer) {
    dependsOn generatePerl5Parser
    source = "grammar/HTMLMason.flex"
    targetDir = "gen/com/perl5/lang/htmlmason/lexer/"
    targetClass =  "HTMLMasonLexer"
}
task generateMason2Lexer(type: GenerateFlexLexer) {
    dependsOn generatePerl5Parser
    source = "grammar/Mason2.flex"
    targetDir = "gen/com/perl5/lang/mason2/lexer/"
    targetClass = "Mason2TemplatingLexer"
}
task generateMojoliciousLexer(type: GenerateFlexLexer) {
    dependsOn generatePerl5Parser
    source = "grammar/Mojolicious.flex"
    targetDir = "gen/com/perl5/lang/mojolicious/lexer/"
    targetClass = "MojoliciousLexer"
}


task generateLexers {
    dependsOn generatePerlLexer
    dependsOn generatePodLexer
    dependsOn generateTT2Lexer

    dependsOn generateEmbeddedPerlLexer
    dependsOn generateHTMLMasonLexer
    dependsOn generateMason2Lexer
    dependsOn generateMojoliciousLexer

}

// doesn't work
jar.archiveName = "camelcade.jar"


compileJava {
    dependsOn generateLexers
}

class GenerateFlexLexer extends JavaExec {

    def jFlexPath = 'lib/jflex-1.7.0-SNAPSHOT.jar'
    def targetDir
    def targetClass
    def source
    def skeleton = project.property("lexer_skeleton")

    GenerateFlexLexer() {
        project.afterEvaluate({
            setMain("jflex.Main")
            classpath(project.file(jFlexPath))
            inputs.file project.file(source)
            if( skeleton != null )
            {
                inputs.file project.file(skeleton)
            }
            outputs.file project.file("${targetDir}/${targetClass}.java")

            def newArgs = []
            if( skeleton != null)
            {
                newArgs.add("--skel")
                newArgs.add(skeleton)
            }
            newArgs.add("-d")
            newArgs.add(targetDir)
            newArgs.add(source)
            args(newArgs)
        })
    }
}
