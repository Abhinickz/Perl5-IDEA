{
  psiVisitorName="TemplateToolkitVisitorGenerated"

  tokenTypeClass="com.perl5.lang.tt2.elementTypes.TemplateToolkitTokenType"
  elementTypeClass="com.perl5.lang.tt2.elementTypes.TemplateToolkitElementType"
  elementTypeHolderClass="com.perl5.lang.tt2.lexer.TemplateToolkitElementTypesGenerated"
  elementTypeFactory="com.perl5.lang.tt2.elementTypes.TemplateToolkitElementTypeFactory.getElementType"
  tokenTypeFactory="com.perl5.lang.tt2.elementTypes.TemplateToolkitElementTypeFactory.getTokenType"

  parserUtilClass="com.perl5.lang.tt2.parser.TemplateToolkitParserUtil"
  parserClass="com.perl5.lang.tt2.parser.TemplateToolkitParserGenerated"

  extends="com.perl5.lang.tt2.psi.impl.TemplateToolkitCompositeElementImpl"

  psiClassPrefix="Psi"
  psiImplClassSuffix="Impl"
  psiPackage="com.perl5.lang.tt2.psi"
  psiImplPackage="com.perl5.lang.tt2.psi.impl"

	extends(".+_expr")=expr


//  psiImplUtilClass="com.perl5.lang.tt2.psi.impl.TemplateToolkitPsiImplUtil"

    tokens=[
	TT2_OUTER="TT2_OUTER"
	TT2_HTML="TT2_HTML"

	LINE_COMMENT="LINE_COMMENT"

	TT2_OPEN_TAG="[%"
	TT2_CLOSE_TAG="%]"
	TT2_OUTLINE_TAG="%%"
	TT2_HARD_NEWLINE="OUTLINE_END"

	TT2_IDENTIFIER="TT2_IDENTIFIER"
	TT2_SYMBOL="TT2_SYMBOL"
	TT2_NUMBER="TT2_NUMBER"
	TT2_NUMBER_SIMPLE="TT2_NUMBER_SIMPLE"

	TT2_SHARP="#"
	TT2_LEFT_PAREN="("
	TT2_RIGHT_PAREN=")"
	TT2_LEFT_BRACKET="["
	TT2_RIGHT_BRACKET="]"
	TT2_LEFT_BRACE="{"
	TT2_RIGHT_BRACE="}"
	TT2_ASSIGN="="
	TT2_HASH_ASSIGN="=>"
	TT2_SIGIL_SCALAR="$"

	TT2_SQ="SQ"
	TT2_SQ_OPEN="SQ_OPEN"
	TT2_SQ_CLOSE="SQ_CLOSE"

	TT2_DQ="DQ"
	TT2_DQ_OPEN="DQ_OPEN"
	TT2_DQ_CLOSE="DQ_CLOSE"

	TT2_ESCAPE="\\"
	TT2_STRING_CONTENT="STRING_CONTENT"

	TT2_PERIOD="."
	TT2_COMMA=","

	TT2_EQUAL="=="
	TT2_NOT_EQUAL="!="
	TT2_LT="<"
	TT2_LE="<="
	TT2_GT=">"
	TT2_GE=">="
	TT2_AND="&&"
	TT2_OR="||"
	TT2_NOT="!"
	TT2_QUESTION="?"
	TT2_COLON=":"
	TT2_PLUS="+"
	TT2_MINUS="-"
	TT2_MUL="*"
	TT2_DIV="/"
	TT2_MOD="%"
	TT2_CONCAT="_"
	TT2_RANGE=".."

	TT2_DIV_TEXT="div"
	TT2_AND_TEXT="and"
	TT2_OR_TEXT="or"
	TT2_NOT_TEXT="not"
	TT2_MOD_TEXT="mod"

	TT2_GET="GET"
	TT2_CALL="CALL"
	TT2_SET="SET"
	TT2_DEFAULT="DEFAULT"
	TT2_INSERT="INSERT"
	TT2_INCLUDE="INCLUDE"
	TT2_PROCESS="PROCESS"
	TT2_WRAPPER="WRAPPER"
	TT2_BLOCK="BLOCK"
	TT2_END="END"
	TT2_IF="IF"
	TT2_IN="IN"
	TT2_UNLESS="UNLESS"
	TT2_ELSIF="ELSIF"
	TT2_ELSE="ELSE"
	TT2_SWITCH="SWITCH"
	TT2_CASE="CASE"
	TT2_FOREACH="FOREACH"
	TT2_WHILE="WHILE"
	TT2_FILTER="FILTER"
	TT2_USE="USE"
	TT2_MACRO="MACRO"
	TT2_PERL="PERL"
	TT2_RAWPERL="RAWPERL"
	TT2_TRY="TRY"
	TT2_THROW="THROW"
	TT2_CATCH="CATCH"
	TT2_FINAL="FINAL"
	TT2_NEXT="NEXT"
	TT2_LAST="LAST"
	TT2_RETURN="RETURN"
	TT2_STOP="STOP"
	TT2_CLEAR="CLEAR"
	TT2_META="META"
	TT2_TAGS="TAGS"
	TT2_DEBUG="DEBUG"
    ]
}

root ::= element *
private element ::= <<parseBlockComment>> | <<parseDirective>>

private directive_expr ::=
	call_directive_expr |
	default_directive_expr |
	insert_directive_expr |
	include_directive_expr |
	process_directive_expr |
	block_directive_expr |
	throw_directive_expr |
	switch_directive_expr |
	use_directive_expr |
	macro_directive_expr |

	block_directives |
	reply_directives |

	set_directive |
	get_directive_expr

// these directives should be annotated as errors if they are outside of the blocks
private reply_directives ::=
	end_directive_expr |
	elsif_directive_expr |
	case_directive_expr |
	else_directive_expr

// these directives may be used in postfix form
private block_directives ::=
	anon_block_directive_expr |
	wrapper_directive_expr |
	if_directive_expr |
	unless_directive_expr |
	foreach_directive_expr |
	while_directive_expr |
	filter_directive_expr

call_directive_expr ::= TT2_CALL expr {pin=1}
get_directive_expr ::= [TT2_GET] expr

private set_directive ::= [TT2_SET] assign_expr +

default_directive_expr ::= TT2_DEFAULT assign_expr + {pin=1}

insert_directive_expr ::= TT2_INSERT variable_strings_or_files {pin=1}

private variable_strings_or_files ::= variable_or_strings | insert_files
private variable_strings_or_stringify ::= variable_or_strings | convert_to_string
private variable_or_strings ::= variable_expr | strings_argument

foreach_directive_expr ::= TT2_FOREACH [foreach_iterator_] foreach_iterable {pin=1}
private foreach_iterator_ ::= foreach_iterator {TT2_ASSIGN|TT2_IN} {pin=2}
foreach_iterator ::= keyword_or_identifier_term {pin=2}
foreach_iterable ::= expr

foreach_block ::= foreach_directive_expr element * end_directive_expr // fake rule to generate psi

private strings_argument ::= string_argument (TT2_PLUS string_argument) *
private string_argument ::= dq_string_expr | sq_string_expr

private insert_files ::= convert_to_string (TT2_PLUS convert_to_string) *
private convert_to_string ::= <<parseFileAsString>>

include_directive_expr ::= TT2_INCLUDE variable_strings_or_files assign_expr * {pin=1}

process_directive_expr ::= TT2_PROCESS variable_strings_or_files assign_expr * {pin=1}

wrapper_directive_expr ::= TT2_WRAPPER variable_strings_or_files assign_expr * {pin=1}

filter_directive_expr ::= TT2_FILTER filter_arguments {pin=1}
private filter_arguments ::= variable_expr | assign_expr | identifier_expr

filter_block ::= filter_directive_expr element * end_directive_expr // fake rule to generate psi

macro_directive_expr ::= TT2_MACRO macro_name macro_content {pin=1}
macro_name ::= keyword_or_identifier_term [call_arguments]
macro_content ::= !(TT2_MACRO) <<parseMacroBody>>

use_directive_expr ::= TT2_USE [use_instantiation] use_module {pin=1}
private use_instantiation ::= use_instance TT2_ASSIGN
use_instance ::= keyword_or_identifier_term
private use_module ::= module_name [module_params]
module_name ::= identifier_expr
module_params ::= call_arguments_


while_directive_expr ::= TT2_WHILE expr {pin=1}
while_block ::= while_directive_expr element* end_directive_expr // fake rule to generate psi

throw_directive_expr ::= TT2_THROW exception_type exception_message [exception_args] {pin=1}
exception_type ::= variable_strings_or_stringify
exception_message ::= expr
exception_args ::= {assign_expr|expr}+

switch_directive_expr ::= TT2_SWITCH expr {pin=1}
case_directive_expr ::= TT2_CASE [TT2_DEFAULT|expr] {pin=1}

switch_block ::= switch_directive_expr case_block * end_directive_expr // fake rule to make psi element
case_block ::= case_directive_expr element *

if_directive_expr ::= TT2_IF expr {pin=1}
unless_directive_expr ::= TT2_UNLESS expr {pin=1}
elsif_directive_expr ::= TT2_ELSIF expr {pin=1}
else_directive_expr ::= TT2_ELSE {pin=1}

if_block ::= if_branch if_sequence // fake rule to make psi element
unless_block ::= unless_branch if_sequence // fake rule to make psi element
private if_sequence ::= elsif_branch * [else_branch] end_directive_expr
if_branch ::= if_directive_expr element *
unless_branch ::= unless_directive_expr element *
elsif_branch ::= elsif_directive_expr element *
else_branch ::= else_directive_expr element *

wrapper_block ::= wrapper_directive_expr element* end_directive_expr // fake rule to make psi element

end_directive_expr ::= TT2_END

named_block ::= block_directive_expr element * end_directive_expr // fake rule to make psi element
block_directive_expr ::= TT2_BLOCK block_name {pin=1}
block_name ::= keyword_or_identifier_term

anon_block ::= anon_block_directive_expr element * end_directive_expr // fake rule to make psi element
anon_block_directive_expr ::= identifier_expr TT2_ASSIGN TT2_BLOCK {pin=3}

hash_expr ::= TT2_LEFT_BRACE hash_expr_content TT2_RIGHT_BRACE {pin=1}
private hash_expr_content ::= {hash_expr_item [TT2_COMMA]} *
private hash_expr_item ::= pair_expr {pin=2 recoverWhile=recover_hash_expr_item}
pair_expr ::= <<parseHashKey>> (TT2_ASSIGN|TT2_HASH_ASSIGN) expr
private recover_hash_expr_item ::= !(TT2_IDENTIFIER|TT2_RIGHT_BRACE|TT2_COMMA|TT2_HARD_NEWLINE|[TT2_MINUS]TT2_CLOSE_TAG)

array_expr ::= TT2_LEFT_BRACKET array_expr_content TT2_RIGHT_BRACKET {pin=1}
private array_expr_content ::= (expr [TT2_COMMA]) * {recoverWhile=recover_array_content}
private recover_array_content ::= !(TT2_RIGHT_BRACKET|TT2_HARD_NEWLINE|[TT2_MINUS]TT2_CLOSE_TAG)

expr ::=
	assign_expr |
	ternar_expr |
	range_expr |
	or_expr |
	and_expr |
	equal_expr |
	compare_expr |
	add_expr |
	mul_expr |
	unary_expr |
	term_expr

assign_expr ::= identifier_expr TT2_ASSIGN expr {rightAssociative=true}
ternar_expr ::= expr TT2_QUESTION expr TT2_COLON expr { rightAssociative=true }
range_expr ::= expr TT2_RANGE expr
or_expr ::= expr ((TT2_OR|TT2_OR_TEXT) expr )+
and_expr ::= expr ((TT2_AND|TT2_AND_TEXT) expr)+
equal_expr ::= expr (TT2_EQUAL|TT2_NOT_EQUAL) expr
compare_expr ::= expr (TT2_LE|TT2_LT|TT2_GT|TT2_GE) expr
add_expr ::= expr ((TT2_PLUS|TT2_MINUS !(TT2_CLOSE_TAG)|TT2_CONCAT) expr)+
mul_expr ::= expr ((TT2_MUL|TT2_DIV|TT2_MOD|TT2_DIV_TEXT|TT2_MOD_TEXT) expr)+
unary_expr ::= (TT2_NOT|TT2_NOT_TEXT) expr {rightAssociative=true }

parenthesised_expr ::= TT2_LEFT_PAREN parenthesised_item_content TT2_RIGHT_PAREN {pin=1}
private parenthesised_item_content ::= expr {recoverWhile=recover_parenthesised_item}
private recover_parenthesised_item ::= !(TT2_RIGHT_PAREN|TT2_HARD_NEWLINE|[TT2_MINUS]TT2_CLOSE_TAG)

identifier_expr ::= identifier_expr_content
private identifier_expr_content ::= TT2_IDENTIFIER (TT2_PERIOD deref_part)*
private deref_part ::=
	call_expr |
	variable_expr |
	TT2_NUMBER_SIMPLE |
	keyword_or_identifier_term

variable_expr ::= TT2_SIGIL_SCALAR {variable_braced|identifier_expr_content}
private variable_braced ::= TT2_LEFT_BRACE variable_braced_content TT2_RIGHT_BRACE {pin=1}
private variable_braced_content ::= identifier_expr_content {recoverWhile=recover_braced_variable}
private recover_braced_variable ::= !(TT2_RIGHT_BRACE|TT2_HARD_NEWLINE|[TT2_MINUS]TT2_CLOSE_TAG)

call_expr ::= keyword_or_identifier_term call_arguments
call_arguments ::= call_arguments_
private call_arguments_ ::= TT2_LEFT_PAREN call_arguments_content ? TT2_RIGHT_PAREN {pin=1}
private call_arguments_content ::= call_arguments_item (TT2_COMMA call_arguments_item)* {recoverWhile=recover_parenthesised_item}
private call_arguments_item ::= pair_expr | expr

block_comment ::= expr

term_expr ::=
	parenthesised_expr |
	hash_expr |
	array_expr |
	variable_expr |
	call_expr |
	identifier_expr |
	sq_string_expr |
	dq_string_expr |
	TT2_SYMBOL |
	[TT2_MINUS] TT2_NUMBER |
	[TT2_MINUS] TT2_NUMBER_SIMPLE |
	keyword_or_identifier_term

sq_string_expr ::= TT2_SQ_OPEN sq_string_content TT2_SQ_CLOSE {pin=1}
private sq_string_content ::= TT2_STRING_CONTENT* {recoverWhile=recover_sq_string}
private recover_sq_string ::= !(TT2_SQ_CLOSE|TT2_HARD_NEWLINE|[TT2_MINUS]TT2_CLOSE_TAG)

dq_string_expr ::= TT2_DQ_OPEN dq_string_content TT2_DQ_CLOSE {pin=1}
private dq_string_content ::= TT2_STRING_CONTENT* {recoverWhile=recover_dq_string}
private recover_dq_string ::= !(TT2_DQ_CLOSE|TT2_HARD_NEWLINE|[TT2_MINUS]TT2_CLOSE_TAG)

private keyword_or_identifier_term ::= <<parseIdentifier>>
