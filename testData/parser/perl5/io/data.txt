Perl5
  PsiComment(PerlTokenType.COMMENT_LINE)('#!./perl')
  PsiComment(PerlTokenType.COMMENT_LINE)('# tests for DATA filehandle operations')
  PsiPerlNamedBlockImpl(PerlElementType.PerlTokenType.NAMED_BLOCK)
    PsiElement(PerlTokenType.BLOCK_NAME)('BEGIN')
    PsiPerlBlockImpl(PerlElementType.PerlTokenType.BLOCK)
      PsiElement(PerlTokenType.LEFT_BRACE)('{')
      PsiPerlStatementImpl(PerlElementType.PerlTokenType.STATEMENT)
        PsiPerlNamedUnaryExprImpl(PerlElementType.PerlTokenType.NAMED_UNARY_EXPR)
          PsiPerlMethodImpl(PerlElementType.PerlTokenType.METHOD)
            PsiElement(PerlTokenType.SUB)('chdir')
          PsiPerlStringSqImpl(PerlElementType.PerlTokenType.STRING_SQ)
            PsiElement(PerlTokenType.QUOTE_SINGLE_OPEN)(''')
            PsiElement(PerlTokenType.STRING_IDENTIFIER)('t')
            PsiElement(PerlTokenType.QUOTE_SINGLE_CLOSE)(''')
        PsiPerlIfStatementModifierImpl(PerlElementType.PerlTokenType.IF_STATEMENT_MODIFIER)
          PsiElement(PerlTokenType.if)('if')
          PsiPerlNamedUnaryExprImpl(PerlElementType.PerlTokenType.NAMED_UNARY_EXPR)
            PsiElement(PerlTokenType.OPERATOR_FILETEST)('-d')
            PsiPerlStringSqImpl(PerlElementType.PerlTokenType.STRING_SQ)
              PsiElement(PerlTokenType.QUOTE_SINGLE_OPEN)(''')
              PsiElement(PerlTokenType.STRING_IDENTIFIER)('t')
              PsiElement(PerlTokenType.QUOTE_SINGLE_CLOSE)(''')
        PsiElement(PerlTokenType.;)(';')
      PsiPerlStatementImpl(PerlElementType.PerlTokenType.STATEMENT)
        PsiPerlAssignExprImpl(PerlElementType.PerlTokenType.ASSIGN_EXPR)
          PsiPerlArrayVariableImpl(PerlElementType.PerlTokenType.ARRAY_VARIABLE)
            PsiElement(PerlTokenType.SIGIL_ARRAY)('@')
            PsiElement(PerlTokenType.VARIABLE_NAME)('INC')
          PsiElement(PerlTokenType.=)('=')
          PsiPerlStringSqImpl(PerlElementType.PerlTokenType.STRING_SQ)
            PsiElement(PerlTokenType.QUOTE_SINGLE_OPEN)(''')
            PsiElement(PerlTokenType.STRING_CONTENT)('..')
            PsiElement(PerlTokenType.STRING_CONTENT)('/')
            PsiElement(PerlTokenType.STRING_IDENTIFIER)('lib')
            PsiElement(PerlTokenType.QUOTE_SINGLE_CLOSE)(''')
        PsiElement(PerlTokenType.;)(';')
      PsiPerlStatementImpl(PerlElementType.PerlTokenType.STATEMENT)
        PsiPerlRequireExprImpl(PERL_REQUIRE_EXPR)
          PsiElement(PerlTokenType.require)('require')
          PsiPerlStringSqImpl(PerlElementType.PerlTokenType.STRING_SQ)
            PsiElement(PerlTokenType.QUOTE_SINGLE_OPEN)(''')
            PsiElement(PerlTokenType.STRING_CONTENT)('.')
            PsiElement(PerlTokenType.STRING_CONTENT)('/')
            PsiElement(PerlTokenType.STRING_IDENTIFIER)('test')
            PsiElement(PerlTokenType.STRING_CONTENT)('.')
            PsiElement(PerlTokenType.STRING_IDENTIFIER)('pl')
            PsiElement(PerlTokenType.QUOTE_SINGLE_CLOSE)(''')
        PsiElement(PerlTokenType.;)(';')
      PsiElement(PerlTokenType.RIGHT_BRACE)('}')
  PsiPerlStatementImpl(PerlElementType.PerlTokenType.STATEMENT)
    PsiPerlAssignExprImpl(PerlElementType.PerlTokenType.ASSIGN_EXPR)
      PsiPerlScalarVariableImpl(PerlElementType.PerlTokenType.SCALAR_VARIABLE)
        PsiElement(PerlTokenType.SIGIL_SCALAR)('$')
        PsiElement(PerlTokenType.VARIABLE_NAME)('|')
      PsiElement(PerlTokenType.=)('=')
      PsiPerlNumberConstantImpl(PerlElementType.PerlTokenType.NUMBER_CONSTANT)
        PsiElement(PerlTokenType.NUMBER_SIMPLE)('1')
    PsiElement(PerlTokenType.;)(';')
  PsiComment(PerlTokenType.COMMENT_LINE)('# It is important that all these tests are run via fresh_perl because')
  PsiComment(PerlTokenType.COMMENT_LINE)('# that way they get written to disk in text mode and will have CR-LF')
  PsiComment(PerlTokenType.COMMENT_LINE)('# line endings on Windows.  Otherwise the failures related to Perl')
  PsiComment(PerlTokenType.COMMENT_LINE)('# code being read in binary mode will not be observed.')
  PsiPerlStatementImpl(PerlElementType.PerlTokenType.STATEMENT)
    PsiPerlSubCallExprImpl(PerlElementType.PerlTokenType.SUB_CALL_EXPR)
      PsiPerlMethodImpl(PerlElementType.PerlTokenType.METHOD)
        PsiElement(PerlTokenType.SUB)('run_multiple_progs')
      PsiElement(PerlTokenType.LEFT_PAREN)('(')
      PsiPerlCallArgumentsImpl(PerlElementType.PerlTokenType.CALL_ARGUMENTS)
        PsiPerlCommaSequenceExprImpl(PerlElementType.PerlTokenType.COMMA_SEQUENCE_EXPR)
          PsiPerlStringSqImpl(PerlElementType.PerlTokenType.STRING_SQ)
            PsiElement(PerlTokenType.QUOTE_SINGLE_OPEN)(''')
            PsiElement(PerlTokenType.QUOTE_SINGLE_CLOSE)(''')
          PsiElement(PerlTokenType.,)(',')
          PsiPerlRefExprImpl(PerlElementType.PerlTokenType.REF_EXPR)
            PsiElement(PerlTokenType.\\)('\')
            PsiPerlGlobVariableImpl(*)
              PsiElement(PerlTokenType.SIGIL_GLOB)('*')
              PsiElement(PerlTokenType.VARIABLE_NAME)('DATA')
      PsiElement(PerlTokenType.RIGHT_PAREN)(')')
    PsiElement(PerlTokenType.;)(';')
  PsiPerlStatementImpl(PerlElementType.PerlTokenType.STATEMENT)
    PsiPerlSubCallExprImpl(PerlElementType.PerlTokenType.SUB_CALL_EXPR)
      PsiPerlMethodImpl(PerlElementType.PerlTokenType.METHOD)
        PsiElement(PerlTokenType.SUB)('done_testing')
      PsiElement(PerlTokenType.LEFT_PAREN)('(')
      PsiElement(PerlTokenType.RIGHT_PAREN)(')')
    PsiElement(PerlTokenType.;)(';')
  PsiComment(PerlTokenType.COMMENT_BLOCK)('__END__\n# http://rt.perl.org/rt3/Ticket/Display.html?id=28106#txn-82657\nwhile (<DATA>) {\n    chomp;\n    print "$.: '$_'\n";\n    system();\n}\n__DATA__\n1\n2\n3\nEXPECT\n1: '1'\n2: '2'\n3: '3'\n########\n# http://rt.perl.org/rt3/Ticket/Display.html?id=28106#txn-83113\nmy $line1 = <DATA>;\n`echo foo`;\nmy $line2 = <DATA>;\nif ($line1 eq "one\n") { print "ok 1\n" } else { print "not ok 1\n" }\nif ($line2 eq "two\n") { print "ok 2\n" } else { print "not ok 2\n" }\n__DATA__\none\ntwo\nEXPECT\nok 1\nok 2\n########\n# http://rt.perl.org/rt3/Ticket/Attachment/828796/403048/perlbug.rep.txt\nmy @data_positions = tell(DATA);\nwhile (<DATA>){\n    if (/^__DATA__$/) {\n        push @data_positions, tell(DATA);\n    }\n}\n\nmy @fh_positions;\nopen(my $fh, '<', $0) or die;\nwhile (<$fh>){\n    if (/^__DATA__$/) {\n        push @fh_positions, tell($fh);\n    }\n}\n\nprint "not " unless "@data_positions" eq "@fh_positions";\nprint "ok";\n\n__DATA__\nab\n__DATA__\nab\n\n__DATA__\nab\n__DATA__\nlotsa junk\nnothing\nEXPECT\nok\n########\n# Which package is __DATA__ in?\npackage foo;\nBEGIN{*foo::=*bar::}\nprint <DATA>;\n__DATA__\n123\nEXPECT\n123')